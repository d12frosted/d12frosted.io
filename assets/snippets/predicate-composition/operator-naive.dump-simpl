
==================== Tidy Core ====================
2020-01-15 06:32:32.242106 UTC

Result size of Tidy Core
  = {terms: 90, types: 74, coercions: 16, joins: 0/0}

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
Main.main5 :: Text.ParserCombinators.ReadP.P Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
Main.main5
  = GHC.Read.$fReadInteger_$sreadNumber
      GHC.Read.$fReadInteger2
      Text.ParserCombinators.ReadPrec.minPrec
      @ Integer
      (Text.Read.readEither7 @ Integer)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$seven2 :: Integer
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Main.$seven2 = 2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$seven1 :: Integer
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Main.$seven1 = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$trModule3 = GHC.Types.TrNameS Main.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$trModule2 = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$trModule1 = GHC.Types.TrNameS Main.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule = GHC.Types.Module Main.$trModule3 Main.$trModule1

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
Main.main4 :: Integer
[GblId, Str=x]
Main.main4
  = errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep @ Integer Text.Read.readEither5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.main3 :: Integer
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
Main.main3 = 10

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
Main.main2 :: Integer
[GblId, Str=x]
Main.main2
  = errorWithoutStackTrace
      @ 'GHC.Types.LiftedRep @ Integer Text.Read.readEither2

-- RHS size: {terms: 51, types: 31, coercions: 7, joins: 0/0}
Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 360 0}]
Main.main1
  = \ (s_a4GQ :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case GHC.IO.Handle.Internals.wantReadableHandle_1
             @ String
             GHC.IO.Handle.Text.hGetLine4
             GHC.IO.Handle.FD.stdin
             (GHC.IO.Handle.Text.hGetLine2
              `cast` (<GHC.IO.Handle.Types.Handle__>_R
                      ->_R Sym (GHC.Types.N:IO[0] <String>_R)
                      :: (GHC.IO.Handle.Types.Handle__
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, String #))
                         ~R# (GHC.IO.Handle.Types.Handle__ -> IO String)))
             s_a4GQ
      of
      { (# ipv_a4Hf, ipv1_a4Hg #) ->
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout
          (case Text.Read.readEither8
                  @ Integer
                  (Text.ParserCombinators.ReadP.run @ Integer Main.main5 ipv1_a4Hg)
           of {
             [] -> case Main.main4 of wild1_00 { };
             : x_a6lr ds1_a6ls ->
               case ds1_a6ls of {
                 [] ->
                   case integer-gmp-1.0.2.0:GHC.Integer.Type.ltInteger#
                          x_a6lr Main.main3
                   of {
                     __DEFAULT -> GHC.Show.$fShowBool4;
                     1# ->
                       case integer-gmp-1.0.2.0:GHC.Integer.Type.gtInteger#
                              x_a6lr Main.$seven1
                       of {
                         __DEFAULT ->
                           case integer-gmp-1.0.2.0:GHC.Integer.Type.eqInteger#
                                  (integer-gmp-1.0.2.0:GHC.Integer.Type.remInteger
                                     x_a6lr Main.$seven2)
                                  Main.$seven1
                           of {
                             __DEFAULT -> GHC.Show.$fShowBool4;
                             1# -> GHC.Show.$fShowBool2
                           };
                         1# -> GHC.Show.$fShowBool2
                       }
                   };
                 : ipv2_a6mg ipv3_a6mh -> case Main.main2 of wild2_00 { }
               }
           })
          GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: IO ()
                  ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))))
        ipv_a4Hf
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                          ~R# IO ())}]
main
  = Main.main1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
Main.main6
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Main.main6
  = GHC.TopHandler.runMainIO1
      @ ()
      (Main.main1
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.Prim.State# GHC.Prim.RealWorld
                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                  ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[GblId,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main6
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
                          ~R# IO ())}]
:Main.main
  = Main.main6
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #))
               ~R# IO ())


