---
title: Make the Fish fly
tags: fish
---

I have always been inspired by the people who use (or at least can use) terminal
for any kind of activity that is associated with programming. Sure, every task
has its own set of instruments to be solved with. But there are instruments that
you can count on in almost any situation. That's why I spend so much time in the
terminal.

For a long time (like a year and a half) I was using ~zsh~ beefed with
~oh-my-zsh~. It has so much functionality (I wasn't even using), so many colours
and great auto-completion. And everything right out of the box without the need
of writing (or copying) over 9000 lines of configuration code. So I was really
happy until someone mentioned ~fish~ shell in comments to [[http://www.reddit.com/r/haskell/comments/2u6b8m/use_haskell_for_shell_scripting/][Use Haskell for shell
scripting]] thread on Reddit. So after few minutes of reading how awesome ~fish~
is, I decided to give it a try.

* Fish: catch it before you cook
  :PROPERTIES:
  :CUSTOM_ID:      h:ED945509-0981-457F-8F36-B7DF8B809882
  :END:

For installation guide, check [[http://fishshell.com][official site]] or readme file on [[https://github.com/fish-shell/fish-shell][GitHub]]. Currently,
I prefer installing from sources, because I like features from the 'bleeding
edge'. After installation you might want to make ~fish~ your default shell, so
you need to use ~chsh~:

#+BEGIN_SRC bash
$ chsh -s $(which fish)
#+END_SRC

On OS X (and some other systems) you might face an error saying ~chsh:his ex
/path/to/fish: non-standard shell~. In this case, you need to modify
~/etc/shells~ file by adding the path to your fish.

#+BEGIN_SRC bash
$ sudo sh -c 'echo $(which fish) >> /etc/shells'
#+END_SRC

In case of any other problems - [[http://google.com][may the force be with you]]. Otherwise - you are
ready to dive in. I am not going to write a tutorial to ~fish~ (mostly because
it already has good written one [[http://fishshell.com/docs/current/tutorial.html][here]]). It covers most important aspects of
day-to-day ~fish~, but you might also want to read full [[http://fishshell.com/docs/current/index.html][documentation]]. So here
are some very subjective thoughts.

* Fish: first impression
  :PROPERTIES:
  :CUSTOM_ID:      h:C635AA30-E9EC-4E86-B2B1-E4BA90DC0670
  :END:

And the first thing to notice - ~fish~ offers really great auto-suggestions that
are based on completions and history. When I saw this for the first time - I was
really impressed.

#+BEGIN_EXPORT html
<div class="post-image">
<img alt="Hello" src="/images/1423317607.png" />
<p class="post-image-caption">
<code>Fish</code> knows what you did last summer
</p>
</div>
#+END_EXPORT

You can easily navigate through history. For example, you can navigate through
~ghc~ or ~ghc --make~ history. Or even ~ghc --make -O2~ history. It's just...
well, very convenient.

The second thing about ~fish~ completions - they are based on ~man~ pages. In
~bash~ you have ~bash-completion~, in ~oh-my-zsh~ you have plug-ins (and when
you have a lot of them, your life becomes kind of laggy). But ~fish~ takes a lot
of completions from ~man~ pages. And it works so fast, that it's just amazing.
Now I don't need to remove everything I typed just to check ~man~ when I forget
which key I need, ~-N~ or ~-n~. All completions are paginated, and you can
scroll them to find what you need. Super productive.

#+BEGIN_EXPORT html
<div class="post-image">
<img alt="Hello" src="/images/1423317617.png" />
<p class="post-image-caption">
<code>Fish</code> generates them automatically by parsing your installed man pages
</p>
</div>
#+END_EXPORT

So you better keep pressing ~<tab>~ in different situations to see what else it
can complete for you.

#+BEGIN_SRC bash
Î» git checkout <tab>
features/fish  (Branch)  master  (Branch)  origin/master  (Branch)
#+END_SRC

But yeah, sometimes command you are executing doesn't have its own ~man~ page.
For such cases, you also have an option to write your own completions. For more
information, check out [[http://fishshell.com/docs/current/index.html#completion-own][this guide]].

* Fish: configurations
  :PROPERTIES:
  :CUSTOM_ID:      h:31011840-69BF-4068-AF8E-E3643C920CDB
  :END:

~Fish~ comes with really great configurations out of the box. For most users, it
might be enough to configure only their prompt and ~PATH~ variable. But before
you start writing your own configurations I highly recommend to checkout
~fish_config~ command. This allows you configure ~fish~ from the browser (I was
amazed). I don't say that you must configure it from the browser, but just take
a look! Sometimes I use this thing just to check some custom functions and check
bindings.

On startup, ~fish~ evaluates files ~/path/to/fish/config.fish~,
~/etc/fish/config.fish~ and ~$HOME/.config/fish/config.fish~ in specified order.
If you want to change ~fish~ configurations, you should modify only
~/etc/fish/config.fish~ file for system wide configurations and
~$HOME/.config/fish/config.fish~ file for user only configurations.

Actually, ~fish~ supports pretty cool ~$XDG_CONFIG_HOME~ variable for specifying
the path to user-only configurations directory. You need to set this variable to
the path of the directory that contains ~fish~ directory. I do use it because I
like to have all dot files in one repository. You can change its value by using
the ~set~ function:

#+BEGIN_SRC bash
$ set -U XDG_CONFIG_HOME ~/.environment
#+END_SRC

We use ~-U~ flag here because we need to give ~XDG_CONFIG_HOME~ universal scope
(it will be shared between all the current users fish instances on the current
computer, and will be preserved across restarts of the shell).

If you want to configure your prompt, you need to define the ~fish_prompt~
function in file ~/path/to/configuration/fish/fish_prompt.fish~. A simple
example from the documentation:

#+BEGIN_SRC fish
function fish_prompt -d "Write out the prompt"
  printf '%s@%s%s%s%s> ' (whoami) (hostname|cut -d . -f 1) (set_color $fish_color_cwd) (prompt_pwd) (set_color normal)
end
#+END_SRC

Before rushing into creating your own prompt, I recommend to check some prompts
that are available from box. Just ~fish_config~ and go to ~Prompt~ tab.

* Fish: one language to script them all
  :PROPERTIES:
  :CUSTOM_ID:      h:A79AA3FB-2B29-45CB-A960-652227FD13CE
  :END:

As you might already know, ~fish~ has its own scripting language that does not
care about POSIX compatibility. And in my opinion, this is the most
controversial point in discussions like 'zsh vs fish'. While it's less verbose
and more obvious, I see ~fish~ language as unnecessary drag. Seriously, when I
need to write any script that can't be described in one or two lines - I prefer
to use ~Haskell~ or ~Ruby~. And also there are tons of great ~sh~ one-liners
that I can't call from the ~fish~ shell. And ~git cat-file -p branch^{tree}~ becomes
~git cat-file -p branch^\{tree\}~.

* Conclusion
  :PROPERTIES:
  :CUSTOM_ID:      h:319F356D-1B5D-42AD-B605-511174570909
  :END:

~Fish~ does not try to be everything but it does try to have a great out of the
box experience. You definitely should try ~fish~ to make your own conclusion.
Because everyone is a unique case. As for myself - I am willing to give it few
months to see if ~fish~ really suits my needs.

** Advantages

- Not POSIX compatible. While I do like some differences from ~sh~, I prefer to
  use ~sh~ language for little scripts. When I need to write something
  non-trivial I better use ~Haskell~ or ~Ruby~. Seriously, in my opinion -
  ~fish~ language is overhead. But actually, this is a really minor drawback,
  which strikes only when you want to use great ~sh~ one-liners.

** Disadvantages

- Syntax highlighting.
- History de-duplication.
- Inline auto-suggestions.
- Tab completion using man page data.
- Paginated completion.

I don't name ~fish~ dependency as a drawback, because I don't work in
an environment that I can't change for my needs. And anyway ~Haskell~ with all
packages I need is far more heavy dependency then ~fish~. So don't be angry.

* Epilogue
  :PROPERTIES:
  :CUSTOM_ID:      h:B8241F23-4BBF-4375-A314-F5DF4816341A
  :END:

I am really tired of ~oh-my-zsh~. It's a great project, but it's too big for me.
It comes with functionality I am not aware of. I don't have time and desire to
dig it. And sometimes it's hard to have fixes to it. When I checked it's
repository I found 417 unresolved pull requests. Some of them are few years old.
Most of them are not paid any attention. I understand why it's so. But I don't
like this situation. Yes, you can use ~zsh~ with minimal configurations. And
[[https://github.com/jleclanche/dotfiles/blob/master/.zshrc][here]] is an example of really great ~zsh~ minimal configurations.

While I am using ~fish~ I experience the pleasure of configuring everything
steps by step. I understand that you can do the same with any shell. But
currently, I am paying attention to ~fish~. I really want to see it fly.

*Have a nice shell-time!*

* My settings
  :PROPERTIES:
  :CUSTOM_ID:      h:7A6D5F1C-2215-4448-A4DB-7CBBE678679D
  :END:

  As most of the stuff, my settings can be found on [[https://github.com/d12frosted/environment/tree/master/fish][GitHub]].
