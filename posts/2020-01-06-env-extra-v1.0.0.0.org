---
title: 'env-extra v1.0.0.0'
tags: 'haskell, env-extra'
description: 'Announcement of new version of env-extra'
---

[[https://hackage.haskell.org/package/env-extra][file:/images/hackage-v1.0.0.0-blue.svg]]

It's hard (though possible) to imagine a script that doesn't access environment
variables. In Haskell ecosystem there is a good built-in module
[[https://hackage.haskell.org/package/base-4.12.0.0/docs/System-Environment.html][System.Environment]] that does the job, but it has several drawbacks. First of
all, it uses =String= data type as input and as an output. And secondly, it
lives in =IO=. Both of these drawbacks are not that critical, but calling all
these =Text.pack=, =Text.unpack= and =liftIO= in every program drives me nuts.
So several years ago (somewhere in 2016) I decided to write a [[https://github.com/d12frosted/env-extra][simple library]]
that wraps it for me.

I've been using this library for a long time and today I uploaded it to [[https://hackage.haskell.org/package/env-extra][Hackage]].
While it's really small, I still think that some of you might find it useful,
because it has some nice features that original =System.Environment= doesn't
have. Let's take a look!

#+BEGIN_HTML
<!--more-->
#+END_HTML

So in the nutshell, there are three functions to access environment variables:

- =envMaybe= of type =( MonadIO m, IsString a ) => Text -> m (Maybe a)= - a
  wrapper for =lookupEnv=. Aside from working with =Text= input it also leaves
  in =MonadIO= and returns an =IsString=, which the most interesting part here.
  I will talk about it shortly.
- =getEnv= of type =( MonadThrow m, MonadIO m, IsString a ) => Text -> m a= -
  the unsafe version of =envMaybe=.
- =envRead= of type =( MonadIO m ) => Reader a -> Text -> m (Maybe a)= - a
  helper function that also reads (or parses) a value from environment variable
  by specifying the [[https://hackage.haskell.org/package/text-1.2.4.0/docs/Data-Text-Read.html][Reader]].

In most cases my choice is between =envMaybe= and =getEnv= depending on my
desire to handle missing variable.

#+begin_src haskell
  > envMaybe "NAME"
  Nothing

  > setEnv "NAME" "Boris"

  > envMaybe "NAME"
  Just "Boris"
#+end_src

What's interesting, =envMaybe= is polymorphic in it's return type, which means
that it plays nicely in composition chains and you don't need to explicitly
convert between =Text=, =String=, =ByteString= data types.

#+begin_src haskell
  > :t putStrLn
  putStrLn :: String -> IO ()

  > getEnv "NAME" >>= putStrLn
  Boris

  > setEnv "SOME_VAR" "NAME"

  > getEnv "SOME_VAR"
  "NAME"

  > getEnv "SOME_VAR" >>= getEnv
  "Boris"
#+end_src

The other function that I use (though not that often) is =envRead=.

#+begin_src haskell
  > setEnv "AGE" "10"

  > envRead decimal "AGE"
  Just 10

  > envRead hexadecimal "AGE"
  Just 16

  > envRead hexadecimal "HOME"
  Nothing
#+end_src

In some rare cases you might want to use the =Read= instance for parsing. Though
it's not advisable.

#+begin_src haskell
  > data Status = SomeStatus1 | SomeStatus2 deriving (Show, Read, Eq)

  > getEnv "STATUS"
  "SomeStatus2"

  > envRead read "STATUS" :: IO (Maybe Status)
  Just SomeStatus2
#+end_src

I hope you'll find this library helpful. Please do send me your comments, idea
and thoughts! And any contribution is welcome!
