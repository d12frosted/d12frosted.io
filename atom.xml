<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>d12frosted</title>
    <link href="https://d12frosted.io/atom.xml" rel="self" />
    <link href="https://d12frosted.io" />
    <id>https://d12frosted.io/atom.xml</id>
    <author>
        <name>Boris Buliga</name>
        <email>boris@d12frosted.io</email>
    </author>
    <updated>2022-07-14T00:00:00Z</updated>
    <entry>
    <title>Vulpea v0.3</title>
    <link href="https://d12frosted.io/posts/2022-07-14-vulpea-0.3.html" />
    <id>https://d12frosted.io/posts/2022-07-14-vulpea-0.3.html</id>
    <published>2022-07-14T00:00:00Z</published>
    <updated>2022-07-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="A new version of Vulpea library that is focused on query performance">
    <meta property="og:title" content="Boris Buliga - Vulpea v0.3" />
    <meta property="og:description" content="A new version of Vulpea library that is focused on query performance" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2022-07-14-vulpea-0.3.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Vulpea v0.3</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Vulpea v0.3</h1>
  <section class="subtitle">
    Posted on July 14, 2022
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">#org-roam</a>, <a title="All pages tagged 'vulpea'." href="../tags/vulpea.html">#vulpea</a>
  </section>
  
  <section>
    <p><img src="../images/2022-07-14-vulpea-0.3/2022-07-20-09-51-46-vulpea-logo.webp" class="img-half" /></p>
<p>The time has come to release a new version of <a href="https://github.com/d12frosted/vulpea">Vulpea</a>, a collection of note-taking functions based on Org and Org Roam. Almost a year has passed since the release of v0.2. Over this time, Vulpea got several major features that deserve a dedicated version. In truth, I wanted to release it almost half a year ago, but the war kicked in, and I had more important things to focus on.</p>
<p>The main focus of this release is the <a href="https://github.com/d12frosted/vulpea#query-from-database">performance of query operations</a>. Expect a 4.5x speed boost for generic <code class="verbatim">vulpea-db-query</code> and even more with specialized queries. All that thanks to materialized view table for notes.</p>
<div class="table-container">
<table>
<caption><code class="verbatim">vulpea-db-query</code> performance on a set of 9554 notes (in seconds)</caption>
<thead>
<tr class="header">
<th>test</th>
<th>result size</th>
<th><a href="https://github.com/d12frosted/vulpea/blob/551495a59fb8c3bcd49a091b233e24e4cb8b584c/vulpea-db.el#L76-L187">regular</a></th>
<th>view table</th>
<th>ratio</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code class="verbatim">tags-some</code></td>
<td>30 notes</td>
<td>4.6693460650999995</td>
<td>1.0112478712</td>
<td>4.6174100</td>
</tr>
<tr class="even">
<td><code class="verbatim">tags-every</code></td>
<td>3168 notes</td>
<td>4.7333844436999996</td>
<td>1.0059819176</td>
<td>4.7052381</td>
</tr>
<tr class="odd">
<td><code class="verbatim">links-some</code></td>
<td>1657 notes</td>
<td>4.8095771283</td>
<td>1.0462236128999999</td>
<td>4.5970833</td>
</tr>
<tr class="even">
<td><code class="verbatim">links-every</code></td>
<td>92 notes</td>
<td>4.5517473337999995</td>
<td>1.0204833089</td>
<td>4.4603839</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<caption>specialized queries performance on a set of 9554 notes (in seconds)</caption>
<thead>
<tr class="header">
<th>test</th>
<th>result size</th>
<th>generic</th>
<th>specialized</th>
<th>ratio</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code class="verbatim">tags-some</code></td>
<td>30 notes</td>
<td>1.0112478712</td>
<td>0.0066033426</td>
<td>153.14182</td>
</tr>
<tr class="even">
<td><code class="verbatim">tags-every</code></td>
<td>3168 notes</td>
<td>1.0059819176</td>
<td>0.5709392964999999</td>
<td>1.7619770</td>
</tr>
<tr class="odd">
<td><code class="verbatim">links-some</code></td>
<td>1657 notes</td>
<td>1.0462236128999999</td>
<td>0.4248580532</td>
<td>2.4625251</td>
</tr>
<tr class="even">
<td><code class="verbatim">links-every</code></td>
<td>92 notes</td>
<td>1.0204833089</td>
<td>0.0545313596</td>
<td>18.713696</td>
</tr>
</tbody>
</table>
</div>
<p>Checkout <a href="https://github.com/d12frosted/vulpea/blob/master/CHANGELOG.org">CHANGELOG</a> for full list of changes. Read further to learn details.</p>
<!--more-->

<h1 id="2d871a32-af63-4d05-9f99-65e1f5510921" id="materialized-view-table">Materialized view table</h1>
<p>Materialized view table, huh? The concept is actually pretty simple. But first, you need to understand how Org Roam DB is designed.</p>
<p>Under the hood, Org Roam uses SQLite with 7 different tables. Each table stores various information about every single note. There is a table with ‘node’ information like title, level, properties, etc. But tags, aliases, and links are stored in separate tables. And you have to query data from all these tables to get a fully populated note. It <a href="https://github.com/org-roam/org-roam/commit/a199886ef7ae208b0b10dc45e0df9b54d210cd4d">becomes messy</a> and slow if you need to get lots of fully populated notes.</p>
<p>I won’t go too much into detail explaining <a href="https://github.com/d12frosted/vulpea/commit/e2e82fb1288e68f4b84fcd003226fd053677e6c2#diff-45d792d2854eb88fa849977354fe467f09e47c0ca44a51ff5c5b2e1276725a40">how it worked previously in Vulpea</a> and <a href="https://github.com/org-roam/org-roam/blob/c3867619147175faf89ed8f3e90a1e67a4fd9655/org-roam-node.el#L337-L405">how it still works in Org Roam</a>. That deserves a separate post that can be based on my conversation with Jörg Volbers. In short, it uses a trick to multiply all needed tables into one big table. Definitely not my proudest contribution. But most importantly, it is <a href="https://github.com/org-roam/org-roam/commit/a199886ef7ae208b0b10dc45e0df9b54d210cd4d#r52949692">error-prone</a> and slow.</p>
<p>After <a href="https://github.com/d12frosted/vulpea/commit/e2e82fb1288e68f4b84fcd003226fd053677e6c2">adding links</a> to the <code class="verbatim">vulpea-note</code>, I realised that <code class="verbatim">vulpea-db-query</code> became too slow for my collection of notes. And so I decided to add an extra table, where every row contains a fully materialised/populated note. This simple idea provided a 4.5x performance boost to all functions using <code class="verbatim">vulpea-db-query</code>.</p>
<p>This is a game changer with only one downside - write performance degradation. Of course, we write the same data twice - in Org Roam tables and then in materialised view table. But there is more to writing performance degradation. It is hard to hook into Org Roam parsing and writing routine, so I had to duplicate buffer parsing. And this is the biggest performance offender. In most cases, when you simply modify a single note, this is hardly noticeable. But syncing 9k notes takes x2 time.</p>
<div class="table-container">
<table>
<caption>synchronisation performance (in seconds)</caption>
<thead>
<tr class="header">
<th>test</th>
<th>regular</th>
<th>view table</th>
<th>diff</th>
<th>ratio</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>9554 notes</td>
<td>172.79389154999998</td>
<td>337.61603822</td>
<td>164.82215</td>
<td>1.9538656</td>
</tr>
<tr class="even">
<td>small note</td>
<td>0.000354079889</td>
<td>0.000416262194</td>
<td>6.2182305e-5</td>
<td>1.1756166</td>
</tr>
<tr class="odd">
<td>medium note</td>
<td>0.000492199416</td>
<td>0.000539389997</td>
<td>4.7190581e-5</td>
<td>1.0958770</td>
</tr>
<tr class="even">
<td>huge note</td>
<td>0.1732851848</td>
<td>0.2240508243</td>
<td>0.050765640</td>
<td>1.2929601</td>
</tr>
</tbody>
</table>
</div>
<p>This penalty can be omitted if <a href="https://github.com/org-roam/org-roam/issues/1997">materialised view table becomes part of Org Roam</a>. Alternatively, the Org Roam routine can benefit from refactoring to enable this kind of hook without any performance loss. Do I plan to work in this direction? Definitely! But I feel a lack of motivation and resources to promise anything.</p>
<p>See <a href="https://github.com/d12frosted/vulpea/pull/116">vulpea#116</a> for benchmarks.</p>
<h1 id="88017151-c3a0-42db-b16d-a8ddbf4ee66f" id="specialized-queries">Specialized queries</h1>
<p>As I already mentioned, all this performance mumbo jumbo started because of <a href="https://github.com/d12frosted/vulpea/discussions/106">the inclusion of links</a> to <code class="verbatim">vulpea-note</code>. I literally was <a href="https://github.com/d12frosted/vulpea/discussions/106#discussioncomment-1601429">disappointed</a> with the performance. And I decided to take the path of least resistance and provided some specialized queries (because they kind of solve the problem for my most used patterns).</p>
<p>What are the most used patterns? Get the list of notes tagged by all/any given tags. Get the list of notes linking to all/any given notes.</p>
<ul>
<li><code class="verbatim">vulpea-db-query-by-tags-some</code> - return all notes tagged with one of the provided <code class="verbatim">TAGS</code>.</li>
<li><code class="verbatim">vulpea-db-query-by-tags-every</code> - return all notes tagged by every tag from the list of provided <code class="verbatim">TAGS</code>.</li>
<li><code class="verbatim">vulpea-db-query-by-links-some</code> - return all notes linking at least one of the provided <code class="verbatim">DESTINATIONS</code>.</li>
<li><code class="verbatim">vulpea-db-query-by-links-every</code> - return all notes linking each and every provided <code class="verbatim">DESTINATIONS</code>.</li>
</ul>
<p>These are <a href="https://github.com/d12frosted/vulpea/discussions/106#discussioncomment-1601429">benchmark</a> results on a set of 8390 notes before the materialized view was introduced.</p>
<div class="table-container">
<table>
<caption>query by links performance (in seconds)</caption>
<thead>
<tr class="header">
<th>test</th>
<th><code class="verbatim">org-roam</code> API</th>
<th><code class="verbatim">vulpea-db-query</code></th>
<th>specialized</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>simple</td>
<td>0.28974334</td>
<td>2.28282158</td>
<td><strong>0.02278065</strong></td>
</tr>
<tr class="even">
<td>popular</td>
<td>1.85930086</td>
<td>2.34636907</td>
<td><strong>1.42250805</strong></td>
</tr>
<tr class="odd">
<td>big intersection</td>
<td>4.53420141</td>
<td>2.27249325</td>
<td><strong>0.46843158</strong></td>
</tr>
</tbody>
</table>
</div>
<p>What exactly makes specialized queries so fast? We start by narrowing down all notes in the fastest possible way. And then, we exchange this list of ids to list of notes in a single transaction.</p>
<h2 id="8f413ca0-cc75-42ea-9d61-38a27e4d04b7" id="some"><code class="verbatim">*-some</code></h2>
<p>We use <a href="https://www.sqlite.org/lang_expr.html#the_in_and_not_in_operators">IN operator</a> to get notes tagged by at least one of the provided tags.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sql"><code class="sourceCode sql"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">select</span> <span class="kw">distinct</span> node_id</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">from</span> tags</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">where</span> tag <span class="kw">in</span> (<span class="st">'&quot;wine&quot;'</span>, <span class="st">'&quot;barberry/public&quot;'</span>);</span></code></pre></div>
<p>Ignore serialisation of the string data. It is related to <a href="https://github.com/skeeto/emacsql#limitations">emacsql limitations</a>.</p>
<p>Now that we have the list of ids, we can get list of notes in one transaction by using <code class="verbatim">vulpea-db-query-by-ids</code>.</p>
<h2 id="821ef746-268c-4966-864b-7c7c79bc9fe4" id="every"><code class="verbatim">*-every</code></h2>
<p>We use <a href="https://www.sqlite.org/lang_select.html#compound_select_statements">INTERSECT operator</a> to get notes tagged by all provided tags. Looks more tricky than <code class="verbatim">IN</code> operator, but the idea is simple. We find a list of notes tagged by first tag, a list of notes tagged by second tag, a list of notes tagged by third tag, and so on… And then we calculate intersection of these lists. Voilà!</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sql"><code class="sourceCode sql"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">select</span> <span class="kw">distinct</span> node_id</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">from</span> tags</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">where</span> tag <span class="op">=</span> <span class="st">'&quot;wine&quot;'</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">INTERSECT</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">select</span> <span class="kw">distinct</span> node_id</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="kw">from</span> tags</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="kw">where</span> tag <span class="op">=</span> <span class="st">'&quot;barberry/public&quot;'</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>;</span></code></pre></div>
<p>Now that we have the list of ids, we can get list of notes in one transaction by using <code class="verbatim">vulpea-db-query-by-ids</code>.</p>
<h1 id="145a3aa9-9201-4511-acee-0ee4c2688fa7" id="other-goodies">Other goodies</h1>
<ul>
<li>More data is available in <code class="verbatim">vulpea-note</code>: properties and links.</li>
<li>Note meta is persisted in <code class="verbatim">org-roam-db</code> in <code class="verbatim">meta</code> table.</li>
<li>API to access data from <code class="verbatim">vulpea-note-meta</code>:
<ul>
<li><code class="verbatim">vulpea-note-meta-get-list</code> - to get all values of given <code class="verbatim">PROP</code> and <code class="verbatim">TYPE</code>;</li>
<li><code class="verbatim">vulpea-note-meta-get</code> - to get the first value of given <code class="verbatim">PROP</code> and <code class="verbatim">TYPE</code>.</li>
</ul></li>
<li>New function to remove buffer properties - <code class="verbatim">vulpea-buffer-prop-remove</code>.</li>
<li>Improve <code class="verbatim">filetags</code> handling:
<ul>
<li>Property format them with <code class="verbatim">:</code> as separator;</li>
<li>Remove property when setting them to empty list instead of leaving empty property.</li>
</ul></li>
<li>Allow to configure candidates source for <code class="verbatim">vulpea-find</code> function via <code class="verbatim">vulpea-find-default-candidates-source</code> variable.</li>
<li>New function to select from arbitrary list of notes as opposed to relying on filter - <code class="verbatim">vulpea-select-from</code>.</li>
<li>Add shortcuts for checking tags on the note:
<ul>
<li><code class="verbatim">vulpea-note-tagged-all-p</code> - return non-nil if a <code class="verbatim">NOTE</code> is tagged by all of the <code class="verbatim">TAGS</code>.</li>
<li><code class="verbatim">vulpea-note-tagged-any-p</code> - return non-nil if a <code class="verbatim">NOTE</code> is tagged by any of the <code class="verbatim">TAGS</code>.</li>
</ul></li>
</ul>
<h1 id="f9589a65-e67a-4ba9-b4dd-b0b51a97f909" id="next-steps">Next steps</h1>
<p>Vulpea already offers a lot of features. While working on other projects that use Vulpea, I discover new missing features that I would love to implement. And issue tracker is not empty. Unless something changes, my plan is the following.</p>
<ol type="1">
<li>Add attachment directory path to <code class="verbatim">vulpea-note</code>. This is needed to boost <a href="https://barberry.io">barberry.io</a> construction, so I prioritise this simple feature.</li>
<li>Provide a simple way to add more tables to org-roam-db and improve their initialisation flow.</li>
<li>Provide outline-level <a href="https://github.com/d12frosted/vulpea#metadata">metadata</a>. See <a href="https://github.com/d12frosted/vulpea/issues/75">vulpea#75</a>.</li>
</ol>
<p>Stay tuned and safe travels! Remember to use Emacs responsibly.</p>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2022-07-14-vulpea-0.3.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>emacs-plus: PATH injection</title>
    <link href="https://d12frosted.io/posts/2022-05-12-emacs-plus-path-injection.html" />
    <id>https://d12frosted.io/posts/2022-05-12-emacs-plus-path-injection.html</id>
    <published>2022-05-12T00:00:00Z</published>
    <updated>2022-05-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="A new feature provided by Emacs+ that injects PATH value during build">
    <meta property="og:title" content="Boris Buliga - emacs-plus: PATH injection" />
    <meta property="og:description" content="A new feature provided by Emacs+ that injects PATH value during build" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2022-05-12-emacs-plus-path-injection.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - emacs-plus: PATH injection</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>emacs-plus: PATH injection</h1>
  <section class="subtitle">
    Posted on May 12, 2022
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs-plus'." href="../tags/emacs-plus.html">#emacs-plus</a>
  </section>
  
  <section>
    <blockquote>
<p>Ever find that a command works in your shell, but not in Emacs?</p>
<p>– <a href="https://github.com/purcell">@purcell</a></p>
</blockquote>
<p>There are two known billion-dollar problems in software engineering: null pointer exceptions and caching. Over time of maintaining various projects I realised that there is a third billion-dollar problem - <code class="verbatim">PATH</code> value. Whenever something doesn’t build, whenever something doesn’t work as expected, the blood trail often leads to… <code class="verbatim">PATH</code> value. Sometimes it’s some other environment variable, but in most of the cases, it’s just <code class="verbatim">PATH</code>.</p>
<p>Time to time I help Emacs+ users with <code class="verbatim">PATH</code> related issues, so I figured that Emacs+ should provide some solution out of box. 10 messages from users in an esoteric project is like Maidan in Kyiv (yup, now I am bringing politics in here). So there is a huge problem needs solving. From thought to solution the path is quick.</p>
<p>TL;DR, your <code class="verbatim">PATH</code> value is now being injected into <code class="verbatim">Emacs.app</code> during build, so it is picked up by Emacs whenever you run it from Finder, Docker, Spotlight or <code class="verbatim">launchd</code> system. Works for <code class="verbatim">emacs-plus@28</code> and <code class="verbatim">emacs-plus@29</code>.</p>
<!--more-->

<p>Even though I talk about problems related to <code class="verbatim">PATH</code> value, it’s value is actually correct, just not something we expect when it comes to using external binaries from within Emacs.</p>
<p>Disclaimer. In the next few paragraphs I am explaining how macOS runs applications, but it might be not fully accurate as I am not an expert in these low level details. At least, speculation stands, so bear with me. And if you know better then me, please do tell me, so we can improve this information.</p>
<p>User applications in macOS are running in the login shell environment. From <code class="verbatim">PATH</code> perspective, it means that it’s value is inherited from login shell. So what’s the value? If we take a look at <code class="verbatim">/etc/profile</code> and <code class="verbatim">/etc/zshenv</code> we see that they all run <code class="verbatim">path_helper</code>, which already appeared on my blog in <a href="../posts/2021-05-21-path-in-fish-with-nix-darwin.html">Fixing PATH in fish with nix-darwin</a> post. In short, it’s a helper for constructing <code class="verbatim">PATH</code> environment variable by taking entries from <code class="verbatim">/etc/paths</code> file and all files under <code class="verbatim">/etc/paths.d/</code>. It actually also constructs <code class="verbatim">MANPATH</code> entries, but it’s not important right now.</p>
<p>So by default, applications have <code class="verbatim">PATH</code> value defined by result of <code class="verbatim">path_helper</code> invocation.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cat /etc/paths</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">/usr/local/bin</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">/usr/bin</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ex">/bin</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ex">/usr/sbin</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ex">/sbin</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ls <span class="at">-l</span> /etc/paths.d</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="ex">-rwxr-xr-x</span> 1 root wheel 23 Apr 22 20:47 100-rvictl<span class="pp">*</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cat /etc/paths.d/100-rvictl</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="ex">/Library/Apple/usr/bin</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> /usr/libexec/path_helper <span class="at">-s</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="va">PATH</span><span class="op">=</span><span class="st">&quot;/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin&quot;</span><span class="kw">;</span> <span class="bu">export</span> <span class="va">PATH</span><span class="kw">;</span></span></code></pre></div>
<p>And this is pretty much the same <code class="verbatim">PATH</code> most users see unless they tweak things. As it turns out there are several ways to do it. I am not going to dig into each of them, but roughly, you have the following options:</p>
<ol type="1">
<li>Add a file to <code class="verbatim">/etc/paths.d/</code> with values you want to append to <code class="verbatim">PATH</code> by default. This method affects everything, so use cautiously.</li>
<li>Create a <code class="verbatim">my.startup.plist</code> in <code class="verbatim">~/Library/LaunchAgents</code> that calls <code class="verbatim">launchctl setenv</code> to modify <code class="verbatim">PATH</code>. This method affects all applications run by user.</li>
<li>Set <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/lsenvironment">LSEnvironment</a> property in applications <code class="verbatim">Info.plist</code> file. This method affects only specific application.</li>
<li><a href="https://github.com/purcell/exec-path-from-shell">purcell/exec-path-from-shell</a>, which is a great alternative of previous method, but for Emacs specifically. The biggest added value is that it works dynamically and is based on your current shell settings.</li>
</ol>
<p>At this point it might become obvious, which method Emacs+ takes to solve <code class="verbatim">PATH</code> problem for its users. No, it’s not the last option, as it’s up to user to install external packages and setup them. Less intrusive, but more error-prone solution is to modify <code class="verbatim">Emacs.apo/Info.plist</code> file to include the value of the <code class="verbatim">PATH</code> during installation.</p>
<p>Turns out, <code class="verbatim">brew</code> uses a sanitized environment, which they call <code class="verbatim">superenv</code>. If you think about it, such environment makes a lot of sense as you want to avoid any environment dependent stuff to mess up installation process. But that also means that Emacs+ formula can’t access user <code class="verbatim">PATH</code> value.</p>
<p>The good part is that it’s possible to switch to standard environment in formula definition:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="cf">class</span> <span class="dt">EmacsPlusAt29</span> <span class="kw">&lt;</span> <span class="dt">EmacsBase</span> <span class="co"># which is actually just Formula</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  env <span class="wa">:std</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>Now it’s possible to access <code class="verbatim">PATH</code> value and inject it to the <code class="verbatim">Info.plist</code>.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>prefix<span class="at">.install</span> <span class="st">&quot;nextstep/Emacs.app&quot;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co"># inject PATH to Info.plist</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>path <span class="kw">=</span> <span class="cn">ENV</span><span class="kw">[</span><span class="vs">'PATH'</span><span class="kw">]</span><span class="at">.split</span>(<span class="st">&quot;</span><span class="sc">#{</span><span class="cn">HOMEBREW_PREFIX</span><span class="sc">}</span><span class="st">/Library/Homebrew/shims/shared:&quot;</span>)<span class="at">.last</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="fu">system</span> <span class="st">&quot;/usr/libexec/PlistBuddy -c 'Add :LSEnvironment dict' '</span><span class="sc">#{</span>prefix<span class="sc">}</span><span class="st">/Emacs.app/Contents/Info.plist'&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="fu">system</span> <span class="st">&quot;/usr/libexec/PlistBuddy -c 'Add :LSEnvironment:PATH string' '</span><span class="sc">#{</span>prefix<span class="sc">}</span><span class="st">/Emacs.app/Contents/Info.plist'&quot;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="fu">system</span> <span class="st">&quot;/usr/libexec/PlistBuddy -c 'Set :LSEnvironment:PATH </span><span class="sc">#{</span>path<span class="sc">}</span><span class="st">' '</span><span class="sc">#{</span>prefix<span class="sc">}</span><span class="st">/Emacs.app/Contents/Info.plist'&quot;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="fu">system</span> <span class="st">&quot;/usr/libexec/PlistBuddy -c 'Print :LSEnvironment' '</span><span class="sc">#{</span>prefix<span class="sc">}</span><span class="st">/Emacs.app/Contents/Info.plist'&quot;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="fu">system</span> <span class="st">&quot;touch '</span><span class="sc">#{</span>prefix<span class="sc">}</span><span class="st">/Emacs.app'&quot;</span></span></code></pre></div>
<p>Notice that I remove all entries from <code class="verbatim">PATH</code> that come before (inclusive) <code class="verbatim">#{HOMEBREW_PREFIX}/Library/Homebrew/shims/shared</code>. This is because <code class="verbatim">brew</code> still appends some stuff to the <code class="verbatim">PATH</code> during build process and we definitely don’t want that stuff to be part of <code class="verbatim">PATH</code>, right?</p>
<p>That’s basically it. With these small changes you can enjoy expected <code class="verbatim">PATH</code> value without the need to use <a href="https://github.com/purcell/exec-path-from-shell">purcell/exec-path-from-shell</a>. Though this package should be used if you want to get other stuff from your interactive shell.</p>
<p>While it all might sounds like an effort not worth result, this change actually provides two extra points.</p>
<p>I could at last remove flags manipulations related to <code class="verbatim">native-comp</code> feature:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> build<span class="at">.with?</span> <span class="st">&quot;native-comp&quot;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  gcc_ver <span class="kw">=</span> <span class="dt">Formula</span><span class="kw">[</span><span class="st">&quot;gcc&quot;</span><span class="kw">]</span><span class="at">.any_installed_version</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  gcc_ver_major <span class="kw">=</span> gcc_ver<span class="at">.major</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  gcc_lib<span class="kw">=</span><span class="st">&quot;</span><span class="sc">#{</span><span class="cn">HOMEBREW_PREFIX</span><span class="sc">}</span><span class="st">/lib/gcc/</span><span class="sc">#{</span>gcc_ver_major<span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="cn">ENV</span><span class="at">.append</span> <span class="st">&quot;CFLAGS&quot;</span>, <span class="st">&quot;-I</span><span class="sc">#{</span><span class="dt">Formula</span><span class="kw">[</span><span class="st">&quot;gcc&quot;</span><span class="kw">]</span><span class="at">.include</span><span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="cn">ENV</span><span class="at">.append</span> <span class="st">&quot;CFLAGS&quot;</span>, <span class="st">&quot;-I</span><span class="sc">#{</span><span class="dt">Formula</span><span class="kw">[</span><span class="st">&quot;libgccjit&quot;</span><span class="kw">]</span><span class="at">.include</span><span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  <span class="cn">ENV</span><span class="at">.append</span> <span class="st">&quot;CFLAGS&quot;</span>, <span class="st">&quot;-I</span><span class="sc">#{</span><span class="dt">Formula</span><span class="kw">[</span><span class="st">&quot;gmp&quot;</span><span class="kw">]</span><span class="at">.include</span><span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="cn">ENV</span><span class="at">.append</span> <span class="st">&quot;CFLAGS&quot;</span>, <span class="st">&quot;-I</span><span class="sc">#{</span><span class="dt">Formula</span><span class="kw">[</span><span class="st">&quot;libjpeg&quot;</span><span class="kw">]</span><span class="at">.include</span><span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  <span class="cn">ENV</span><span class="at">.append</span> <span class="st">&quot;LDFLAGS&quot;</span>, <span class="st">&quot;-L</span><span class="sc">#{</span>gcc_lib<span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="cn">ENV</span><span class="at">.append</span> <span class="st">&quot;LDFLAGS&quot;</span>, <span class="st">&quot;-I</span><span class="sc">#{</span><span class="dt">Formula</span><span class="kw">[</span><span class="st">&quot;gcc&quot;</span><span class="kw">]</span><span class="at">.include</span><span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  <span class="cn">ENV</span><span class="at">.append</span> <span class="st">&quot;LDFLAGS&quot;</span>, <span class="st">&quot;-I</span><span class="sc">#{</span><span class="dt">Formula</span><span class="kw">[</span><span class="st">&quot;libgccjit&quot;</span><span class="kw">]</span><span class="at">.include</span><span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  <span class="cn">ENV</span><span class="at">.append</span> <span class="st">&quot;LDFLAGS&quot;</span>, <span class="st">&quot;-I</span><span class="sc">#{</span><span class="dt">Formula</span><span class="kw">[</span><span class="st">&quot;gmp&quot;</span><span class="kw">]</span><span class="at">.include</span><span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>  <span class="cn">ENV</span><span class="at">.append</span> <span class="st">&quot;LDFLAGS&quot;</span>, <span class="st">&quot;-I</span><span class="sc">#{</span><span class="dt">Formula</span><span class="kw">[</span><span class="st">&quot;libjpeg&quot;</span><span class="kw">]</span><span class="at">.include</span><span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>It’s not that bad to have them, but since Emacs own <code class="verbatim">configuration.ac</code> supports <code class="verbatim">brew</code> during <code class="verbatim">libgccjit</code> check, I’d rather let Emacs developers do the work that they know how to do (in contrast with my doings).</p>
<p>Another perk is also related to <code class="verbatim">native-comp</code> feature, but now it affects users in a more direct fashion. Native compilation normally starts <strong>before</strong> any custom user code in <code class="verbatim">init.el</code> and people <a href="https://github.com/d12frosted/homebrew-emacs-plus/issues?q=native-comp">often run into problems</a> related to <a href="https://github.com/d12frosted/homebrew-emacs-plus/issues/378">environment troubles</a>.</p>
<p>So all that is nice. Hopefully I will not need to revert this injection. Because at this point of time, injection happens in <code class="verbatim">emacs-plus@28</code> and <code class="verbatim">emacs-plus@29</code>. But most importantly, there is a blog post about <code class="verbatim">PATH</code> injection. So business here is serious, you can’t simply step back.</p>
<p>Safe travels folks! And use Emacs responsibly.</p>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2022-05-12-emacs-plus-path-injection.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>emacs-plus: stats</title>
    <link href="https://d12frosted.io/posts/2022-04-24-emacs-plus-stats.html" />
    <id>https://d12frosted.io/posts/2022-04-24-emacs-plus-stats.html</id>
    <published>2022-04-24T00:00:00Z</published>
    <updated>2022-04-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="emacs-plus usage statistics">
    <meta property="og:title" content="Boris Buliga - emacs-plus: stats" />
    <meta property="og:description" content="emacs-plus usage statistics" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2022-04-24-emacs-plus-stats.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - emacs-plus: stats</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>emacs-plus: stats</h1>
  <section class="subtitle">
    Posted on April 24, 2022
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs-plus'." href="../tags/emacs-plus.html">#emacs-plus</a>
  </section>
  
  <section>
    <p>Over time <a href="https://github.com/d12frosted/homebrew-emacs-plus">Emacs Plus</a> has grown into quite heavy <a href="https://brew.sh">homebrew</a> formula supporting 4 Emacs versions (starting with Emacs 26), 13 compilation options and 53 icons. For a long time I was accepting new options, patches and icons. Now in the process of rethinking maintenance approach I decided to take a look at how people are using this formula. Luckily, <code class="verbatim">brew</code> provides public <a href="https://formulae.brew.sh/docs/api/#analytics">analytics</a> even for taps, which is being sent by users unless they decide to disable it.</p>
<p>Of course, it’s not covering 100% of <code class="verbatim">emacs-plus</code> user base, but I still found it interesting and since I might change few things in <code class="verbatim">emacs-plus</code> based on this, I thought that other might be interested in it as well. Enjoy.</p>
<!--more-->

<h1 id="a1076a9d-1c1e-46ed-b972-70645959490a" id="versions">Versions</h1>
<div class="table-container">
<table>
<thead>
<tr class="header">
<th>version</th>
<th>30 days</th>
<th>90 days</th>
<th>365 days</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>emacs-plus@29</td>
<td>559</td>
<td>1381</td>
<td>2256</td>
</tr>
<tr class="even">
<td>emacs-plus@28</td>
<td><strong>2344</strong></td>
<td><strong>2703</strong></td>
<td><strong>5764</strong></td>
</tr>
<tr class="odd">
<td>emacs-plus@27</td>
<td>523</td>
<td>602</td>
<td>3737</td>
</tr>
<tr class="even">
<td>emacs-plus@26</td>
<td>29</td>
<td>77</td>
<td>496</td>
</tr>
</tbody>
</table>
</div>
<p>Since Emacs 28 was released recently™, there is little wonder that it’s being the most popular version among <code class="verbatim">emacs-plus</code> users. What interests me is that people are still using Emacs 26. Since it has zero footprint on maintenance, I am not going to remove older version, though I urge you to switch to latest version.</p>
<h1 id="7f8772d5-a10f-4f48-8d9a-29c047c0d41a" id="options">Options</h1>
<div class="table-container">
<table>
<thead>
<tr class="header">
<th>option (365 days)</th>
<th>emacs-plus@27</th>
<th>emacs-plus@28</th>
<th>emacs-plus@29</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>–HEAD</td>
<td>919</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>–with-ctags</td>
<td>0</td>
<td>125</td>
<td>0</td>
</tr>
<tr class="odd">
<td>–with-dbus</td>
<td>0</td>
<td>72</td>
<td>0</td>
</tr>
<tr class="even">
<td>–with-imagemagick</td>
<td>0</td>
<td>308</td>
<td>279</td>
</tr>
<tr class="odd">
<td>–with-mailutils</td>
<td>0</td>
<td>147</td>
<td>84</td>
</tr>
<tr class="even">
<td>–with-native-comp</td>
<td>0</td>
<td>4753</td>
<td>1213</td>
</tr>
<tr class="odd">
<td>–with-no-frame-refocus</td>
<td>0</td>
<td>364</td>
<td>93</td>
</tr>
<tr class="even">
<td>–with-no-titlebar</td>
<td>317</td>
<td>811</td>
<td>77</td>
</tr>
<tr class="odd">
<td>–with-x11</td>
<td>63</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>–with-xwidgets</td>
<td>170</td>
<td>1816</td>
<td>481</td>
</tr>
<tr class="odd">
<td>–without-cocoa</td>
<td>32</td>
<td>41</td>
<td>0</td>
</tr>
<tr class="even">
<td>–without-imagemagick</td>
<td>40</td>
<td>157</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
<p>Interestingly, all available options are used, even if some are used rarely. And all of them require some analysis.</p>
<p>For example, <code class="verbatim">--with-x11</code> and <code class="verbatim">--without-cocoa</code> are not straightforward from the formula point of view and they add some complexity. Since they are being rarely used, I might deprecate them in <code class="verbatim">emacs-plus@29</code>.</p>
<p>Other options, like <code class="verbatim">--with-mailutils</code>, <code class="verbatim">--with-ctags</code> and <code class="verbatim">--with-dbus</code> are straightforward and add no complexity, though they are rarely used. So I might provide a different way of enabling such options.</p>
<p>Obviously <code class="verbatim">--with-native-comp</code> and <code class="verbatim">--with-xwidgets</code> will stay with us, even though the last one is known source of troubles. This is the case where added value is bigger than maintenance burden.</p>
<p>You may notice that Emacs 26 is not mentioned in this table, but this is simply because of issue <a href="https://github.com/d12frosted/homebrew-emacs-plus/issues/195">#195</a>.</p>
<h1 id="6fbc8589-c30b-402d-8edb-116a238a75c9" id="icons">Icons</h1>
<div class="table-container">
<table>
<thead>
<tr class="header">
<th>icon</th>
<th>installs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>modern-doom3</td>
<td>1563</td>
</tr>
<tr class="even">
<td>nobu417-big-sur</td>
<td>1499</td>
</tr>
<tr class="odd">
<td>spacemacs</td>
<td>1401</td>
</tr>
<tr class="even">
<td>elrumo2</td>
<td>682</td>
</tr>
<tr class="odd">
<td>modern-sexy-v2</td>
<td>304</td>
</tr>
<tr class="even">
<td>modern-papirus</td>
<td>263</td>
</tr>
<tr class="odd">
<td>modern</td>
<td>179</td>
</tr>
<tr class="even">
<td>modern-doom</td>
<td>168</td>
</tr>
<tr class="odd">
<td>modern-sexy-v1</td>
<td>145</td>
</tr>
<tr class="even">
<td>modern-vscode</td>
<td>138</td>
</tr>
<tr class="odd">
<td>modern-cg433n</td>
<td>130</td>
</tr>
<tr class="even">
<td>modern-black-variant</td>
<td>123</td>
</tr>
<tr class="odd">
<td>cacodemon</td>
<td>116</td>
</tr>
<tr class="even">
<td>modern-purple-flat</td>
<td>109</td>
</tr>
<tr class="odd">
<td>elrumo1</td>
<td>93</td>
</tr>
<tr class="even">
<td>modern-black-dragon</td>
<td>87</td>
</tr>
<tr class="odd">
<td>modern-paper</td>
<td>45</td>
</tr>
<tr class="even">
<td>modern-sjrmanning</td>
<td>40</td>
</tr>
<tr class="odd">
<td>modern-nuvola</td>
<td>38</td>
</tr>
<tr class="even">
<td>emacs-card-british-racing-green</td>
<td>38</td>
</tr>
<tr class="odd">
<td>retro-gnu-meditate-levitate</td>
<td>36</td>
</tr>
<tr class="even">
<td>modern-alecive-flatwoken</td>
<td>36</td>
</tr>
<tr class="odd">
<td>modern-orange</td>
<td>34</td>
</tr>
</tbody>
</table>
</div>
<p>Only 23 icons out of 53 are present here, and I am 100% sure some are missing from analytics, but it’s nice to know the top 3 icons used by our community.</p>
<p>In any case, I have <a href="https://github.com/d12frosted/homebrew-emacs-plus/blob/328a0beee56a4f099f9a6eb31290223238dd24bc/iconset">simplified</a> the process of maintaining available icons and I might also provide a way to (easily?) install <code class="verbatim">emacs-plus</code> with any icon, even those that are not part of <code class="verbatim">emacs-plus</code> repository. If that works, I will cleanup icons a little bit based on usage stats and my personal preferences.</p>
<h1 id="a3f4bade-1e4d-403b-89fc-7a831ed8b778" id="so-what-are-the-plans">So what are the plans?</h1>
<p>First of all, I am not going to remove any option without informing you in all possible ways (message in the build log and issue/PR in <code class="verbatim">emacs-plus</code> repository, as I did with <code class="verbatim">--with-no-titlebar</code> option <a href="https://github.com/d12frosted/homebrew-emacs-plus/pull/434">here</a> and <a href="https://github.com/d12frosted/homebrew-emacs-plus/pull/435">here</a>). If you find out that I am going to remove an option that you are using - just let me know, either via email or GitHub issues! <code class="verbatim">emacs-plus</code> still exists only because of its user base. And I want to support your needs to possible extent.</p>
<p>Secondly, I am thinking about providing a wrapper to install <code class="verbatim">emacs-plus</code> with stuff not support by this formula. Nothing fancy, just simple options like <code class="verbatim">--with-dbus</code> and local icons. Unfortunately, <code class="verbatim">brew</code> seems not powerful enough for this task, so I will have to investigate that a bit.</p>
<p>No ETA, as always, but stay tuned. Safe travels!</p>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2022-04-24-emacs-plus-stats.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Automatic setup of spaces with yabai</title>
    <link href="https://d12frosted.io/posts/2022-04-23-yabai-spaces.html" />
    <id>https://d12frosted.io/posts/2022-04-23-yabai-spaces.html</id>
    <published>2022-04-23T00:00:00Z</published>
    <updated>2022-04-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Automatic setup of spaces with yabai">
    <meta property="og:title" content="Boris Buliga - Automatic setup of spaces with yabai" />
    <meta property="og:description" content="Automatic setup of spaces with yabai" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2022-04-23-yabai-spaces.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Automatic setup of spaces with yabai</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Automatic setup of spaces with yabai</h1>
  <section class="subtitle">
    Posted on April 23, 2022
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'yabai'." href="../tags/yabai.html">#yabai</a>
  </section>
  
  <section>
    <p><img src="../images/2022-04-23-yabai-spaces/2022-07-19-22-18-40-yabai-banner.svg" /></p>
<p>The idea behind tiling window managers is brilliant - frames on the screen are organised in a non-overlapping fashion. In practice that means productivity boost because (1) all non-hidden frames are always visible and (2) all resizing and movement is done automatically by window manager whenever a frame becomes visible or hidden. It might take some time to get used to this approach, but in the end it’s love or hate relationship without position in-between.</p>
<p>My story with tiling window managers started in macOS, where window manager can’t be changed, but… you have applications that imitate them either in a non-intrusive manual manner (à la <a href="https://www.spectacleapp.com">Spectacle</a>) or in an automatic manner (à la <a href="https://github.com/ianyh/Amethyst">Amethyst</a> and <a href="https://github.com/koekeishiya/yabai">yabai</a>). So around 4 years ago I started using chunkwm (former yabai) and I’ve been happy user since then.</p>
<p>Since I am too lazy to setup macOS spaces manually, I want yabai to enforce specific configuration on startup - constant amount of spaces (with labels), meaning that missing are created and extra are removed. In addition, I want some applications to start on specific spaces (e.g. I love my browser to always be in the 3rd space) and to start some application silently (without stealing focus).</p>
<p>In this article we are going to learn how to achieve these goals.</p>
<!--more-->

<h1 id="a95f07f6-72ea-4aa6-a106-48bdf1aa85ef" id="prerequisites">Prerequisites</h1>
<p>In order to achieve defined goals, you need to complete the following steps.</p>
<ol type="1">
<li><a href="https://github.com/koekeishiya/yabai/wiki/Disabling-System-Integrity-Protection">Disable System Integrity Protection</a>.</li>
<li><a href="https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)">Install yabai</a> (unfortunately, preferably from <a href="https://brew.sh">brew</a>) and enable scripting additions.</li>
<li>Create <a href="https://github.com/koekeishiya/yabai/wiki/Configuration#configuration-file">configuration file</a>.</li>
<li>Make sure that yabai is running and operational.</li>
<li>Install <a href="https://stedolan.github.io/jq/">jq</a> (JSON processor).</li>
</ol>
<h1 id="e42c4064-21ed-4430-b709-4c608c83d88d" id="setting-up-preferred-spaces">Setting up preferred spaces</h1>
<p>In my setup I have 6 spaces, one is for Emacs, one for terminal emulators, one for web, one for social stuff, one for media stuff and one for various trash. Yabai <a href="https://github.com/koekeishiya/yabai/wiki/Configuration#configuration-file">configuration file</a> must be an executable and in order to make things easy, let it be shell executable.</p>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env sh</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co"># load scripting additions (optional)</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> yabai <span class="at">--load-sa</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> signal <span class="at">--add</span> event=dock_did_restart action=<span class="st">&quot;sudo yabai --load-sa&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co"># config (tweak it to your liking)</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config layout bsp</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config top_padding    8</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config bottom_padding 8</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config left_padding   8</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config right_padding  8</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config window_gap     8</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config auto_balance off</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config split_ratio 0.5</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config window_shadow off</span></code></pre></div>
<p>So let’s define a function called <code class="verbatim">setup_space</code> that takes two arguments - space index and it’s label (unless you are using widgets software like <a href="https://github.com/felixhageloh/uebersicht">Übersicht</a>, labels have little meaning). We are going to use it like this:</p>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 1 emacs</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 2 code</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 3 web</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 4 social</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 5 media</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 6 other</span></code></pre></div>
<p>So what should it do in order to make sure that these 6 spaces exist and properly set?</p>
<p>Yabai comes with <a href="https://github.com/koekeishiya/yabai/wiki/Commands#querying-information">query command</a> that allows to query information about all spaces
or specific spaces. For example, <code class="verbatim">yabai -m query --spaces</code> returns information
about all spaces, and <code class="verbatim">yabai -m query --spaces --space 1</code> returns information
about space with index <code class="verbatim">1</code> if it exists.</p>
<p>There are <a href="https://github.com/koekeishiya/yabai/wiki/Commands#space-commands">space</a> commands allowing to create spaces and label them.</p>
<p>This should be enough for us to define <code class="verbatim">setup_space</code>.</p>
<div class="sourceCode" id="cb3" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span><span class="fu"> setup_space</span> <span class="kw">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="bu">local</span> <span class="va">idx</span><span class="op">=</span><span class="st">&quot;</span><span class="va">$1</span><span class="st">&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="bu">local</span> <span class="va">name</span><span class="op">=</span><span class="st">&quot;</span><span class="va">$2</span><span class="st">&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="bu">local</span> <span class="va">space</span><span class="op">=</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="bu">echo</span> <span class="st">&quot;setup space </span><span class="va">$idx</span><span class="st"> : </span><span class="va">$name</span><span class="st">&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">space</span><span class="op">=</span><span class="va">$(</span><span class="ex">yabai</span> <span class="at">-m</span> query <span class="at">--spaces</span> <span class="at">--space</span> <span class="st">&quot;</span><span class="va">$idx</span><span class="st">&quot;</span><span class="va">)</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="bu">[</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="va">$space</span><span class="st">&quot;</span> <span class="bu">]</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="ex">yabai</span> <span class="at">-m</span> space <span class="at">--create</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">fi</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  <span class="ex">yabai</span> <span class="at">-m</span> space <span class="st">&quot;</span><span class="va">$idx</span><span class="st">&quot;</span> <span class="at">--label</span> <span class="st">&quot;</span><span class="va">$name</span><span class="st">&quot;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 1 emacs</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 2 code</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 3 web</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 4 social</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 5 media</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 6 other</span></code></pre></div>
<p>You can remove all spaces except for 1 via Mission Control and run <code class="verbatim">yabairc</code>:</p>
<div class="sourceCode" id="cb4" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ~/.config/yabai/yabairc</span></code></pre></div>
<p>All extra spaces should be created.</p>
<p>In the internet you may find solution that uses space focus command - <code class="verbatim">yabai -m space --focus "$idx" || yabai -m space --create</code>, but keep in mind that this doesn’t work as intended and leads to creation of extra spaces on each run of <code class="verbatim">yabairc</code>. Aside for producing undesired result, this approach also has two extra drawbacks. Firstly, it’s slower because focus switching is not free. Secondly, focus switching leads to screen flickering. That’s why you should avoid this command in setup script as much as possible.</p>
<h1 id="13de5bb6-3350-4ae4-91a0-93690a11c1cc" id="cleaning-up-extra-spaces">Cleaning up extra spaces</h1>
<p>This is completely optional, but I like to remove extra spaces on startup. First of all, I don’t have key bindings to quickly switch to spaces with index bigger than 6. Secondly, if for some reason I am using macOS full screen application, it places the application too far away.</p>
<p>In order to achieve this goal, we have two approaches.</p>
<ol type="1">
<li>Check if space with index <code class="verbatim">MAX_SPACES + 1</code> (for me it’s <code class="verbatim">7</code>) exists, and if it does - remove it. Repeat the procedure until you run out of spaces with index <code class="verbatim">MAX_SPACES + 1</code>. This works because removing a space in the middle, changes index of all that comes after.</li>
<li>Just query all spaces with index <code class="verbatim">&gt; MAX_SPACES</code> and remove them.</li>
</ol>
<p>Since I want to reduce invocations of <code class="verbatim">yabai</code> client, I am going with the second approach. In order to query spaces with index bigger than <code class="verbatim">MAX_SPACES</code>, we are going to use <code class="verbatim">jq</code> select capabilities. If you want to learn more about that, just take a break and use <code class="verbatim">jq</code> manual.</p>
<div class="sourceCode" id="cb5" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> idx <span class="kw">in</span> <span class="va">$(</span><span class="ex">yabai</span> <span class="at">-m</span> query <span class="at">--spaces</span> <span class="kw">|</span> <span class="ex">jq</span> <span class="st">'.[].index | select(. &gt; 6)'</span> <span class="kw">|</span> <span class="fu">sort</span> <span class="at">-nr</span><span class="va">)</span><span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="ex">yabai</span> <span class="at">-m</span> space <span class="at">--destroy</span> <span class="st">&quot;</span><span class="va">$idx</span><span class="st">&quot;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span></code></pre></div>
<p>Keep an eye for <code class="verbatim">sort -nr</code>. We want to remove spaces in reversed order, otherwise indices are reassigned. Another approach would be to ignore <code class="verbatim">idx</code> and always remove space with index <code class="verbatim">7</code>:</p>
<div class="sourceCode" id="cb6" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> _ <span class="kw">in</span> <span class="va">$(</span><span class="ex">yabai</span> <span class="at">-m</span> query <span class="at">--spaces</span> <span class="kw">|</span> <span class="ex">jq</span> <span class="st">'.[].index | select(. &gt; 6)'</span><span class="va">)</span><span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="ex">yabai</span> <span class="at">-m</span> space <span class="at">--destroy</span> 7</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span></code></pre></div>
<p>In that case you don’t need to rely on <code class="verbatim">sort</code> and <code class="verbatim">jq</code> selector just acts as a way to repeat action <code class="verbatim">SPACES_COUNT - MAX_SPACES</code> times.</p>
<h1 id="c1943fde-9fda-425a-b8d4-950a716338c7" id="moving-applications-on-start">Moving applications on start</h1>
<p>As I said, I love my browser to start on specific space. What makes yabai so wonderful is system of events and rules. You can read more about rules and signals by running <code class="verbatim">man yabai</code> or by checking official wiki on <a href="https://github.com/koekeishiya/yabai/blob/master/doc/yabai.asciidoc#66-rule">rules</a> and <a href="https://github.com/koekeishiya/yabai/blob/master/doc/yabai.asciidoc#67-signal">signals</a>.</p>
<div class="sourceCode" id="cb7" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> rule <span class="at">--add</span> app=<span class="st">&quot;^Safari$&quot;</span> space=^3</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> rule <span class="at">--add</span> app=<span class="st">&quot;^FireFox$&quot;</span> space=^3</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> rule <span class="at">--add</span> app=<span class="st">&quot;^Telegram$&quot;</span> space=4</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> rule <span class="at">--add</span> app=<span class="st">&quot;^Music$&quot;</span> space=5</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> rule <span class="at">--add</span> app=<span class="st">&quot;^Spotify$&quot;</span> space=5</span></code></pre></div>
<p>If you put “^” before space number, the space will be focused after application is started. Personally, I don’t use that as because (a) I often start applications without intention to use them right now and (b) I am forced to reload configuration on Emacs initialisation, so it’s being picked up by yabai.</p>
<p>In general, rules and signal are quite powerful, so I urge you to play around with them. I am yet to discover more possibilities. Would love to hear from you if you have ideas to share.</p>
<h1 id="e8ba4a8e-6cc9-466b-afb9-56809171de7c" id="full-configuration">Full configuration</h1>
<div class="sourceCode" id="cb8" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="co"># load scripting additions</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> yabai <span class="at">--load-sa</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> signal <span class="at">--add</span> event=dock_did_restart action=<span class="st">&quot;sudo yabai --load-sa&quot;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="co"># config</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config layout bsp</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config top_padding    8</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config bottom_padding 8</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config left_padding   8</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config right_padding  8</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config window_gap     8</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config auto_balance off</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config split_ratio 0.5</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> config window_shadow off</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="co">#</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="co"># setup spaces</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a><span class="co">#</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> _ <span class="kw">in</span> <span class="va">$(</span><span class="ex">yabai</span> <span class="at">-m</span> query <span class="at">--spaces</span> <span class="kw">|</span> <span class="ex">jq</span> <span class="st">'.[].index | select(. &gt; 6)'</span><span class="va">)</span><span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>  <span class="ex">yabai</span> <span class="at">-m</span> space <span class="at">--destroy</span> 7</span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span><span class="fu"> setup_space</span> <span class="kw">{</span></span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>  <span class="bu">local</span> <span class="va">idx</span><span class="op">=</span><span class="st">&quot;</span><span class="va">$1</span><span class="st">&quot;</span></span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>  <span class="bu">local</span> <span class="va">name</span><span class="op">=</span><span class="st">&quot;</span><span class="va">$2</span><span class="st">&quot;</span></span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>  <span class="bu">local</span> <span class="va">space</span><span class="op">=</span></span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>  <span class="bu">echo</span> <span class="st">&quot;setup space </span><span class="va">$idx</span><span class="st"> : </span><span class="va">$name</span><span class="st">&quot;</span></span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>  <span class="va">space</span><span class="op">=</span><span class="va">$(</span><span class="ex">yabai</span> <span class="at">-m</span> query <span class="at">--spaces</span> <span class="at">--space</span> <span class="st">&quot;</span><span class="va">$idx</span><span class="st">&quot;</span><span class="va">)</span></span>
<span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="bu">[</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="va">$space</span><span class="st">&quot;</span> <span class="bu">]</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a>    <span class="ex">yabai</span> <span class="at">-m</span> space <span class="at">--create</span></span>
<span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a>  <span class="cf">fi</span></span>
<span id="cb8-35"><a href="#cb8-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-36"><a href="#cb8-36" aria-hidden="true" tabindex="-1"></a>  <span class="ex">yabai</span> <span class="at">-m</span> space <span class="st">&quot;</span><span class="va">$idx</span><span class="st">&quot;</span> <span class="at">--label</span> <span class="st">&quot;</span><span class="va">$name</span><span class="st">&quot;</span></span>
<span id="cb8-37"><a href="#cb8-37" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span>
<span id="cb8-38"><a href="#cb8-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-39"><a href="#cb8-39" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 1 emacs</span>
<span id="cb8-40"><a href="#cb8-40" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 2 code</span>
<span id="cb8-41"><a href="#cb8-41" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 3 web</span>
<span id="cb8-42"><a href="#cb8-42" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 4 social</span>
<span id="cb8-43"><a href="#cb8-43" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 5 media</span>
<span id="cb8-44"><a href="#cb8-44" aria-hidden="true" tabindex="-1"></a><span class="ex">setup_space</span> 6 other</span>
<span id="cb8-45"><a href="#cb8-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-46"><a href="#cb8-46" aria-hidden="true" tabindex="-1"></a><span class="co"># move some apps automatically to specific spaces</span></span>
<span id="cb8-47"><a href="#cb8-47" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> rule <span class="at">--add</span> app=<span class="st">&quot;^Safari$&quot;</span> space=^3</span>
<span id="cb8-48"><a href="#cb8-48" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> rule <span class="at">--add</span> app=<span class="st">&quot;^Firefox$&quot;</span> space=^3</span>
<span id="cb8-49"><a href="#cb8-49" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> rule <span class="at">--add</span> app=<span class="st">&quot;^Telegram$&quot;</span> space=4</span>
<span id="cb8-50"><a href="#cb8-50" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> rule <span class="at">--add</span> app=<span class="st">&quot;^Music$&quot;</span> space=5</span>
<span id="cb8-51"><a href="#cb8-51" aria-hidden="true" tabindex="-1"></a><span class="ex">yabai</span> <span class="at">-m</span> rule <span class="at">--add</span> app=<span class="st">&quot;^Spotify$&quot;</span> space=5</span></code></pre></div>
<p>Thank you for bearing with me till the end! Safe travels!</p>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2022-04-23-yabai-spaces.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>War and World</title>
    <link href="https://d12frosted.io/posts/2022-03-03-war.html" />
    <id>https://d12frosted.io/posts/2022-03-03-war.html</id>
    <published>2022-03-03T00:00:00Z</published>
    <updated>2022-03-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Few words about war in Ukraine">
    <meta property="og:title" content="Boris Buliga - War and World" />
    <meta property="og:description" content="Few words about war in Ukraine" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2022-03-03-war.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - War and World</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>War and World</h1>
  <section class="subtitle">
    Posted on March  3, 2022
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'blog'." href="../tags/blog.html">#blog</a>
  </section>
  
  <section>
    <p>This blog is definitely not a place to talk about politics. But since war affects my life and ability to contribute to open source, to maintain projects and to communicate with people asking for help, I feel obligated to say few things on this matter.</p>
<p>I am going to be even less responsive than usually. So this is the right time to jump in to help with maintenance of the project you would love to stay alive. Just send me an email or open an issue on GitHub and we’ll figure that out.</p>
<p>You can help in various ways. Our army is doing miracles while defending Ukraine, but it needs help in form of medicine and equipment (like walkie-talkie, bullet-proof vests, combat helmets, etc.). The most straight-forward way of help is donating money directly to Ukraine’s Armed Forces (see extra section). If you wish to help civilians in hot areas, there are many volunteers helping them (by evacuation or humanitarian help), just contact me via email and we’ll figure that out.</p>
<p>Thank you all for support. I appreciate your kind words. I appreciate all the support Ukraine receives during this war.</p>
<!--more-->

<h3 id="b995cf7d-9bf6-4961-9fa2-f75968ff5f60" id="donate-to-ukraines-armed-forces">Donate to Ukraine’s Armed Forces</h3>
<p>&gt; The National Bank of Ukraine has decided to open a special fundraising account to support the Armed Forces of Ukraine. The central bank’s decision comes after the Ukrainian government imposed martial law throughout Ukraine in response to armed aggression by Russia and the renewed threat to Ukraine’s independence and territorial integrity. NBU Governor Kyrylo Shevchenko announced the opening of this special account in his 24 February video address. The number of the special account: UA843000010000000047330992708 This account accepts multiple currencies. It has been established and opened to receive transfers from international partners and donors in both foreign currency (U.S. dollars, euros, UK pounds) and hryvnias. Support the Armed Forces of Ukraine!</p>
<ol>
<li><p>Credit Cards from any country</p>
<p>Monobank created a simple way of donating by credit cards. Just visit <a href="https://uahelp.monobank.ua/">special page</a>.</p></li>
<li><p>SEPA for EUR and GBP</p>
<p>Monobank created a simple way of donating by SEPA. Just visit <a href="https://uahelp.monobank.ua/">special page</a>.</p></li>
<li><p>For UAH remittances</p>
<ul>
<li>Bank: National Bank of Ukraine</li>
<li>MFO: 300001</li>
<li>Account No.: UA843000010000000047330992708</li>
<li>EDRPOU Code: 00032106</li>
<li>Payee: National Bank of Ukraine</li>
</ul></li>
<li><p>For USD remittances</p>
<ul>
<li>BENEFICIARY: National Bank of Ukraine</li>
<li>BENEFICIARY BIC: NBUA UA UX</li>
<li>BENEFICIARY ADDRESS: 9 Instytutska St, Kyiv, 01601, Ukraine</li>
<li>ACCOUNT NUMBER: 400807238</li>
<li>BENEFICIARY BANK NAME: JP MORGAN CHASE BANK, New York</li>
<li>BENEFICIARY BANK BIC: CHASUS33</li>
<li>BENEFICIARY BANK ADDRESS: 383 Madison Avenue, New York, NY 10017, USA</li>
<li>PURPOSE OF PAYMENT: for crediting account 47330992708</li>
</ul></li>
<li><p>For EUR remittances</p>
<ul>
<li>BENEFICIARY: National Bank of Ukraine</li>
<li>BENEFICIARY BIC: NBUA UA UX</li>
<li>BENEFICIARY ADDRESS: 9 Instytutska St, Kyiv, 01601, Ukraine</li>
<li>ACCOUNT NUMBER: 5040040066</li>
<li>IBAN: DE05504000005040040066</li>
<li>BENEFICIARY BANK NAME: DEUTSCHE BUNDESBANK, Frankfurt</li>
<li>BENEFICIARY BANK BIC: MARKDEFF</li>
<li>BENEFICIARY BANK ADDRESS: Wilhelm-Epsteinn-Strabe 14, 60431 Frankfurt Am Main, Germany</li>
<li>PURPOSE OF PAYMENT: for crediting account 47330992708</li>
</ul></li>
<li><p>For GBP remittances</p>
<ul>
<li>BENEFICIARY: National Bank of Ukraine</li>
<li>BENEFICIARY BIC: NBUA UA UX</li>
<li>BENEFICIARY ADDRESS: 9 Instytutska St, Kyiv, 01601, Ukraine</li>
<li>ACCOUNT NUMBER: 40000982</li>
<li>IBAN: GB52CHAS60924280033041</li>
<li>Sort code: 60-92-42</li>
<li>BENEFICIARY BANK NAME: JP MORGAN CHASE BANK NA, London</li>
<li>BENEFICIARY BANK BIC: CHASGB2L</li>
<li>BENEFICIARY BANK ADDRESS: 125 London Wall, London EC2Y 5AJ, UK</li>
<li>PURPOSE OF PAYMENT: for crediting account 47330992708</li>
</ul></li>
<li><p>For CHF remittances</p>
<ul>
<li>BENEFICIARY: National Bank of Ukraine</li>
<li>BENEFICIARY BIC: NBUA UA UX</li>
<li>BENEFICIARY ADDRESS: 9 Instytutska St, Kyiv, 01601, Ukraine</li>
<li>ACCOUNT NUMBER: 0700-01227572</li>
<li>IBAN: CH32 0070 0070 0012 2757 2</li>
<li>BENEFICIARY BANK NAME: ZURCHER KANTONALBANK, ZURICH</li>
<li>BENEFICIARY BANK BIC: ZKBKCHZZ80A</li>
<li>BENEFICIARY BANK ADDRESS: Josefstrasse 222, 8005 Zurich, Switzerland</li>
<li>PURPOSE OF PAYMENT: for crediting account 47330992708</li>
</ul></li>
<li><p>For AUD remittances</p>
<ul>
<li>BENEFICIARY: National Bank of Ukraine</li>
<li>BENEFICIARY BIC: NBUA UA UX</li>
<li>BENEFICIARY ADDRESS: 9 Instytutska St, Kyiv, 01601, Ukraine</li>
<li>ACCOUNT NUMBER: 81753-2</li>
<li>BENEFICIARY BANK NAME: RESERVE BANK OF AUSTRALIA, Sydney</li>
<li>BENEFICIARY BANK BIC: RSBKAU2S</li>
<li>BENEFICIARY BANK ADDRESS: GPO Box 3947, Sydney NSW 2000, Australia</li>
<li>PURPOSE OF PAYMENT: for crediting account 47330992708</li>
</ul></li>
<li><p>For CNY remittances</p>
<ul>
<li>BENEFICIARY: National Bank of Ukraine</li>
<li>BENEFICIARY BIC: NBUA UA UX</li>
<li>BENEFICIARY ADDRESS: 9 Instytutska St, Kyiv, 01601, Ukraine</li>
<li>ACCOUNT NUMBER: 447-0-946243-6</li>
<li>BENEFICIARY BANK NAME: STANDARD CHARTERED BANK, Hong Kong</li>
<li>BENEFICIARY BANK BIC: SCBLHKHH</li>
<li>BENEFICIARY BANK ADDRESS: GPO Box 21, Hong Kong</li>
<li>PURPOSE OF PAYMENT: for crediting account 47330992708</li>
</ul></li>
<li><p>For CAD remittances</p>
<ul>
<li>BENEFICIARY: National Bank of Ukraine</li>
<li>BENEFICIARY BIC: NBUA UA UX</li>
<li>BENEFICIARY ADDRESS: 9 Instytutska St, Kyiv, 01601, Ukraine</li>
<li>ACCOUNT NUMBER: 3144-1044-166</li>
<li>BENEFICIARY BANK NAME: BANK OF MONTREAL, Toronto</li>
<li>BENEFICIARY BANK BIC: BOFMCAM2</li>
<li>BENEFICIARY BANK ADDRESS: 100 King Street West, 24th Floor, Toronto, Ontario, M5X 1A1, Canada</li>
<li>PURPOSE OF PAYMENT: for crediting account 47330992708</li>
</ul></li>
<li><p>For JPY remittances</p>
<ul>
<li>BENEFICIARY: National Bank of Ukraine</li>
<li>BENEFICIARY BIC: NBUA UA UX</li>
<li>BENEFICIARY ADDRESS: 9 Instytutska St, Kyiv, 01601, Ukraine</li>
<li>ACCOUNT NUMBER: 653-0430048</li>
<li>BENEFICIARY BANK NAME: MUFG BANK LTD, Tokyo</li>
<li>BENEFICIARY BANK BIC: BOTK JP JT</li>
<li>BENEFICIARY BANK ADDRESS: 1-2-3, Nihombashi HONGOKU-CHO, Chuo-ku, Tokyo 1003 -0021 Japan</li>
<li>PURPOSE OF PAYMENT: for crediting account 47330992708</li>
</ul></li>
</ol>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2022-03-03-war.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Path to org-roam v2</title>
    <link href="https://d12frosted.io/posts/2021-06-11-path-to-org-roam-v2.html" />
    <id>https://d12frosted.io/posts/2021-06-11-path-to-org-roam-v2.html</id>
    <published>2021-06-11T00:00:00Z</published>
    <updated>2021-06-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Migration process to org-roam v2">
    <meta property="og:title" content="Boris Buliga - Path to org-roam v2" />
    <meta property="og:description" content="Migration process to org-roam v2" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2021-06-11-path-to-org-roam-v2.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Path to org-roam v2</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Path to org-roam v2</h1>
  <section class="subtitle">
    Posted on June 11, 2021
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">#org-roam</a>
  </section>
  
  <section>
    <p><img src="../images/2021-06-11-path-to-org-roam-v2/2022-07-19-22-10-52-org-roam-logo.webp" class="img-half img-float-left" /></p>
<p><img src="../images/2021-06-11-path-to-org-roam-v2/2022-07-19-22-11-08-vulpea-logo.webp" class="img-half img-float-right" /></p>
<p>In my opinion, <a href="https://github.com/org-roam/org-roam/">org-roam</a> is among the best things that happened to Emacs during the last 5 years. Forget Zettelkasten method, <code class="verbatim">org-roam</code> is a solution for non-hierarchical note-taking regardless of methodology you are worshiping. The most important and appealing feature of <code class="verbatim">org-roam</code> is its database! Just imagine, in less than a second I can filter a collection of 10000+ notes by tags, title, aliases, links and other things. This is what made my <a href="https://github.com/d12frosted/vino">wine tracking</a> solution usable with ever growing collection of tasting notes, and this is what I used to build various tools for presenting non-trivial views around my notes (<a href="https://github.com/d12frosted/environment/blob/master/emacs/README.org#managing-litnotes">example of a public one</a>).</p>
<p>And now <code class="verbatim">org-roam</code> has <a href="https://github.com/org-roam/org-roam/releases/tag/v2.0.0">released</a> <code class="verbatim">V2</code>, the first major redesign affecting both users and authors of libraries extending <code class="verbatim">org-roam</code>. And while there are breaking changes requiring some effort from users, <code class="verbatim">V2</code> is so amazing and is so much more stable than <code class="verbatim">V1</code>, that my advice is to drop the chains of old <code class="verbatim">org-roam</code> and embrace all the goodness <code class="verbatim">V2</code> brings.</p>
<p>Unfortunately, major redesign means lots of breaking changes and in this post I am going to describe my migration experience, code I used to migrate my notes and share some thoughts after migrating a code base comparable to <code class="verbatim">org-roam</code> itself. Of course, it touches my precious <a href="https://github.com/d12frosted/vulpea">vulpea</a> library (the fox image is its icon), so expect some advertisement™.</p>
<p>NB. Migration process means adapting to and overcoming breaking changes. Since <code class="verbatim">V2</code> is full of them, this article might look pessimistic or depressing. But don’t get fooled, I think that <code class="verbatim">V2</code> is amazing. I am very happy to use it on a daily basis for several months and I never looked back. <a href="https://github.com/jethrokuan">Jethro</a> is doing amazing work! As well as all <a href="https://github.com/org-roam/org-roam/graphs/contributors">contributors</a> (with extra kudos to <a href="https://github.com/nobiot">Noboru Ota</a>, because Noboru rocks).</p>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-07-24 Sat]</code> Update post to reflect <a href="https://github.com/org-roam/org-roam/releases/tag/v2.0.0">release of org-roam v2</a>.</li>
</ul>
<!--more-->

<h1 id="bba593d3-1857-4bf9-b441-d1c54617716b" id="key-changes">Key changes</h1>
<p><code class="verbatim">org-roam</code> <code class="verbatim">V2</code> has <a href="https://github.com/org-roam/org-roam/pull/1401">many changes</a>, and some of them are UX-related (e.g. new completing read, revamped roam buffer), while others are fundamental in a way that they affect interactive and programmatic usage. So I am going to focus on these changes. I might miss some very important things that I have never used, and if so, just let me know and I will update the list.</p>
<h2 id="5f16e998-9293-419d-9e70-3dfd0f59351f" id="structured-note">Structured note</h2>
<p>One of the first thing that I’ve been playing around in <code class="verbatim">vulpea</code> is definition of a note. Initially it was a <a href="https://github.com/d12frosted/vulpea/commit/8820c9af2c71c1e995856432c5106aac2774d162">property list</a>, but I quickly started to hate this approach (even thought it was well defined) and switched to <a href="https://github.com/d12frosted/vulpea/commit/e38a1353c068bf28203ca3ebe93e5a3d6cfd7262">struct</a>. Why? Because a formal definition of data types makes it easier to build on top of that. You have completion for fields, you have byte compiler to warn you on missing field, etc. So even if as an author of library you are totally fine with not having a formal definition of your data types, they are a game-changer for people using it.</p>
<p>This is why I am so happy that <code class="verbatim">org-roam</code> finally formalised <code class="verbatim">org-roam-node</code>. And one of the best parts about this change - there is no distinction between file-level notes and headings anymore. This is what I’ve done in <code class="verbatim">vulpea</code> and now with <code class="verbatim">V2</code> I can remove all those <code>(if (= level 0) (treat-as-file) (treat-as-heading))</code> indirections.</p>
<p>The only thing that you should keep in mind, having <code class="verbatim">org-roam-node</code> doesn’t mean that all fields are populated, you might need to call <code class="verbatim">org-roam-populate</code>. As far as I can tell, the reason is that all data is scattered across multiple tables and gathering everything is an expensive operation. This is the main difference between <code class="verbatim">org-roam-node</code> and <code class="verbatim">vulpea-note</code>, which is always populated when returned from <code class="verbatim">vulpea</code> functions (achieved by horrific <a href="https://github.com/d12frosted/vulpea/blob/c606b33e25c0240ca68350163a0327a0bf08d20d/vulpea-db.el#L85">SQL expression</a>). On the other hand, <code class="verbatim">vulpea-note</code> contains less information than <code class="verbatim">org-roam-node</code>.</p>
<h2 id="cd223986-b0f4-4ddd-9f15-27e562a25bfd" id="mandatory-id">Mandatory ID</h2>
<p>Following note type formalisation, <code class="verbatim">ID</code> property became mandatory for a node to be part of <code class="verbatim">org-roam</code> database. Meaning that if your heading doesn’t have an <code class="verbatim">ID</code>, it will not be picked up by <code class="verbatim">org-roam</code>.</p>
<p>And I am happy about this requirement, because ids are the only way to identify a note (I know, tautology). And <code class="verbatim">vulpea</code> <a href="https://github.com/d12frosted/vulpea/commit/8820c9af2c71c1e995856432c5106aac2774d162#diff-ecbc1aa90e9ff97a00b0b2aab1551bceee0c4d21993146bdcb1af4de31c9cac6R26">required</a> them from the day 1. In my sense, missing <code class="verbatim">ID</code> means that the note doesn’t exists yet (or at least, the system doesn’t know about it yet).</p>
<p>This is important, because again, it reduces any indirection in libraries code related to note/node identification. Just <code class="verbatim">ID</code> and that’s it.</p>
<p>Another reason to have mandatory ids is linking.</p>
<h2 id="d753793a-dc4b-444f-94ba-f3af996b61a9" id="id-links">ID Links</h2>
<p>Initially <code class="verbatim">org-roam</code> used file links. This means that whenever you linked a note, it used absolute (or relative???<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>) file path to said note. But these paths are very sensitive to file system changes, which should be irrelevant in non-hierarchical note-taking tool. Right? You change file name, now all links must change. Have fun if for some reason it was not changed automatically. You moved directory, now all links must be updated. You synchronise <code class="verbatim">org-roam-directory</code> across multiple computers, with different path to said directory (e.g. <code class="verbatim">/home/boris/org</code> vs <code class="verbatim">/Users/boris/notes/org</code>), now there are no links between your notes! Task failed successfully, as they say! It’s easy to become paranoid with such approach, because you can not trust a system that misses links.</p>
<p>Now, ids don’t change (quite a philosophical question about identity, but let’s skip this one for another day). And Org mode supports <code class="verbatim">ID</code> links. Perfect! With <code class="verbatim">V2</code> all links are id based and less maintenance is required when you move something around. Great, users of <code class="verbatim">org-roam</code> and its maintainers are both winners.</p>
<p>Not sure if this brings much to authors of libraries, but in general it’s a very good change that allows to remove most of safeguards related to links. If you still believe that path links are somehow superior, please let me know why! I might be missing something here.</p>
<h2 id="45efc17a-ba6d-4b14-9b32-4e86b91745cc" id="tags">Tags</h2>
<p>IMHO, one of the biggest breaking change is how things are being tagged now. In <code class="verbatim">V2</code> there is no separate tagging system. In <code class="verbatim">V1</code> there are several <a href="https://github.com/org-roam/org-roam/blob/8ad141403065bebd5a72f0ef53cf5ef8f2034419/org-roam.el#L195">sources</a> of <code class="verbatim">org-roam</code> tags - path elements (e.g. sub-directories relative to <code class="verbatim">org-roam-directory</code>), properties and Org mode tags. With <code class="verbatim">V2</code> there are only Org mode tags.</p>
<p>This is quite a complex topic, because with this kind of freedom, it’s easy to exploit and over-complicate usage of tags in <code class="verbatim">org-roam</code>. The key thing to remember - while Org mode tags are great when doing agenda searches, agenda does not work with files, but with headings only. And if you were using roam tags for categorisation (so you could filter out stuff from db based on these tags), now you have to deal with <a href="https://orgmode.org/manual/Tag-Inheritance.html#Tag-Inheritance">Tag Inheritance</a>, which is not a big deal in some cases, but still.</p>
<p>Another thing to keep in mind, valid tag for <code class="verbatim">#+roam_tags</code> is not necessary a valid tag for <code class="verbatim">#+file_tags</code>. For example, spaces, colons are not allowed - tags are normal words containing letters, numbers, ‘_’, and ‘@’ (see <code class="verbatim">org-tag-re</code>). So you need to keep that in mind during migration (covered in attached script).</p>
<p>Since I was abusing tagging system, I had to go over every such case and find another way to achieve my goal. Just as example, I was tagging all my <code class="verbatim">litnotes</code> with two types of tags: content type (e.g. <code class="verbatim">content:book</code>, <code class="verbatim">content:article</code>, etc.) and status (e.g. <code class="verbatim">status:new</code>, <code class="verbatim">status:ongoing</code>, <code class="verbatim">status:done</code>, <code class="verbatim">status:dropped</code>). I didn’t want to use <code class="verbatim">fieltags</code> for this purpose, because I would need to disable inheritance for all possible values. So my <a href="https://github.com/d12frosted/environment/blob/master/emacs/README.org#managing-litnotes">solution</a> is to move this kind of metadata to … <a href="https://github.com/d12frosted/vulpea/tree/c606b33e25c0240ca68350163a0327a0bf08d20d#vulpea-meta">metadata list</a>.</p>
<h2 id="b1502ddb-44a6-4301-bf56-1b07f26d7955" id="capture">Capture</h2>
<p>When you only migrate to <code class="verbatim">org-roam</code> or when you automate stuff, having an ability to programmatically create new note synchronously and get it as result is priceless. While it was possible with <code class="verbatim">V1</code>, it required <a href="https://github.com/d12frosted/vulpea/blob/0f73528e603b1901cbe36eccd536a9113ef0439d/vulpea.el#L167">a certain hack</a>. With <code class="verbatim">V2</code> it is no longer needed, because you can <a href="https://github.com/org-roam/org-roam/pull/1523">provide</a> <code class="verbatim">id</code> of a note during capture process and then simply query it (just don’t forget to <a href="https://github.com/d12frosted/vulpea/blob/c606b33e25c0240ca68350163a0327a0bf08d20d/vulpea.el#L350">pass</a> <code class="verbatim">immediate-fnish</code> property).</p>
<p>And the most cool thing about new capture process is that <code class="verbatim">org-roam-capture-templates</code> became even closer to Org mode capture template, meaning that you can configure capture stuff in so many fancy ways… I am yet to discover this new wonderful world.</p>
<h1 id="fd9daff2-fd49-4429-8489-829e8102fd3c" id="notes-migration">Notes migration</h1>
<p>Migration to <code class="verbatim">V2</code> requires changes to your notes:</p>
<ol type="1">
<li>make sure that each file contains an id;</li>
<li>move <code class="verbatim">roam_key</code> to <code class="verbatim">roam_ref</code> property;</li>
<li>move <code class="verbatim">roam_alias</code> to <code class="verbatim">roam_aliases</code> property;</li>
<li>move <code class="verbatim">roam_tags</code> to <code class="verbatim">filetags</code> and
<ol type="1">
<li>make sure they do not contain ‘:’ or spaces;</li>
<li>extract path tags;</li>
</ol></li>
</ol>
<p>It can be achieved by using helpers from <a href="https://github.com/d12frosted/vulpea/">vulpea</a> and the following script (you must be on <code class="verbatim">org-roam-v2</code>):</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-migrate-buffer </span>()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Migrate current buffer note to `org-roam' v2.&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; Create file level ID if it doesn't exist yet</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (org-with-point-at <span class="dv">1</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    (org-id-get-create))</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; update title (just to make sure it's lowercase)</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  (vulpea-buffer-title-set (vulpea-buffer-prop-get <span class="st">&quot;title&quot;</span>))</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; move roam_key into properties drawer roam_ref</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  (when-let* ((ref (vulpea-buffer-prop-get <span class="st">&quot;roam_key&quot;</span>)))</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    (org-set-property <span class="st">&quot;ROAM_REFS&quot;</span> ref)</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let</span> ((case-fold-search <span class="kw">t</span>))</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>      (org-with-point-at <span class="dv">1</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        (while (re-search-forward <span class="st">&quot;^</span><span class="ch">#\\</span><span class="st">+roam_key:&quot;</span> (point-max) <span class="kw">t</span>)</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>          (beginning-of-line)</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>          (kill-line <span class="dv">1</span>)))))</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; move roam_alias into properties drawer roam_aliases</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>  (when-let* ((aliases (vulpea-buffer-prop-get-list <span class="st">&quot;roam_alias&quot;</span>)))</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    (org-set-property <span class="st">&quot;ROAM_ALIASES&quot;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>                      (combine-and-quote-strings aliases))</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let</span> ((case-fold-search <span class="kw">t</span>))</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>      (org-with-point-at <span class="dv">1</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>        (while (re-search-forward <span class="st">&quot;^</span><span class="ch">#\\</span><span class="st">+roam_alias:&quot;</span> (point-max) <span class="kw">t</span>)</span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>          (beginning-of-line)</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>          (kill-line <span class="dv">1</span>)))))</span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; move roam_tags into filetags</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((roam-tags (vulpea-buffer-prop-get-list <span class="st">&quot;roam_tags&quot;</span>))</span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>         (file-tags (vulpea-buffer-prop-get-list <span class="st">&quot;filetags&quot;</span>))</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>         (path-tags (seq-filter</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>                     (<span class="kw">lambda</span> (x) (<span class="kw">not</span> (string-empty-p x)))</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>                     (split-string</span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>                      (string-remove-prefix</span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>                       org-roam-directory</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>                       (file-name-directory (buffer-file-name)))</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>                      <span class="st">&quot;/&quot;</span>)))</span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>         (tags (seq-map</span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>                (<span class="kw">lambda</span> (tag)</span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>                  (<span class="kw">setq</span> tag (replace-regexp-in-string</span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>                             <span class="co">;; see `org-tag-re'</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>                             <span class="st">&quot;[^[:alnum:]_@#%]&quot;</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>                             <span class="st">&quot;_&quot;</span>        <span class="co">; use any valid char - _@#%</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>                             tag))</span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>                  (<span class="kw">if</span> (<span class="kw">or</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>                       (string-prefix-p <span class="st">&quot;status&quot;</span> tag 'ignore-case)</span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>                       (string-prefix-p <span class="st">&quot;content&quot;</span> tag 'ignore-case)</span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>                       (<span class="kw">string-equal</span> <span class="st">&quot;Project&quot;</span> tag))</span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>                      (<span class="kw">setq</span> tag (downcase tag)))</span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>                  tag)</span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>                (seq-uniq (<span class="kw">append</span> roam-tags file-tags path-tags)))))</span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> tags</span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">apply</span> #'vulpea-buffer-tags-set tags)</span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">let</span> ((case-fold-search <span class="kw">t</span>))</span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>        (org-with-point-at <span class="dv">1</span></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>          (while (re-search-forward <span class="st">&quot;^</span><span class="ch">#\\</span><span class="st">+roam_tags:&quot;</span> (point-max) <span class="kw">t</span>)</span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>            (beginning-of-line)</span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>            (kill-line <span class="dv">1</span>))))))</span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>  (save-buffer))</span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-migrate-db </span>()</span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Migrate all notes.&quot;</span></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">dolist</span> (f (org-roam--list-all-files))</span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>    (with-current-buffer (find-file f)</span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>      (message <span class="st">&quot;migrating %s&quot;</span> f)</span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>      (vulpea-migrate-buffer)))</span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; Step 2: Build cache</span></span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>  (org-roam-db-sync 'force))</span></code></pre></div>
<p>Simply run <code class="verbatim">M-x vulpea-migrate-db</code> and wait until the dirty work is done. Let me know if it doesn’t work for you. More discussion around migration can be found on <a href="https://www.orgroam.com/manual.html#Migrating-from-Org_002droam-v1">official guide</a>, <a href="https://org-roam.discourse.group/t/the-org-roam-v2-great-migration/1505">discourse</a>, <a href="https://gist.github.com/jethrokuan/02f41028fb4a6f81787dc420fb99b6e4">GitHub Gist</a> and <a href="https://github.com/org-roam/org-roam/wiki/Hitchhiker's-Rough-Guide-to-Org-roam-V2">GitHub Wiki</a>.</p>
<h1 id="4e951d4a-56f7-405e-b8aa-497cec48aceb" id="code-migration">Code migration</h1>
<p>And this is the trickiest part, because <code class="verbatim">V2</code> is taking revolutionary approach instead of evolutionary approach, you just have to deal with huge amount of breaking changes. Migrating my notes took around an hour and a half (including patching migration script, iteratively fixing things, pouring more wine, and fighting with issues caused by misusing <code class="verbatim">git-gutter</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>). Migration of <a href="https://github.com/d12frosted/vulpea">vulpea</a>, <a href="https://github.com/d12frosted/vino">vino</a> and <a href="https://github.com/d12frosted/environment">personal configs</a> took more than a week of work. And it was not that bad thanks to (1) having <code class="verbatim">vulpea</code> and <code class="verbatim">vino</code> covered with tests (so I simply was fixing them), (2) using byte compiler which caught many changes and (3) having most of my code based on <code class="verbatim">vulpea</code>, so lots of stuff got fixed transitively<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>.</p>
<p>Now, the real question is what are the major changes code-wise? Different database scheme, formalized <code class="verbatim">org-roam-node</code> data type, new capture flow, new utilities (some are gone, but there are many good new ones).</p>
<p>Since <code class="verbatim">V1</code> lacked good abstraction over database, it was very common to… well you know, use <code class="verbatim">org-roam-db-query</code> directly to execute arbitrary SQL queries<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>, which of course relies on <em>knowing</em> the scheme. But this coupling bites really hard with <code class="verbatim">V2</code>, because the scheme changed dramatically. So you just have to sit down and work with <strong>every</strong> query you perform. Some changes are trivial, some are not. Unfortunately, there is no pill here. My advice is to minimise amount of direct queries by using functions provided by <code class="verbatim">org-roam</code> or extracting them into your own helpers.</p>
<p>With <code class="verbatim">org-roam-node</code> and some other data types everything becomes really nice. There is no need for indirection for file-level or heading-level nodes anymore. You know exactly, what fields you have. The only thing you need to keep in mind - not all fields are populated, so there is <code class="verbatim">org-roam-populate</code> that works with various types.</p>
<p>You can check my PRs related to migration to <code class="verbatim">V2</code> for inspiration (unfortunately most of them already have new unrelated features):</p>
<ul>
<li><a href="https://github.com/d12frosted/vulpea/pull/92">vulpea#92</a></li>
<li><a href="https://github.com/d12frosted/vino/pull/100">vino#100</a></li>
<li><a href="https://github.com/d12frosted/environment/commit/87d23cd71800b8976d1c40927b6a345b8eac40ac">environment#87d23cd</a>, with follow-ups:
<ul>
<li><a href="https://github.com/d12frosted/environment/commit/57e6fe4417ff367754d3df31eb144efa76ea1073">environment#57e6fe4</a></li>
<li><a href="https://github.com/d12frosted/environment/commit/1febc7a5b015d98602cd48cb0143b4424a5e8c03">environment#1febc7a</a></li>
<li>… and many more</li>
</ul></li>
</ul>
<p>And before you jump into changing your code base, I suggest to go over <a href="https://github.com/org-roam/org-roam/blob/ed16ca75d7556b4d831326804543591836b466d5/doc/org-roam.org#developers-guide-to-org-roam">Developer’s Guide to Org-roam</a>.</p>
<h1 id="c1890fd4-ee42-4bc8-9c34-99a62ec04cdd" id="what-about-vulpea">What about vulpea?</h1>
<p>Some of the core ideas of <code class="verbatim">vulpea</code> got implemented in <code class="verbatim">org-roam</code> now (definitely not claiming that I have played any role in this, I am sure Jethro had this in mind for a long time). And I asked myself - is there still a need for <code class="verbatim">vulpea</code>? Like, there is <code class="verbatim">org-roam-node</code>, why do I need <code class="verbatim">vulpea-note</code>? There is new and wonderful capture process, why do I need <code class="verbatim">vulpea-create</code>? Many questions like this. But fundamentally I think there are only two questions. Is <code class="verbatim">vulpea</code> still useful for <strong>me</strong>? And is <code class="verbatim">vulpea</code> still useful for <strong>others</strong>?</p>
<p>For me - definitely yes. Because it gives me abstractions and utilities to build other stuff on top. Migration process illustrated that I can do all the heavy lifting in <code class="verbatim">vulpea</code> and get most of the stuff fixed in many other places. Tests<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> made this migration really smooth (of course I have not covered every single shit).</p>
<p>For others - it’s for you to decide, and I believe that yes :) Forget abstractions, <code class="verbatim">vulpea</code> provides various utilities for working with Org Mode and Org Roam files that you might want to use (for dealing with buffer properties, e.g. <code class="verbatim">#+key: value</code>, and for dealing with description lists). It also provides a custom configurable interface for selecting notes - <code class="verbatim">vulpea-select</code> with interactive functions using it (<code class="verbatim">vulpea-find</code>, <code class="verbatim">vulpea-find-backlink</code> and <code class="verbatim">vulpea-insert</code>). I will cover them in a separate article. And of course, my favourite functions - <code class="verbatim">vulpea-db-query</code> and <code class="verbatim">vulpea-create</code>.</p>
<p>So I am going to continue support and development of <code class="verbatim">vulpea</code> library. And if you encounter any issues (with code, documentation etc.) or have a feature request - just don’t hesitate to <a href="https://github.com/d12frosted/vulpea/issues">open an issue</a>, <a href="https://github.com/d12frosted/vulpea/discussions">start a discussion</a>, comment on this post, or write me an email.</p>
<h1 id="4f49a371-12b4-4974-ae05-0ad4729d19e3" id="any-lessons-learned">Any lessons learned?</h1>
<p>The most important lesson for me is that <code class="verbatim">vulpea</code> has huge ROI. Primary goal of <code class="verbatim">vulpea</code><a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> is to be a <em>tested</em> library for building solutions for note taking. And this migration process simply proved that the goal worth the effort.</p>
<p>Another lesson I am taking from this situation is that revolutionary approach is stressful and time consuming for users (not sure about Jethro, I hope he is all right). Even though in this case it totally worth all the nerves and doubts. It is stable, polished and better. It also implies another lesson - sequel might be even better than original :)</p>
<p>I am also annoyed by the fact that I keep abusing tagging system whenever I encounter it. Whenever it becomes multidimensional, it is a sign to stop and take a step back. Tags should not turn into total mess<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>.</p>
<p>And of course, <code class="verbatim">org-roam</code> community is fantastic. I don’t read all the messages on <a href="https://org-roam.discourse.group/">org-roam.discourse.group</a>, but when I do, I am simply amazed by all the use cases you folks have, and how helpful you are! Seriously, this is amazing. And it also a credit to <a href="https://github.com/jethrokuan/">Jethro</a>. Without doubt, <code class="verbatim">org-roam</code> is the best thing happened in my note-taking life.</p>
<h1 id="ec04d254-cebc-49b7-aa01-75ddf86d1748" id="resources">Resources</h1>
<ul>
<li><a href="https://github.com/org-roam/org-roam/pull/1401">org-roam#1401</a></li>
<li><a href="https://org-roam.discourse.group/t/org-roam-major-redesign/1198">Org-roam major redesign</a></li>
<li><a href="https://github.com/org-roam/org-roam/blob/ed16ca75d7556b4d831326804543591836b466d5/doc/org-roam.org#developers-guide-to-org-roam">Developer’s Guide to Org-roam</a></li>
<li><a href="https://github.com/org-roam/org-roam/wiki/Hitchhiker's-Rough-Guide-to-Org-roam-V2">Hitchhiker’s Rough Guide to Org roam V2</a></li>
<li><a href="https://org-roam.discourse.group/t/the-org-roam-v2-great-migration/1505">The Org-roam v2 Great Migration</a></li>
</ul>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>I don’t even remember, because I quickly switched to ID links once they landed to <code class="verbatim">org-roam</code>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Silly, but I’ve ‘adopted’ an approach by Doom Emacs where gutter is updated asynchronously. And during migration I was opening and modifying too many org files (hey, more than 10000) which exhausted Emacs. I’ve spend too much time trying to figure out why it was happening.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>And whatever was using <code class="verbatim">org-roam</code> internals was migrated to <code class="verbatim">vulpea</code>.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>Again, tautology! I love them.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Just for the reference, I am not a TDD advocate. I usually write tests <em>after</em> features and mostly <em>before</em> bug fixes.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>To be precise, <code class="verbatim">vulpea</code> (and sometimes <code class="verbatim">KitsuneBook</code>) is just a name I am using for note taking utilities. At some point of time it was a Haskell command line application… Now it’s an Emacs Lisp library leveraging Org Mode and Org Roam! It definitely has more active life than me.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>Maybe a partial mess, but definitely not total.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-06-11-path-to-org-roam-v2.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 7: Capture</title>
    <link href="https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html" />
    <id>https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html</id>
    <published>2021-05-21T00:00:00Z</published>
    <updated>2021-05-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="How to setup capture flow with org-roam">
    <meta property="og:title" content="Boris Buliga - Task management with org-roam Vol. 7: Capture" />
    <meta property="og:description" content="How to setup capture flow with org-roam" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2021-05-21-task-management-with-roam-vol7.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Task management with org-roam Vol. 7: Capture</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Task management with org-roam Vol. 7: Capture</h1>
  <section class="subtitle">
    Posted on May 21, 2021
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">#org-roam</a>
  </section>
  
  <section>
    <p>Capturing is one of the most important activities in the task management process. Previously we talked about storing and querying tasks and now it’s time to cover capturing of tasks, meeting notes and inbox.</p>
<p>Please note that the goal is not to discuss GTD or any other methodology, but rather to discover how org-roam combined with everything we talked previously may help you to improve your capturing process regardless of methodology you are using.</p>
<!--more-->

<p>Org Mode <a href="https://orgmode.org/manual/Capture.html#Capture">Capture</a> lets you quickly store notes with zero interruption of your work flow. And capture is ridiculously powerful in Org Mode, as you can build so many things on top of it. For example, you can setup a full-blown journal with simple template, automatically put TODO entries when capturing a link to GitHub or Jira issue, etc.</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; you don't really need much, do you?</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-capture-templates</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>      '((<span class="st">&quot;j&quot;</span> <span class="st">&quot;Journal entry&quot;</span> plain</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>         (file+olp+datetree <span class="st">&quot;~/path/to/journal.org&quot;</span>)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>         <span class="st">&quot;%K - %a</span><span class="sc">\n</span><span class="st">%i</span><span class="sc">\n</span><span class="st">%?</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>         :unnarrowed <span class="kw">t</span>)))</span></code></pre></div>
<p>Over the years of using Org Mode for task management I’ve got a habit of clearing my head of any actionable items and thoughts that I can’t allow myself to spend time and cognitive resources now thus highly reducing my stress level. For some people it allows to maintain focus, and since my work is mostly about constant context switching, it also allows me to stay sane.</p>
<p>For this to work, any task management system must have the following properties.</p>
<ul>
<li>Capturing must be as fast as possible, which also implies ease of capturing.</li>
<li>There must be a way to easily review all captured items and process them when you have time.</li>
</ul>
<p>The speed and convenience of capture process is plain simple to understand. If it takes more than few seconds, it disturbs you from the current task at hand more and more, meaning that you will stop capturing at some point of time. If you need to go to the 6th floor and unlock your precious planner from the safe in order to capture something, it means that you will stop capturing.</p>
<p>In general, this means that it’s totally fine to use phone (even non-org based solution) or piece of paper to write something down. You’ll just have few sources to process captured items from when you have time.</p>
<p>Due to the nature of capture process, where you do it as fast as possible, these captured items might be… lacking better description, located in wrong place, irrelevant or beginning of something bigger. This is why it’s important to process all captured items and process them when you have time for that.</p>
<h1 id="728ecca2-dcf2-41d4-84da-5ba35d537c26" id="inbox">Inbox</h1>
<p>When it comes to Org Mode, I prefer to have a dedicated inbox file per machine, so I can avoid sync issues as I might capture without internet connection. So I define my inbox file:</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defvar</span><span class="fu"> vulpea-capture-inbox-file</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">format</span> <span class="st">&quot;inbox-%s.org&quot;</span> (system-name))</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;The path to the inbox file.</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="st">It is relative to `org-directory', unless it is absolute.&quot;</span>)</span></code></pre></div>
<p>Every inbox file has a title to distinguish between multiple inbox files and <code class="verbatim">filetags</code> that is <a href="https://orgmode.org/manual/Tag-Inheritance.html#Tag-Inheritance">inherited</a> by all TODO entries in this file, so that I can quickly pull whatever I need to process. In my case I am using <code class="verbatim">REFILE</code> tag.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode org"><code class="sourceCode orgmode"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>:PROPERTIES:</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>:ID:                     d272271d-7585-4913-9445-d7d97b59295d</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>:END:</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>#+title: Inbox (personal)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>#+filetags: REFILE</span></code></pre></div>
<h1 id="41b59f6d-1ea0-4d99-8485-9d2cb06384bf" id="capturing-into-inbox">Capturing into inbox</h1>
<video autoplay loop><source src="../images/2021-05-21-task-management-with-roam-vol7/2022-07-19-22-04-03-org-roam-task-management-vol7-1.mp4" type="video/mp4"></video>
<p>In order for items to end up in the inbox file, I am using a simple capture template for TODO entries. And since I want to avoid picking template when I have more than one, I have a wrapper <code class="verbatim">vulpea-capture-task</code> function that picks up specific template. There are other ways to achieve that, if you are interested let me know.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-capture-templates</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>      '((<span class="st">&quot;t&quot;</span> <span class="st">&quot;todo&quot;</span> plain (file vulpea-capture-inbox-file)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>         <span class="st">&quot;* TODO %?</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">&quot;</span> :clock-in <span class="kw">t</span> :clock-resume <span class="kw">t</span>)))</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-capture-task </span>()</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Capture a task.&quot;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  (org-capture <span class="kw">nil</span> <span class="st">&quot;t&quot;</span>))</span></code></pre></div>
<h1 id="4c8e2021-7879-4759-a9e7-987a48b5d228" id="processing-inbox">Processing inbox</h1>
<p><img src="../images/2021-05-21-task-management-with-roam-vol7/2022-07-19-22-04-15-org-roam-task-management-vol7-2.webp" /></p>
<p>In order to process all inbox files managed by Org Mode we have wonderful <code class="verbatim">org-agenda</code>. My default agenda consists of various blocks, but the very first one lists all entries with <code class="verbatim">REFILE</code> tag (thanks to <code class="verbatim">filetags</code> all entries in inbox files are tagged accordingly).</p>
<div class="sourceCode" id="cb5" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-agenda-custom-commands</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>      '((<span class="st">&quot; &quot;</span> <span class="st">&quot;Agenda&quot;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>         ((tags</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>           <span class="st">&quot;REFILE&quot;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>           ((org-agenda-overriding-header <span class="st">&quot;To refile&quot;</span>)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>            (org-tags-match-list-sublevels <span class="kw">nil</span>)))))))</span></code></pre></div>
<p>Now I can perform my routine on inbox entries by removing irrelevant entries, performing actions that can be performed now, moving tasks to relevant projects, processing meeting notes by producing more notes or tasks. Well, routine.</p>
<p>Agenda builds fast thanks to trick described in <a href="../posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a>.</p>
<h1 id="e8460c6c-c9c1-4fa6-858a-dab6ba7fecc7" id="dynamically-selecting-capture-location">Dynamically selecting capture location</h1>
<p>At this point you might be wondering how it’s related to Org Roam. After all, up to this moment we didn’t use any Org Roam features. And what is the core feature of Org Roam? IMO, it’s fast query capabilities - this is something we’ve been using in almost every post of series.</p>
<p>It’s hard to come up with generic example, and I hate examples from the void of someones imagination, so let me describe where exactly in the capturing process I use it (apart from <a href="../posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a>). Hopefully, it’s easy to adapt this idea for other use cases, and if you experience any troubles, don’t hesitate to contact me.</p>
<p>Meeting notes. Whenever I am on a meeting, I love to keep meeting notes (thanks to Org Mode my memory is ephemeral). I divide all meetings in two categories - one-on-ones (e.g. <span class="math inline"><em>p</em> = 2</span>) and meetings with multiple participants (e.g. <span class="math inline"><em>p</em> &gt; 2</span>). And in the end, all meetings from one-on-ones are moved under <code class="verbatim">Meetings</code> outline in the file related to person I have a meeting with. And since it is so common I decided to save myself from unnecessary refile action by adapting my capture flow.</p>
<video autoplay loop><source src="../images/2021-05-21-task-management-with-roam-vol7/2022-07-19-22-04-33-org-roam-task-management-vol7-3.mp4" type="video/mp4"></video>
<p>So when a have a meeting, I simply hit <code class="verbatim">M-m c m</code> (short for ‘capture meeting’ which calls <code class="verbatim">vulpea-capture-meeting</code>), select a person or type any other phrase (e.g. project name) and let the capture process to place my notes in the right location. If I select a person, meeting notes are going to be located under <code class="verbatim">Meetings</code> heading in the file dedicated to the selected person. If I type something else, my notes go straight the inbox.</p>
<p>Person selection is possible by using <code class="verbatim">vulpea-select</code> from <a href="https://github.com/d12frosted/vulpea">vulpea</a> library (the same as we did in <a href="../posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a>). In order for my meetings notes related to specific person to fall into my inbox, I tag them with <code class="verbatim">REFILE</code> tag directly (unlike notes in inbox file, which get tag via inheritance).</p>
<p>The code is pretty straightforward and available on <a href="https://github.com/d12frosted/environment/blob/ec30dc1218c86578b4f655c717147cd70012a12e/emacs/lisp/lib-vulpea-capture.el">GitHub</a>. First we setup a new template, which is responsible for capturing meeting notes. The cool part about capture process in Org Mode is that you can use functions to determine capture location and capture body, so this is what we are using here - <code class="verbatim">vulpea-capture-meeting-target</code> and <code class="verbatim">vulpea-capture-meeting-template</code>.</p>
<div class="sourceCode" id="cb6" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-capture-templates</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>      '((<span class="st">&quot;t&quot;</span> <span class="st">&quot;todo&quot;</span> plain (file vulpea-capture-inbox-file)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>         <span class="st">&quot;* TODO %?</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">&quot;</span> :clock-in <span class="kw">t</span> :clock-resume <span class="kw">t</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        (<span class="st">&quot;m&quot;</span> <span class="st">&quot;Meeting&quot;</span> entry</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>         (<span class="kw">function</span> vulpea-capture-meeting-target)</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>         (<span class="kw">function</span> vulpea-capture-meeting-template)</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>         :clock-in <span class="kw">t</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>         :clock-resume <span class="kw">t</span>)))</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-capture-meeting </span>()</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Capture a meeting.&quot;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  (org-capture <span class="kw">nil</span> <span class="st">&quot;m&quot;</span>))</span></code></pre></div>
<p>The funny thing is that these functions are called in the following order:</p>
<ul>
<li><code class="verbatim">vulpea-capture-meeting-template</code></li>
<li><code class="verbatim">vulpea-capture-meeting-target</code></li>
</ul>
<p>Meaning that we need to present a list of people in the <code class="verbatim">template</code> phase and then access it somehow in <code class="verbatim">target</code> phase. Fortunately, there is an API in capture process allowing to store extra information for the duration of capture process - <code class="verbatim">org-capture-put</code> and <code class="verbatim">org-capture-get</code>.</p>
<div class="sourceCode" id="cb7" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-capture-meeting-template </span>()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return a template for a meeting capture.&quot;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((person (vulpea-select</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>                 <span class="st">&quot;Person&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>                 :filter-fn</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>                 (<span class="kw">lambda</span> (note)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>                   (<span class="kw">let</span> ((tags (vulpea-note-tags note)))</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>                     (seq-contains-p tags <span class="st">&quot;people&quot;</span>))))))</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    (org-capture-put :meeting-person person)</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">if</span> (vulpea-note-id person)</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;* MEETING [%&lt;%Y-%m-%d %a&gt;] :REFILE:MEETING:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n\n</span><span class="st">%?&quot;</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>      (concat <span class="st">&quot;* MEETING with &quot;</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>              (vulpea-note-title person)</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot; on [%&lt;%Y-%m-%d %a&gt;] :MEETING:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n\n</span><span class="st">%?&quot;</span>))))</span></code></pre></div>
<p>So first we select a person via <code class="verbatim">vulpea-select</code> and store it via <code class="verbatim">org-capture-put</code>, so we can access it in <code class="verbatim">vulpea-capture-meeting-target</code> function. <code class="verbatim">vulpea-select</code> always return a note, but in case result doesn’t contain an <code class="verbatim">id</code>, it means that the note doesn’t exist. In our case that means that we want to place meeting notes in the inbox file and the heading must contain the name of the group we are having meeting with. In case it’s a real person, there is no need to add name in the heading, but we need an extra tag - <code class="verbatim">REFILE</code>, so Inbox agenda picks it up.</p>
<div class="sourceCode" id="cb8" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-capture-meeting-target </span>()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return a target for a meeting capture.&quot;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((person (org-capture-get :meeting-person)))</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; unfortunately, I could not find a way to reuse</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; `org-capture-set-target-location'</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">if</span> (vulpea-note-id person)</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">let</span> ((path (vulpea-note-path person))</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>              (headline <span class="st">&quot;Meetings&quot;</span>))</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>          (set-buffer (org-capture-target-buffer path))</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; Org expects the target file to be in Org mode, otherwise</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; it throws an error. However, the default notes files</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; should work out of the box. In this case, we switch it to</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; Org mode.</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">unless</span> (derived-mode-p 'org-mode)</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>            (org-display-warning</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>             (<span class="kw">format</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot;Capture requirement: switching buffer %S to Org mode&quot;</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>              (current-buffer)))</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>            (org-mode))</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>          (org-capture-put-target-region-and-position)</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>          (widen)</span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>          (goto-char (point-min))</span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">if</span> (re-search-forward</span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>               (<span class="kw">format</span> org-complex-heading-regexp-format</span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>                       (regexp-quote headline))</span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>               <span class="kw">nil</span> <span class="kw">t</span>)</span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>              (beginning-of-line)</span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>            (goto-char (point-max))</span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">unless</span> (bolp) (insert <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span>))</span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>            (insert <span class="st">&quot;* &quot;</span> headline <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span>)</span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>            (beginning-of-line <span class="dv">0</span>)))</span>
<span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">let</span> ((path vulpea-capture-inbox-file))</span>
<span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a>        (set-buffer (org-capture-target-buffer path))</span>
<span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a>        (org-capture-put-target-region-and-position)</span>
<span id="cb8-35"><a href="#cb8-35" aria-hidden="true" tabindex="-1"></a>        (widen)))))</span></code></pre></div>
<p>Now it become a little bit more verbose, but this code is actually dead simple. It is borrowed from <code class="verbatim">org-capture-set-target-location</code> and unfortunately, I could not find a way to properly reuse it.</p>
<p>First we get a person note that we selected in <code class="verbatim">vulpea-capture-meeting-template</code> via <code class="verbatim">org-capture-get</code> and if it has an id, that means that we need to place the note under Meetings headline, otherwise it just goes straight to <code class="verbatim">vulpea-capture-inbox-file</code>.</p>
<p>That’s it!</p>
<h1 id="6a06edc5-1a15-4cc1-b504-ac82fc0934da" id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol type="1">
<li><a href="../posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="../posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="../posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="../posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="../posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="../posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="../posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="e5cd7e8b-f059-4d64-aadf-1efeebc9dc62" id="references">References</h1>
<ul>
<li><a href="https://orgmode.org/manual/Capture.html#Capture">Org Mode Capture</a></li>
<li><a href="https://orgmode.org/manual/Tag-Inheritance.html#Tag-Inheritance">Org Mode Tag Inheritance</a></li>
<li><a href="https://github.com/d12frosted/environment/blob/ec30dc1218c86578b4f655c717147cd70012a12e/emacs/lisp/lib-vulpea-capture.el">lib-vulpea-capture</a> - personal configurations for Org capture process</li>
</ul>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-05-21-task-management-with-roam-vol7.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Towards future-safe emacs.d</title>
    <link href="https://d12frosted.io/posts/2021-04-09-emacs-d.html" />
    <id>https://d12frosted.io/posts/2021-04-09-emacs-d.html</id>
    <published>2021-04-09T00:00:00Z</published>
    <updated>2021-04-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Boosting emacs.d development flow">
    <meta property="og:title" content="Boris Buliga - Towards future-safe emacs.d" />
    <meta property="og:description" content="Boosting emacs.d development flow" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2021-04-09-emacs-d.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Towards future-safe emacs.d</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Towards future-safe emacs.d</h1>
  <section class="subtitle">
    Posted on April  9, 2021
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>
  </section>
  
  <section>
    <p><strong>TL;DR</strong> This post describes an approach to make byte compiler and various linters happy and <strong>useful</strong> in your <code class="verbatim">.emacs.d</code>, while maintaining startup performance, the ability to write embedded packages and test them. This is going to be a long post, so grab a bottle of wine, snacks and follow me. In case you lack these things, just take a look at results.</p>
<p>The longest project in my life is <a href="https://github.com/d12frosted/environment">environment</a>, it started with <a href="https://github.com/d12frosted/environment/tree/master/emacs">Emacs configurations</a> - personal frustration and my biggest time <del>waster</del> investment. I might be masochistic, but I never felt sorry for falling into this <del>trap</del> world. And boy, sometimes it is painful to maintain something in this ever-mutating and dynamic system.</p>
<p>There are various tools to help maintaining Emacs package, all fall into one of four categories - project management tools (e.g. <a href="https://cask.readthedocs.io/en/latest/">Cask</a>, <a href="https://github.com/doublep/eldev/">doublep/eldev</a>, <a href="https://github.com/alphapapa/makem.sh">alphapapa/makem.sh</a>), compiler (e.g. built-in byte compiler), linters (e.g. <a href="https://github.com/purcell/package-lint">purcell/package-lint</a>, <a href="https://github.com/mattiase/relint">mattiase/relint</a>, <a href="https://github.com/gonewest818/elisp-lint/">gonewest818/elisp-lint</a>, <a href="https://github.com/emacs-elsa/Elsa">emacs-elsa/Elsa</a>) and test frameworks (e.g. <a href="https://www.gnu.org/software/emacs/manual/html_node/ert/index.html">ERT</a>, <a href="https://github.com/jorgenschaefer/emacs-buttercup">jorgenschaefer/emacs-buttercup</a>). The tricky part comes when you want to use them for maintaining your own Emacs configurations, as they have different requirements compared to regular Emacs packages. At least in my case, they do.</p>
<p>First of all, I want Emacs to start as quickly as possible (e.g. in less than a second), meaning that I need to use tools like <code class="verbatim">use-package</code> for deferred loading. So I can’t <code class="verbatim">require</code> most of the packages directly except those that are used in the bootstrapping process. This easily makes compiler sad.</p>
<p>Secondly, I have lots of additional functions extending or combining functionality of one or more packages. But I hate to define them inside <code class="verbatim">use-packge</code> macro. Aside from aesthetics, I want to retain functionality of <code class="verbatim">xref-find-definitions</code>. Having definitions outside of <code class="verbatim">use-package</code> means that I will get many false byte compiler warnings and errors. Which is not helpful!</p>
<p>Thirdly, bootstrap process is different as project management tools isolate your package development from your Emacs configurations, which makes sense in general, but doesn’t make sense when you develop the aforementioned configurations.</p>
<p>The closest approach I know about is <a href="https://github.com/hlissner/doom-emacs">hlissner/doom-emacs</a>, but even there <code class="verbatim">.emacs.d</code> is <a href="https://github.com/hlissner/doom-emacs/blob/46dedb3e3361535052d199e994b641dca2c2cffd/modules/lang/emacs-lisp/config.el#L14">ignored</a> by compiler. Let me just quote a docstring from there:</p>
<blockquote>
<p>This checker (flycheck) tends to produce a lot of false positives in your .emacs.d and private config, so it is mostly useless there. However, special hacks are employed so that flycheck still does <strong>some</strong> helpful linting.</p>
</blockquote>
<p>But it’s Emacs, right? Everything is possible! So let’s find a way to make byte compiler and linters helpful and enable testing of Emacs configurations.</p>
<p><img src="../images/2021-04-09-emacs-d/2022-07-19-21-58-18-emacs-d-1.webp" class="img-half img-float-left" /></p>
<p><img src="../images/2021-04-09-emacs-d/2022-07-19-21-58-18-emacs-d-2.webp" class="img-half img-float-right" /></p>
<!--more-->

<p>Before we dive too much into details, let me describe the solution from higher level.</p>
<ul>
<li><a href="https://github.com/doublep/eldev/">doublep/eldev</a> is a project management tool because it’s powerful and extensible.</li>
<li><a href="https://github.com/raxod502/straight.el">raxod502/straight.el</a> is a package management tool because it’s consistent and reliable.</li>
<li><a href="https://github.com/jwiegley/use-package">jwiegley/use-package</a> is a package configuration tool with deferred loading because it’s easy to use and widely adopted.</li>
<li><a href="https://github.com/gonewest818/elisp-lint/">gonewest818/elisp-lint</a> is a linter because it aggregates many other linters.</li>
<li><a href="https://github.com/jorgenschaefer/emacs-buttercup">jorgenschaefer/emacs-buttercup</a> is a testing framework because it’s easy to use.</li>
</ul>
<p>The structure of my <code class="verbatim">.emacs.d</code> looks like this:</p>
<pre class="example"><code>.
├── Eldev
├── Makefile
├── README.org
├── early-init.el
├── init.el
├── lisp
│   ├── config-aaa.el
│   ├── config-bbb.el
│   ├── ...
│   ├── config-zzz.el
│   ├── init-autoloads.el
│   ├── init-elpa.el
│   ├── init-aaa.el
│   ├── init-bbb.el
│   ├── ...
│   ├── init-zzz.el
│   ├── lib-aaa.el
│   ├── lib-bbb.el
│   ├── ...
│   ├── lib-zzz.el
├── templates
│   ├── emacs-lisp-mode
│   │   ├── template_1
│   │   ├── ...
│   │   └── template_n
│   └── haskell-mode
│       ├── template_1
│       ├── ...
│       └── template_n
├── test
│   ├── lib-aaa-test.el
│   ├── lib-bbb-test.el
│   ├── ...
└── └── lib-zzz-test.el
</code></pre>
<p>As you can see, all lisp files are located inside of <code class="verbatim">lisp</code> directory (you should not put them on the same level as <code class="verbatim">init.el</code> file as that directory can’t be part of <code class="verbatim">load-path</code>), and all tests are located inside of <code class="verbatim">test</code> directory.</p>
<p>The following naming convention is used.</p>
<ul>
<li><code class="verbatim">init-xxx</code> is a file lazily initializing <code class="verbatim">xxx</code> feature, it can be a programming language (e.g. <code class="verbatim">init-haskell</code>) or a feature (e.g. <code class="verbatim">init-project</code>)
<ul>
<li>this is the only file type describing what packages to install, how to initialize and configure them;</li>
<li>it is safe to require these files, as they should defer any loading as much as possible;</li>
</ul></li>
<li><code class="verbatim">lib-xxx</code> is a file containing various utilities depending on packages defined in <code class="verbatim">init-xxx</code> file
<ul>
<li>these files are loaded via autoloads, and they should never be required directly;</li>
<li>these files can safely <code class="verbatim">require</code> any packages defined in <code class="verbatim">init-xxx</code> to help linter and byte compiler;</li>
<li>in some sense, <code class="verbatim">lib-xxx</code> are packages that are not distributed via MELPA, but rather located in <code class="verbatim">emacs.d</code> folder;</li>
<li>various extensions around <code class="verbatim">org-mode</code> called <code class="verbatim">vulpea</code> are good examples of <code class="verbatim">lib</code> files:
<ul>
<li><a href="https://github.com/d12frosted/environment/blob/6ffa964e77410b71058c3d1c43a2381a90bbc6aa/emacs/lisp/lib-vulpea-agenda.el">lib-vulpea-agenda.el</a></li>
<li><a href="https://github.com/d12frosted/environment/blob/6ffa964e77410b71058c3d1c43a2381a90bbc6aa/emacs/lisp/lib-vulpea-capture.el">lib-vulpea-capture.el</a></li>
<li><a href="https://github.com/d12frosted/environment/blob/6ffa964e77410b71058c3d1c43a2381a90bbc6aa/emacs/lisp/lib-vulpea-refile.el">lib-vulpea-refile.el</a></li>
<li><a href="https://github.com/d12frosted/environment/blob/6ffa964e77410b71058c3d1c43a2381a90bbc6aa/emacs/lisp/lib-vulpea-id.el">lib-vulpea-id.el</a></li>
<li><a href="https://github.com/d12frosted/environment/blob/6ffa964e77410b71058c3d1c43a2381a90bbc6aa/emacs/lisp/lib-vulpea.el">lib-vulpea.el</a></li>
</ul></li>
</ul></li>
<li><code class="verbatim">config-xxx</code> is a file containing variables and constants required by both <code class="verbatim">init-xxx</code> and <code class="verbatim">lib-xxx</code> files, allowing to avoid circular dependencies;
<ul>
<li>as they do not load any packages, it is safe to require this file from any other file;</li>
</ul></li>
</ul>
<p>The only exception from this convention is <code class="verbatim">init-autoloads.el</code> file containing autoloads. Name comes from <code class="verbatim">init.el</code> file.</p>
<h1 id="53fe1db8-2e30-4246-900b-ab5f11619419" id="content-of-early-init">Content of <code class="verbatim">early-init</code></h1>
<p>See <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html">relevant section</a> in Emacs Help for more information on The Early Init File, introduced in Emacs 27.1. Basically, this file is great for frame customizations. In my case I love to disable as much clutter as possible:</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(add-to-list 'default-frame-alist '(tool-bar-lines . <span class="dv">0</span>))</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>(add-to-list 'default-frame-alist '(menu-bar-lines . <span class="dv">0</span>))</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>(add-to-list 'default-frame-alist '(vertical-scroll-bars))</span></code></pre></div>
<p>This file is totally optional, you can safely omit it in your setup. But if you have any frame customization, putting them in <code class="verbatim">early-init</code> file might speed up your Emacs and fix some visual clutter upon startup.</p>
<h1 id="2659cc52-6a45-40a7-bd43-402590983a6d" id="content-of-init.el">Content of <code class="verbatim">init.el</code></h1>
<p>The goal of this file is to <code class="verbatim">require</code> all <code class="verbatim">init-xxx</code> files. The structure is trivial:</p>
<ol type="1">
<li>Add <code class="verbatim">lisp</code> folder to <code class="verbatim">load-path</code>, so we can use <code class="verbatim">require</code>.</li>
<li>Adjust garbage collection thresholds, so things run smoother.</li>
<li>Load <code class="verbatim">config-path</code> declaring various path constants.</li>
<li>Load <code class="verbatim">init-elpa</code> which ‘bootstraps’ your package and configuration management tools.</li>
<li>Load autoloads file.</li>
<li>Load all other <code class="verbatim">init-xxx</code> files.</li>
<li>Load <code class="verbatim">custom-file</code>, even if you are not using <code class="verbatim">customize</code> interface, you need this to use <code class="verbatim">.dir-locals.el</code>.</li>
</ol>
<h2 id="27383777-1082-4df7-8a23-e6e9dcabe648" id="add-lisp-directory-to-load-path">Add <code class="verbatim">lisp</code> directory to <code class="verbatim">load-path</code></h2>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; Since we might be running in CI or other environments, stick to</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">;; XDG_CONFIG_HOME value if possible.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>(<span class="kw">let</span> ((emacs-home (if-let ((xdg (getenv <span class="st">&quot;XDG_CONFIG_HOME&quot;</span>)))</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>                      (expand-file-name <span class="st">&quot;emacs/&quot;</span> xdg)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>                    user-emacs-directory)))</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; Add Lisp directory to `load-path'.</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  (add-to-list 'load-path (expand-file-name <span class="st">&quot;lisp&quot;</span> emacs-home)))</span></code></pre></div>
<h2 id="edb7fe75-93c2-41ec-be35-eb9abc3019ae" id="garbage-collection-thresholds">Garbage collection thresholds</h2>
<p>Garbage collection is a huge contributor to startup time. We temporarily increase this value to prevent garbage collection from running, then reset it to some big number in <code class="verbatim">emacs-startup-hook</code>. I discovered this trick thanks to <a href="https://github.com/hlissner/doom-emacs/">hlissner/doom-emacs</a>. But it is widely used by many people, for example <a href="https://github.com/purcell/emacs.d">purcell/emacs.d</a>.</p>
<p>In addition it is a good idea to use <a href="https://github.com/emacsmirror/gcmh">emacsmirror/gcmh</a> (aka Garbage Collector Magic Hack) to improve performance of interactive functions.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; Adjust garbage collection thresholds during startup, and thereafter</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">let</span> ((normal-gc-cons-threshold (<span class="op">*</span> <span class="dv">20</span> <span class="dv">1024</span> <span class="dv">1024</span>))</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>      (init-gc-cons-threshold (<span class="op">*</span> <span class="dv">128</span> <span class="dv">1024</span> <span class="dv">1024</span>)))</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">setq</span> gc-cons-threshold init-gc-cons-threshold)</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  (add-hook 'emacs-startup-hook</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">lambda</span> () (<span class="kw">setq</span> gc-cons-threshold</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>                             normal-gc-cons-threshold))))</span></code></pre></div>
<h2 id="aa075320-ba4b-4579-87a1-e32748f07ce6" id="bootstrap">Bootstrap</h2>
<div class="sourceCode" id="cb5" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'config-path)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-elpa)</span></code></pre></div>
<p>Literally, that’s it. Checkout content of to find out how it works.</p>
<h2 id="f70f751b-627d-4443-8039-6d959220c9f0" id="setup-custom-file-location">Setup <code class="verbatim">custom-file</code> location</h2>
<p>Before we load anything, we should setup location of our <code class="verbatim">custom-file</code>, otherwise Emacs customization system will pollute our <code class="verbatim">init.el</code> file.</p>
<div class="sourceCode" id="cb6" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> custom-file (concat path-local-dir <span class="st">&quot;custom.el&quot;</span>))</span></code></pre></div>
<p>The constant <code class="verbatim">path-local-dir</code> is defined in <code class="verbatim">config-path</code>:</p>
<div class="sourceCode" id="cb7" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>(defconst path-local-dir</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  (concat</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>   (file-name-as-directory</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">or</span> (getenv <span class="st">&quot;XDG_CACHE_HOME&quot;</span>)</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        (concat path-home-dir <span class="st">&quot;.cache&quot;</span>)))</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>   <span class="st">&quot;emacs/&quot;</span>)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;The root directory for local Emacs files.</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="st">Use this as permanent storage for files that are safe to share</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="st">across systems.&quot;</span>)</span></code></pre></div>
<h2 id="2c1b997e-53f4-49a0-9c47-a6951c85e1d1" id="loading-autoloads">Loading autoloads</h2>
<div class="sourceCode" id="cb8" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; load autoloads file</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">unless</span> elpa-bootstrap-p</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">unless</span> (file-exists-p path-autoloads-file)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">error</span> <span class="st">&quot;Autoloads file doesn't exist, please run '%s'&quot;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>           <span class="st">&quot;eru install emacs&quot;</span>))</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">load</span> path-autoloads-file <span class="kw">nil</span> 'nomessage))</span></code></pre></div>
<p>The most important bit here is the last line, which loads file containing autoloads and errors out if it doesn’t exist. We want to load this file before any other modules to make autoloaded functions available there. But of course we can’t load this file during bootstrap process which generates this file.</p>
<h2 id="ab7c256d-0d24-48a0-9646-11a060cb9fb1" id="loading-other-init-files">Loading other init files</h2>
<p>Now comes the easy part, we just load all <code class="verbatim">init-xxx</code> files that we have.</p>
<div class="sourceCode" id="cb9" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; core</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-env)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-kbd)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-editor)</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="co">;; utilities</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-selection)</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-project)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-vcs)</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-ide)</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-vulpea)</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-vino)</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-pdf)</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a><span class="co">;; languages</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-elisp)</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-haskell)</span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'init-sh)</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span></code></pre></div>
<p>While this might sound stupid to manually load files that has clear naming pattern, I still like to do it manually, because it helps byte compiler, it has less footprint on runtime performance, the list is not big and I rarely add new files. Another option would be to generate this list during ‘compilation’, but again, I would love to avoid any unnecessary complications.</p>
<h2 id="d822a08d-117c-4b69-bcc1-e4b7d8d3aad4" id="loading-custom-file">Loading <code class="verbatim">custom-file</code></h2>
<p>And the last thing to do is to load <code class="verbatim">custom-file</code>:</p>
<div class="sourceCode" id="cb10" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; I don't use `customize' interface, but .dir-locals.el put 'safe'</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="co">;; variables into `custom-file'. And to be honest, I hate to allow</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co">;; them every time I restart Emacs.</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>(<span class="kw">when</span> (file-exists-p custom-file)</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">load</span> custom-file <span class="kw">nil</span> 'nomessage))</span></code></pre></div>
<h1 id="5e97b74a-5113-4e83-b222-3b47a48b759d" id="content-of-init-elpa">Content of <code class="verbatim">init-elpa</code></h1>
<p>Part of our bootstrap process is setting up package management and package configuration tools, which is performed in <code class="verbatim">init-elpa</code> file.</p>
<h2 id="6c2ebb7c-cc1c-47fb-828c-cfee0922afad" id="bootstrap-straight.el">Bootstrap <code class="verbatim">straight.el</code></h2>
<p>The bootstrap process of <a href="https://github.com/raxod502/straight.el">raxod502/straight.el</a> is quire simple and well documented in the official repository. Additionally, we want to avoid any modification checks at startup by setting the value of <code class="verbatim">straight-check-for-modifications</code> to <code class="verbatim">nil</code>, so everything runs faster. Also we want to install packages by default in <code class="verbatim">use-package</code> forms. And then everything is straight-forward.</p>
<div class="sourceCode" id="cb11" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'config-path)</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>(setq-default</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a> straight-repository-branch <span class="st">&quot;develop&quot;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a> straight-check-for-modifications <span class="kw">nil</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a> straight-use-package-by-default <span class="kw">t</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a> straight-base-dir path-packages-dir)</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defvar</span><span class="fu"> bootstrap-version</span>)</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>(<span class="kw">let</span> ((bootstrap-file</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>       (expand-file-name <span class="st">&quot;straight/repos/straight.el/bootstrap.el&quot;</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>                         path-packages-dir))</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>      (bootstrap-version <span class="dv">5</span>))</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">unless</span> (file-exists-p bootstrap-file)</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>    (with-current-buffer</span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>        (url-retrieve-synchronously</span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>         (concat <span class="st">&quot;https://raw.githubusercontent.com/&quot;</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>                 <span class="st">&quot;raxod502/straight.el/&quot;</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>                 <span class="st">&quot;develop/install.el&quot;</span>)</span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>         'silent 'inhibit-cookies)</span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>      (goto-char (point-max))</span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>      (eval-print-last-sexp)))</span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">load</span> bootstrap-file <span class="kw">nil</span> 'nomessage))</span></code></pre></div>
<p>The only bit I am not describing here is how I configure <a href="../posts/2021-04-08-straight-el-retries.html">retries for networking operations</a>.</p>
<h2 id="35dbd099-0b08-4e9f-8efe-c76741dd1dba" id="setup-use-package">Setup <code class="verbatim">use-package</code></h2>
<p>Now it’s easy to setup <code class="verbatim">use-package</code>:</p>
<div class="sourceCode" id="cb12" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>(setq-default</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a> use-package-enable-imenu-support <span class="kw">t</span>)</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>(straight-use-package 'use-package)</span></code></pre></div>
<h2 id="76c76a63-68b7-441d-9052-2aec30a89a3f" id="popular-packages">Popular packages</h2>
<p>There are packages (or rather libraries) that should be loaded eagerly because they are used extensively and they do not provide autoloads.</p>
<div class="sourceCode" id="cb13" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">use-package</span> s)</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">use-package</span> dash)</span></code></pre></div>
<h1 id="7e2d7e0d-2626-415b-9901-76d766325054" id="content-of-eldev">Content of Eldev</h1>
<p><code class="verbatim">Eldev</code> file defines our project. You can read more about this file in <a href="https://github.com/doublep/eldev/">doublep/eldev</a> repository.</p>
<h2 id="78d676d5-c0c0-4d06-ba55-011d7ccd5cf6" id="specify-project-files">Specify project files</h2>
<p>Eldev is quite powerful when it comes to fileset specification, but I find it not working properly with extra directories out of box. Since we can not place our lisp files in the same directory with <code class="verbatim">init.el</code> file, we configure <code class="verbatim">eldev-main-fileset</code> and add <code class="verbatim">lisp</code> folder to loading roots for certain commands.</p>
<div class="sourceCode" id="cb14" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setf</span> eldev-project-main-file <span class="st">&quot;init.el&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>      eldev-main-fileset '(<span class="st">&quot;init.el&quot;</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>                           <span class="st">&quot;early-init.el&quot;</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>                           <span class="st">&quot;lisp/*.el&quot;</span>))</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="co">;; Emacs doesn't allow to add directory containing init.el to load</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="co">;; path, so we have to put other Emacs Lisp files in directory. Help</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="co">;; Eldev commands to locate them.</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>(eldev-add-loading-roots 'build <span class="st">&quot;lisp&quot;</span>)</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>(eldev-add-loading-roots 'bootstrap <span class="st">&quot;lisp&quot;</span>)</span></code></pre></div>
<h2 id="29c1ffaa-4ea0-40c7-a6a9-07a063c20437" id="use-melpa">Use MELPA</h2>
<p>We are going to use certain 3rd party packages for project management (e.g. testing and linting), so we must tell Eldev where to load them from. This part is a little bit confusing as Eldev will install packages from MELPA and for our configurations we are going to use <code class="verbatim">straight.el</code>. But Eldev isolates these packages in it’s working dir and they will not interfere with our configurations. Ugly, but safe.</p>
<div class="sourceCode" id="cb15" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; There are dependencies for testing and linting phases, they should</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="co">;; be installed by Eldev from MELPA and GNU ELPA (latter is enabled by</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="co">;; default).</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>(eldev-use-package-archive 'melpa)</span></code></pre></div>
<h2 id="1bd1ef33-0a70-4aba-8e35-22271105d8b7" id="define-bootstrap-command">Define bootstrap command</h2>
<p>Bootstrapping Emacs is simple, we just need to load <code class="verbatim">init.el</code> file.</p>
<div class="sourceCode" id="cb16" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> elpa-bootstrap </span>()</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Bootstrap personal configurations.&quot;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  (setq-default</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>   elpa-bootstrap-p <span class="kw">t</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>   load-prefer-newer <span class="kw">t</span>)</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  (eldev--inject-loading-roots 'bootstrap)</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">require</span> 'config-path)</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">load</span> (expand-file-name <span class="st">&quot;init.el&quot;</span> path-emacs-dir)))</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="co">;; We want to run this before any build command. This is also needed</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a><span class="co">;; for `flyspell-eldev` to be aware of packages installed via</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a><span class="co">;; straight.el.</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>(add-hook 'eldev-build-system-hook #'elpa-bootstrap)</span></code></pre></div>
<p>We set the value of <code class="verbatim">elpa-bootstrap-p</code> to <code class="verbatim">t</code>, so that autoloads file is not required from <code class="verbatim">init.el</code> (we are going to generate it during bootstrap flow). We also set <code class="verbatim">load-prefer-newer</code> to <code class="verbatim">t</code> so that Emacs prefers newer files instead of byte compiled (again, we are going to compile <code class="verbatim">.el</code> to <code class="verbatim">.elc</code>).</p>
<p>We hook this function into any build command in order to install packages and
get proper <code class="verbatim">load-path</code> in all phases.</p>
<h2 id="de2caf6f-9ef3-47b4-a484-98835a26ccef" id="define-upgrade-command">Define upgrade command</h2>
<p>Upgrade flow is simple and uses <code class="verbatim">straight.el</code> functionality, because we use it to manage packages.</p>
<div class="sourceCode" id="cb17" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> elpa-upgrade </span>()</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Bootstrap personal configurations.&quot;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; make sure that bootstrap has completed</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  (elpa-bootstrap)</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">;;  fetch all packages and then merge the latest version</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>  (straight-fetch-all)</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>  (straight-merge-all)</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; in case we pinned some versions, revert any unneccessary merge</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>  (straight-thaw-versions)</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; rebuild updated packages</span></span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">delete-file</span> (concat path-packages-dir <span class="st">&quot;straight/build-cache.el&quot;</span>))</span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a>  (delete-directory (concat path-packages-dir <span class="st">&quot;straight/build&quot;</span>) 'recursive)</span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a>  (straight-check-all))</span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a>(add-hook 'eldev-upgrade-hook #'elpa-upgrade)</span></code></pre></div>
<h2 id="e16b007c-c50f-4339-99bc-a611d9b36160" id="define-autoloads-plugin">Define autoloads plugin</h2>
<p>Now is the most dirty part - autoloads generation. Eldev provides a plugin for autoloads generation, but unfortunately it works only with root directory, but we need to generate our autoloads for files in <code class="verbatim">lisp</code> directory. So we write our own plugin.</p>
<div class="sourceCode" id="cb18" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; We want to generate autoloads file. This line simply loads few</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="co">;; helpers.</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>(eldev-use-plugin 'autoloads)</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="co">;; Eldev doesn't traverse extra loading roots, so we have to modify</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="co">;; autoloads plugin a little bit. Basically, this modification</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="co">;; achieves specific goal - generate autoloads from files located in</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="co">;; Lisp directory.</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>(eldev-defbuilder eldev-builder-autoloads (sources target)</span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>  <span class="bu">:type</span>           many-to-one</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>  :short-name     <span class="st">&quot;AUTOLOADS&quot;</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>  :message        target</span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>  :source-files   (:and <span class="st">&quot;lisp/*.el&quot;</span> (:not (<span class="st">&quot;lisp/*autoloads.el&quot;</span>)))</span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>  :targets        (<span class="kw">lambda</span> (_sources) <span class="st">&quot;lisp/init-autoloads.el&quot;</span>)</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>  :define-cleaner (eldev-cleaner-autoloads</span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>                   <span class="st">&quot;Delete the generated package autoloads files.&quot;</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>                   <span class="bu">:default</span> <span class="kw">t</span>)</span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>  :collect        (<span class="st">&quot;:autoloads&quot;</span>)</span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; To make sure that `update-directory-autoloads' doesn't grab files it shouldn't,</span></span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; override `directory-files' temporarily.</span></span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a>  (eldev-advised (#'directory-files</span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a>                  :around</span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a>                  (<span class="kw">lambda</span> (original <span class="kw">directory</span> &amp;<span class="kw">rest</span> arguments)</span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a>                    (<span class="kw">let</span> ((files (<span class="kw">apply</span> original <span class="kw">directory</span> arguments)))</span>
<span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a>                      (<span class="kw">if</span> (file-equal-p <span class="kw">directory</span> eldev-project-dir)</span>
<span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a>                          (<span class="kw">let</span> (filtered)</span>
<span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a>                            (<span class="kw">dolist</span> (file files)</span>
<span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a>                              (<span class="kw">when</span> (eldev-any-p (file-equal-p file it) sources)</span>
<span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a>                                (<span class="kw">push</span> file filtered)))</span>
<span id="cb18-30"><a href="#cb18-30" aria-hidden="true" tabindex="-1"></a>                            (<span class="kw">nreverse</span> filtered))</span>
<span id="cb18-31"><a href="#cb18-31" aria-hidden="true" tabindex="-1"></a>                        files))))</span>
<span id="cb18-32"><a href="#cb18-32" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let</span> ((inhibit-message   <span class="kw">t</span>)</span>
<span id="cb18-33"><a href="#cb18-33" aria-hidden="true" tabindex="-1"></a>          (make-backup-files <span class="kw">nil</span>)</span>
<span id="cb18-34"><a href="#cb18-34" aria-hidden="true" tabindex="-1"></a>          (pkg-dir (expand-file-name <span class="st">&quot;lisp/&quot;</span> eldev-project-dir)))</span>
<span id="cb18-35"><a href="#cb18-35" aria-hidden="true" tabindex="-1"></a>      (package-generate-autoloads (package-desc-name (eldev-package-descriptor)) pkg-dir)</span>
<span id="cb18-36"><a href="#cb18-36" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; Always load the generated file.  Maybe there are cases when we don't need that,</span></span>
<span id="cb18-37"><a href="#cb18-37" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; but most of the time we do.</span></span>
<span id="cb18-38"><a href="#cb18-38" aria-hidden="true" tabindex="-1"></a>      (eldev--load-autoloads-file (expand-file-name target eldev-project-dir)))))</span>
<span id="cb18-39"><a href="#cb18-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-40"><a href="#cb18-40" aria-hidden="true" tabindex="-1"></a><span class="co">;; Always load autoloads file.</span></span>
<span id="cb18-41"><a href="#cb18-41" aria-hidden="true" tabindex="-1"></a>(add-hook</span>
<span id="cb18-42"><a href="#cb18-42" aria-hidden="true" tabindex="-1"></a> 'eldev-build-system-hook</span>
<span id="cb18-43"><a href="#cb18-43" aria-hidden="true" tabindex="-1"></a> (<span class="kw">lambda</span> ()</span>
<span id="cb18-44"><a href="#cb18-44" aria-hidden="true" tabindex="-1"></a>   (eldev--load-autoloads-file</span>
<span id="cb18-45"><a href="#cb18-45" aria-hidden="true" tabindex="-1"></a>    (expand-file-name <span class="st">&quot;lisp/init-autoloads.el&quot;</span> eldev-project-dir))))</span></code></pre></div>
<h2 id="3bb9a10a-614c-4c55-8a92-c9b8235d4e0e" id="linting-configuration">Linting configuration</h2>
<p>And again, we need to tell Eldev which files to lint.</p>
<div class="sourceCode" id="cb19" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> eldev-lint-find-files-absolute </span>(f &amp;<span class="kw">rest</span> args)</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Call F with ARGS and ensure that result is absolute paths.&quot;</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>  (seq-map (<span class="kw">lambda</span> (p)</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>             (expand-file-name p eldev-project-dir))</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>           (seq-filter (<span class="kw">lambda</span> (p)</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>                         (<span class="kw">not</span> (string-suffix-p <span class="st">&quot;autoloads.el&quot;</span> p)))</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>                       (<span class="kw">apply</span> f args))))</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>(advice-add 'eldev-lint-find-files :around #'eldev-lint-find-files-absolute)</span></code></pre></div>
<p>Then we ask Eldev to use <a href="https://github.com/gonewest818/elisp-lint/">gonewest818/elisp-lint</a> for linting and configure it a little bit.</p>
<div class="sourceCode" id="cb20" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; Use elisp-lint by default</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setf</span> eldev-lint-default '(elisp))</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>(with-eval-after-load 'elisp-lint</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">setf</span> elisp-lint-ignored-validators '(<span class="st">&quot;byte-compile&quot;</span>)))</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a><span class="co">;; Tell checkdoc not to demand two spaces after a period.</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> sentence-end-double-space <span class="kw">nil</span>)</span></code></pre></div>
<p>What I love about <a href="https://github.com/gonewest818/elisp-lint/">gonewest818/elisp-lint</a> is that it combines multiple linters, including <a href="https://github.com/purcell/package-lint">purcell/package-lint</a>. While <code class="verbatim">package-lint</code> is a useful linter, it enforces naming convention which I don’t agree with when it comes to Emacs configurations. E.g. it wants every function in <code class="verbatim">lib-vulpea.el</code> to have a prefix <code class="verbatim">lib-vulpea</code>. While in general it makes sense, I want to avoid <code class="verbatim">lib</code> part here. The same goes for <code class="verbatim">init</code> and <code class="verbatim">config</code> stuff. So we intrusively change that rule:</p>
<div class="sourceCode" id="cb21" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; In general, `package-lint' is useful. But package prefix naming</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="co">;; policy is not useful for personal configurations. So we chop</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="co">;; lib/init part from the package name.</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="co">;;</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="co">;; And `eval-after-load'. In general it's not a good idea to use it in</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a><span class="co">;; packages, but these are configurations.</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>(with-eval-after-load 'package-lint</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">defun</span><span class="fu"> package-lint--package-prefix-cleanup </span>(f &amp;<span class="kw">rest</span> args)</span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;Call F with ARGS and cleanup it's result.&quot;</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let</span> ((r (<span class="kw">apply</span> f args)))</span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>      (replace-regexp-in-string <span class="st">&quot;</span><span class="sc">\\</span><span class="st">(init</span><span class="sc">\\</span><span class="st">|lib</span><span class="sc">\\</span><span class="st">|config</span><span class="sc">\\</span><span class="st">|compat</span><span class="sc">\\</span><span class="st">)-?&quot;</span> <span class="st">&quot;&quot;</span> r)))</span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>  (advice-add 'package-lint--get-package-prefix :around #'package-lint--package-prefix-cleanup)</span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">defun</span><span class="fu"> package-lint--check-eval-after-load </span>()</span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;Do nothing.&quot;</span>))</span></code></pre></div>
<p>We also need <code class="verbatim">eval-after-load</code>, so let’s just noop. It makes sense to discourage usage of <code class="verbatim">eval-after-load</code> in packages, but in Emacs configurations it doesn’t make sense.</p>
<p>And the last bit is <code class="verbatim">emacsql</code>. I use <code class="verbatim">emacsql-fix-vector-indentation</code> to format my SQL statements, and I want linter to be happy about it:</p>
<div class="sourceCode" id="cb22" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; Teach linter how to properly indent emacsql vectors.</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>(eldev-add-extra-dependencies 'lint 'emacsql)</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>(add-hook 'eldev-lint-hook</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">lambda</span> ()</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>            (eldev-load-project-dependencies 'lint <span class="kw">nil</span> <span class="kw">t</span>)</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">require</span> 'emacsql)</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>            (call-interactively #'emacsql-fix-vector-indentation)))</span></code></pre></div>
<h1 id="8edf7419-494c-4061-8606-cb9222925f25" id="autoloads">autoloads</h1>
<p>Now that everything is configured, we can use <code class="verbatim">eldev</code> to bootstrap, compile, lint and test our configurations. The first thing we do is autoloads generation, which is as simple as</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev build :autoloads</span></code></pre></div>
<p>Though I prefer to clean autoloads before generating new ones.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev clean autoloads</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev build :autoloads</span></code></pre></div>
<p>This generates <code class="verbatim">lisp/init-autoloads.el</code> file. And in case you were wondering bout its content, then it looks like this:</p>
<div class="sourceCode" id="cb25" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co">;;; init-autoloads.el --- automatically extracted autoloads  -*- lexical-binding: t -*-</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="co">;;</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="co">;;; Code:</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>(add-to-list 'load-path (directory-file-name</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>                         (<span class="kw">or</span> (file-name-directory #$) (<span class="kw">car</span> load-path))))</span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a><span class="co">;;;</span><span class="al">###</span><span class="co"> (autoloads nil &quot;config-path&quot; &quot;config-path.el&quot; (0 0 0 0))</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="co">;;; Generated autoloads from config-path.el</span></span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a>(register-definition-prefixes <span class="st">&quot;config-path&quot;</span> '(<span class="st">&quot;path-&quot;</span>))</span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-14"><a href="#cb25-14" aria-hidden="true" tabindex="-1"></a><span class="co">;;;***</span></span>
<span id="cb25-15"><a href="#cb25-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-16"><a href="#cb25-16" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-17"><a href="#cb25-17" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-18"><a href="#cb25-18" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-19"><a href="#cb25-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-20"><a href="#cb25-20" aria-hidden="true" tabindex="-1"></a><span class="co">;;;</span><span class="al">###</span><span class="co"> (autoloads nil &quot;lib-buffer&quot; &quot;lib-buffer.el&quot; (0 0 0 0))</span></span>
<span id="cb25-21"><a href="#cb25-21" aria-hidden="true" tabindex="-1"></a><span class="co">;;; Generated autoloads from lib-buffer.el</span></span>
<span id="cb25-22"><a href="#cb25-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-23"><a href="#cb25-23" aria-hidden="true" tabindex="-1"></a>(autoload 'buffer-lines <span class="st">&quot;lib-buffer&quot;</span> <span class="st">&quot;\</span></span>
<span id="cb25-24"><a href="#cb25-24" aria-hidden="true" tabindex="-1"></a><span class="st">Return lines of BUFFER-OR-NAME.</span></span>
<span id="cb25-25"><a href="#cb25-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-26"><a href="#cb25-26" aria-hidden="true" tabindex="-1"></a><span class="st">Each line is a string with properties. Trailing newline character</span></span>
<span id="cb25-27"><a href="#cb25-27" aria-hidden="true" tabindex="-1"></a><span class="st">is not present.</span></span>
<span id="cb25-28"><a href="#cb25-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-29"><a href="#cb25-29" aria-hidden="true" tabindex="-1"></a><span class="st">\(fn BUFFER-OR-NAME)&quot;</span> <span class="kw">nil</span> <span class="kw">nil</span>)</span>
<span id="cb25-30"><a href="#cb25-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-31"><a href="#cb25-31" aria-hidden="true" tabindex="-1"></a>(autoload 'buffer-lines-map <span class="st">&quot;lib-buffer&quot;</span> <span class="st">&quot;\</span></span>
<span id="cb25-32"><a href="#cb25-32" aria-hidden="true" tabindex="-1"></a><span class="st">Call FN on each line of BUFFER-OR-NAME and return resulting list.</span></span>
<span id="cb25-33"><a href="#cb25-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-34"><a href="#cb25-34" aria-hidden="true" tabindex="-1"></a><span class="st">As opposed to `buffer-lines-each', this function accumulates</span></span>
<span id="cb25-35"><a href="#cb25-35" aria-hidden="true" tabindex="-1"></a><span class="st">result.</span></span>
<span id="cb25-36"><a href="#cb25-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-37"><a href="#cb25-37" aria-hidden="true" tabindex="-1"></a><span class="st">Each line is a string with properties. Trailing newline character</span></span>
<span id="cb25-38"><a href="#cb25-38" aria-hidden="true" tabindex="-1"></a><span class="st">is not present.</span></span>
<span id="cb25-39"><a href="#cb25-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-40"><a href="#cb25-40" aria-hidden="true" tabindex="-1"></a><span class="st">\(fn BUFFER-OR-NAME FN)&quot;</span> <span class="kw">nil</span> <span class="kw">nil</span>)</span>
<span id="cb25-41"><a href="#cb25-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-42"><a href="#cb25-42" aria-hidden="true" tabindex="-1"></a>(function-put 'buffer-lines-map 'lisp-indent-function '<span class="dv">1</span>)</span>
<span id="cb25-43"><a href="#cb25-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-44"><a href="#cb25-44" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span>
<span id="cb25-45"><a href="#cb25-45" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span>
<span id="cb25-46"><a href="#cb25-46" aria-hidden="true" tabindex="-1"></a><span class="co">;; ...</span></span>
<span id="cb25-47"><a href="#cb25-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-48"><a href="#cb25-48" aria-hidden="true" tabindex="-1"></a><span class="co">;;;***</span></span>
<span id="cb25-49"><a href="#cb25-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-50"><a href="#cb25-50" aria-hidden="true" tabindex="-1"></a><span class="co">;;;</span><span class="al">###</span><span class="co"> (autoloads nil &quot;lib-vulpea-agenda&quot; &quot;lib-vulpea-agenda.el&quot;</span></span>
<span id="cb25-51"><a href="#cb25-51" aria-hidden="true" tabindex="-1"></a><span class="co">;;;;;;  (0 0 0 0))</span></span>
<span id="cb25-52"><a href="#cb25-52" aria-hidden="true" tabindex="-1"></a><span class="co">;;; Generated autoloads from lib-vulpea-agenda.el</span></span>
<span id="cb25-53"><a href="#cb25-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-54"><a href="#cb25-54" aria-hidden="true" tabindex="-1"></a>(autoload 'vulpea-agenda-main <span class="st">&quot;lib-vulpea-agenda&quot;</span> <span class="st">&quot;\</span></span>
<span id="cb25-55"><a href="#cb25-55" aria-hidden="true" tabindex="-1"></a><span class="st">Show main `org-agenda' view.&quot;</span> <span class="kw">t</span> <span class="kw">nil</span>)</span>
<span id="cb25-56"><a href="#cb25-56" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-57"><a href="#cb25-57" aria-hidden="true" tabindex="-1"></a>(autoload 'vulpea-agenda-person <span class="st">&quot;lib-vulpea-agenda&quot;</span> <span class="st">&quot;\</span></span>
<span id="cb25-58"><a href="#cb25-58" aria-hidden="true" tabindex="-1"></a><span class="st">Show main `org-agenda' view.&quot;</span> <span class="kw">t</span> <span class="kw">nil</span>)</span>
<span id="cb25-59"><a href="#cb25-59" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-60"><a href="#cb25-60" aria-hidden="true" tabindex="-1"></a>(defconst vulpea-agenda-cmd-refile '(tags <span class="st">&quot;REFILE&quot;</span> ((org-agenda-overriding-header <span class="st">&quot;To refile&quot;</span>) (org-tags-match-list-sublevels <span class="kw">nil</span>))))</span>
<span id="cb25-61"><a href="#cb25-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-62"><a href="#cb25-62" aria-hidden="true" tabindex="-1"></a>(defconst vulpea-agenda-cmd-today '(agenda <span class="st">&quot;&quot;</span> ((org-agenda-span 'day) (org-agenda-skip-deadline-prewarning-if-scheduled <span class="kw">t</span>) (org-agenda-sorting-strategy '(habit-down time-up category-keep todo-state-down priority-down)))))</span>
<span id="cb25-63"><a href="#cb25-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-64"><a href="#cb25-64" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-65"><a href="#cb25-65" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-66"><a href="#cb25-66" aria-hidden="true" tabindex="-1"></a><span class="co">;;; ...</span></span>
<span id="cb25-67"><a href="#cb25-67" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-68"><a href="#cb25-68" aria-hidden="true" tabindex="-1"></a><span class="co">;;;***</span></span>
<span id="cb25-69"><a href="#cb25-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-70"><a href="#cb25-70" aria-hidden="true" tabindex="-1"></a><span class="co">;; Local Variables:</span></span>
<span id="cb25-71"><a href="#cb25-71" aria-hidden="true" tabindex="-1"></a><span class="co">;; version-control: never</span></span>
<span id="cb25-72"><a href="#cb25-72" aria-hidden="true" tabindex="-1"></a><span class="co">;; no-byte-compile: t</span></span>
<span id="cb25-73"><a href="#cb25-73" aria-hidden="true" tabindex="-1"></a><span class="co">;; no-update-autoloads: t</span></span>
<span id="cb25-74"><a href="#cb25-74" aria-hidden="true" tabindex="-1"></a><span class="co">;; coding: utf-8</span></span>
<span id="cb25-75"><a href="#cb25-75" aria-hidden="true" tabindex="-1"></a><span class="co">;; End:</span></span>
<span id="cb25-76"><a href="#cb25-76" aria-hidden="true" tabindex="-1"></a><span class="co">;;; init-autoloads.el ends here</span></span></code></pre></div>
<p>As you can see, it uses <code class="verbatim">autoload</code> to define a symbol (function or variable) and where to load it from. It also sets up indentation based on <code class="verbatim">decalre</code> from the body of function. And all constants are embedded as is, they are not getting autoloaded.</p>
<p>Please note that <code class="verbatim">eldev</code> commands need to be run with working directory pointing to the directory containing <code class="verbatim">Eldev</code> file, e.g. from <code class="verbatim">$XDG_CONFIG_HOME/emacs</code> or <code class="verbatim">$HOME/.config/emacs</code>.</p>
<h1 id="ec70ddb2-e024-4408-bd7a-01db920d7e82" id="compiling">Compiling</h1>
<p>The second operation in the bootstrap process is byte compilation. It is said that byte compiled lisp executes <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Speed-of-Byte_002dCode.html">faster</a>, but there is also an experimental branch for native compilation called <a href="https://akrl.sdf.org/gccemacs.html">gccemacs</a>, which is also available via <a href="https://github.com/d12frosted/homebrew-emacs-plus/#gccemacs">emacs-plus</a>. Another aspect of byte compilation is… well <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Compilation-Functions.html">compilation</a> which produces valuable <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Compiler-Errors.html">warnings and errors</a>. In our setup it is very easy to compile all our <code class="verbatim">.el</code> files.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev clean elc</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev compile</span></code></pre></div>
<p>That’s it.</p>
<h1 id="43c74208-5253-4d31-b1af-09f3f97ba4c9" id="linting">Linting</h1>
<p>The third step of the bootstrap process is linting. Once everything compiles we just need to check what linter has to say. Just to remind, we are using <a href="https://github.com/gonewest818/elisp-lint/">gonewest818/elisp-lint</a>. As you might already figured, with Eldev this step as trivial as</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev lint</span></code></pre></div>
<h1 id="29f90a3d-232a-4085-984b-68984fc1b4a8" id="testing">Testing</h1>
<p>And the last step of the bootstrap process is testing, which has two steps. First we simply load our configurations and make sure that nothing errors out and then we run test cases, for which we are using <a href="https://github.com/jorgenschaefer/emacs-buttercup">jorgenschaefer/emacs-buttercup</a> test framework. Interaction with eldev is trivial, again.</p>
<div class="sourceCode" id="cb28" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a>$ eldev exec <span class="kw">t</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>$ eldev test</span></code></pre></div>
<p>Example of the test:</p>
<div class="sourceCode" id="cb29" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">require</span> 'buttercup)</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>(<span class="kw">describe</span> <span class="st">&quot;buffer-content&quot;</span></span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>  (it <span class="st">&quot;returns an empty string in empty buffer&quot;</span></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let*</span> ((current-buffer (current-buffer))</span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>           (buffer (generate-new-buffer <span class="st">&quot;test-buffer&quot;</span>))</span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>           (name (buffer-name buffer)))</span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; we can get content of the buffer by name</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a>      (expect (buffer-content name) :to-equal <span class="st">&quot;&quot;</span>)</span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; we can get content of the buffer by object</span></span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true" tabindex="-1"></a>      (expect (buffer-content buffer) :to-equal <span class="st">&quot;&quot;</span>)</span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-14"><a href="#cb29-14" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; current buffer is not modified</span></span>
<span id="cb29-15"><a href="#cb29-15" aria-hidden="true" tabindex="-1"></a>      (expect (current-buffer) :to-equal current-buffer)))</span>
<span id="cb29-16"><a href="#cb29-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-17"><a href="#cb29-17" aria-hidden="true" tabindex="-1"></a>  (it <span class="st">&quot;returns content of non-empty buffer&quot;</span></span>
<span id="cb29-18"><a href="#cb29-18" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let*</span> ((current-buffer (current-buffer))</span>
<span id="cb29-19"><a href="#cb29-19" aria-hidden="true" tabindex="-1"></a>           (buffer (generate-new-buffer <span class="st">&quot;test-buffer&quot;</span>))</span>
<span id="cb29-20"><a href="#cb29-20" aria-hidden="true" tabindex="-1"></a>           (name (buffer-name buffer))</span>
<span id="cb29-21"><a href="#cb29-21" aria-hidden="true" tabindex="-1"></a>           (expected <span class="st">&quot;hello</span><span class="sc">\n</span><span class="st">my dear</span><span class="sc">\n</span><span class="st">frodo</span><span class="sc">\n</span><span class="st">&quot;</span>))</span>
<span id="cb29-22"><a href="#cb29-22" aria-hidden="true" tabindex="-1"></a>      (with-current-buffer buffer</span>
<span id="cb29-23"><a href="#cb29-23" aria-hidden="true" tabindex="-1"></a>        (insert expected))</span>
<span id="cb29-24"><a href="#cb29-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-25"><a href="#cb29-25" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; we can get content of the buffer by name</span></span>
<span id="cb29-26"><a href="#cb29-26" aria-hidden="true" tabindex="-1"></a>      (expect (buffer-content name) :to-equal expected)</span>
<span id="cb29-27"><a href="#cb29-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-28"><a href="#cb29-28" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; we can get content of the buffer by object</span></span>
<span id="cb29-29"><a href="#cb29-29" aria-hidden="true" tabindex="-1"></a>      (expect (buffer-content buffer) :to-equal expected)</span>
<span id="cb29-30"><a href="#cb29-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-31"><a href="#cb29-31" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; current buffer is not modified</span></span>
<span id="cb29-32"><a href="#cb29-32" aria-hidden="true" tabindex="-1"></a>      (expect (current-buffer) :to-equal current-buffer))))</span></code></pre></div>
<p>And the output of testing might look like this:</p>
<pre class="example"><code>Running 2 specs.

buffer-content
  returns an empty string in empty buffer (27.47ms)
  returns content of non-empty buffer (0.38ms)

Ran 2 specs, 0 failed, in 37.85ms.
</code></pre>
<h1 id="28cc71cc-136d-429f-b25d-48fd613ba244" id="upgrading">Upgrading</h1>
<p>Since we explicitly defined an upgrade command in Eldev, we can execute it as any other command:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev upgrade</span></code></pre></div>
<h1 id="60396cd4-9109-4a8a-9f6a-1016fc900fdf" id="makefile">Makefile</h1>
<p>Since certain operations consist of two steps (e.g. clean followed by build) and I also want to always pass extra arguments to <code class="verbatim">eldev</code> for verbosity and debuggability, I have a <code class="verbatim">Makefile</code> with all available commands.</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> clean</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="dv">clean:</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>  eldev clean all</span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> bootstrap</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="dv">bootstrap:</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a>  eldev clean autoloads</span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a>  eldev -C --unstable -a -dtT build :autoloads</span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-10"><a href="#cb32-10" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> upgrade</span></span>
<span id="cb32-11"><a href="#cb32-11" aria-hidden="true" tabindex="-1"></a><span class="dv">upgrade:</span></span>
<span id="cb32-12"><a href="#cb32-12" aria-hidden="true" tabindex="-1"></a>  eldev -C --unstable -a -dtT upgrade</span>
<span id="cb32-13"><a href="#cb32-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-14"><a href="#cb32-14" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> compile</span></span>
<span id="cb32-15"><a href="#cb32-15" aria-hidden="true" tabindex="-1"></a><span class="dv">compile:</span></span>
<span id="cb32-16"><a href="#cb32-16" aria-hidden="true" tabindex="-1"></a>  eldev clean elc</span>
<span id="cb32-17"><a href="#cb32-17" aria-hidden="true" tabindex="-1"></a>  eldev -C --unstable -a -dtT compile</span>
<span id="cb32-18"><a href="#cb32-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-19"><a href="#cb32-19" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> lint</span></span>
<span id="cb32-20"><a href="#cb32-20" aria-hidden="true" tabindex="-1"></a><span class="dv">lint:</span></span>
<span id="cb32-21"><a href="#cb32-21" aria-hidden="true" tabindex="-1"></a>  eldev -C --unstable -a -dtT lint</span>
<span id="cb32-22"><a href="#cb32-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-23"><a href="#cb32-23" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> test</span></span>
<span id="cb32-24"><a href="#cb32-24" aria-hidden="true" tabindex="-1"></a><span class="dv">test:</span></span>
<span id="cb32-25"><a href="#cb32-25" aria-hidden="true" tabindex="-1"></a>  eldev exec t</span>
<span id="cb32-26"><a href="#cb32-26" aria-hidden="true" tabindex="-1"></a>  eldev -C --unstable -a -dtT test</span></code></pre></div>
<h1 id="e451afdb-0c27-4ec5-85e2-bfe2048fb9a9" id="org-roam">org-roam</h1>
<p>In addition, I love to build <a href="https://github.com/org-roam/org-roam/">org-roam</a> and <a href="https://github.com/d12frosted/vino">vino</a> databases during bootstrap process, so I don’t spend time on this when I use Emacs. For this I have defined the following function in my <code class="verbatim">lib-vulpea</code> file.</p>
<div class="sourceCode" id="cb33" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="co">;;;###autoload</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-db-build </span>()</span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Update notes database.&quot;</span></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">when</span> (file-directory-p vulpea-directory)</span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>    (org-roam-db-build-cache)))</span></code></pre></div>
<p>Now we can evaluate this function from command line via <code class="verbatim">eldev</code>:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev exec <span class="st">&quot;(vulpea-db-build)&quot;</span></span></code></pre></div>
<p>If you are using <a href="https://github.com/d12frosted/vino">vino</a>, then <code class="verbatim">vulpea-db-build</code> also triggers vino database update, but since it <code class="verbatim">vino-setup</code> happens in <code class="verbatim">after-init-hook</code>, we need to run it before executing <code class="verbatim">vulpea-db-build</code>.</p>
<div class="sourceCode" id="cb35" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">use-package</span> vino</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; unrelated code</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>  :hook ((after-init . vino-setup))</span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; unrelated code</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a>  )</span></code></pre></div>
<p>So we change our <code class="verbatim">eldev</code> command a little bit.</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eldev exec <span class="st">&quot;(progn (run-hooks 'after-init-hook) (vulpea-db-build))&quot;</span></span></code></pre></div>
<p>And we can put that into <code class="verbatim">Makefile</code>.</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> roam</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a><span class="dv">roam:</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a>  eldev exec <span class="st">&quot;(progn (run-hooks 'after-init-hook) (vulpea-db-build))&quot;</span></span></code></pre></div>
<h1 id="89fc2dd2-ee46-4dad-a8fc-c6442b4935e1" id="eru">eru</h1>
<p>And the last yet optional bit of the whole puzzle is <a href="https://github.com/d12frosted/environment#eru-domain">Eru</a>, a script I use to setup and maintain my environment. I have it in my <code class="verbatim">PATH</code>, so I can rely on its might whenever I am. In short, I have the following commands:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eru install emacs <span class="co"># autoloads, compile, lint, roam</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eru upgrade emacs</span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> eru test emacs</span></code></pre></div>
<p>Since Eru is a beast, you might not want to use it, but the core idea here is
that you can create an executable that will glue all things together for you.</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> <span class="at">-e</span></span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a><span class="va">ACTION</span><span class="op">=</span><span class="va">$1</span></span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-7"><a href="#cb39-7" aria-hidden="true" tabindex="-1"></a><span class="va">emacs_d</span><span class="op">=</span><span class="va">$HOME</span>/.config/emacs</span>
<span id="cb39-8"><a href="#cb39-8" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">[[</span> <span class="ot">-d</span> <span class="st">&quot;</span><span class="va">$XDG_CONFIG_HOME</span><span class="st">&quot;</span> <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb39-9"><a href="#cb39-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">emacs_d</span><span class="op">=</span><span class="st">&quot;</span><span class="va">$XDG_CONFIG_HOME</span><span class="st">/emacs&quot;</span></span>
<span id="cb39-10"><a href="#cb39-10" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb39-11"><a href="#cb39-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-12"><a href="#cb39-12" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span><span class="fu"> print_usage()</span> <span class="kw">{</span></span>
<span id="cb39-13"><a href="#cb39-13" aria-hidden="true" tabindex="-1"></a>  <span class="bu">echo</span> <span class="st">&quot;Usage:</span></span>
<span id="cb39-14"><a href="#cb39-14" aria-hidden="true" tabindex="-1"></a><span class="st">  emacs-eru ACTION</span></span>
<span id="cb39-15"><a href="#cb39-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-16"><a href="#cb39-16" aria-hidden="true" tabindex="-1"></a><span class="st">Actions:</span></span>
<span id="cb39-17"><a href="#cb39-17" aria-hidden="true" tabindex="-1"></a><span class="st">  install               Install dependencies, compile and lint configurations</span></span>
<span id="cb39-18"><a href="#cb39-18" aria-hidden="true" tabindex="-1"></a><span class="st">  upgrade               Upgrade dependencies</span></span>
<span id="cb39-19"><a href="#cb39-19" aria-hidden="true" tabindex="-1"></a><span class="st">  test                  Test configurations</span></span>
<span id="cb39-20"><a href="#cb39-20" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;</span></span>
<span id="cb39-21"><a href="#cb39-21" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span>
<span id="cb39-22"><a href="#cb39-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-23"><a href="#cb39-23" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="bu">[</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="va">$ACTION</span><span class="st">&quot;</span> <span class="bu">]</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb39-24"><a href="#cb39-24" aria-hidden="true" tabindex="-1"></a>  <span class="bu">echo</span> <span class="st">&quot;No ACTION is provided&quot;</span></span>
<span id="cb39-25"><a href="#cb39-25" aria-hidden="true" tabindex="-1"></a>  <span class="ex">print_usage</span></span>
<span id="cb39-26"><a href="#cb39-26" aria-hidden="true" tabindex="-1"></a>  <span class="bu">exit</span> 1</span>
<span id="cb39-27"><a href="#cb39-27" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb39-28"><a href="#cb39-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-29"><a href="#cb39-29" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="st">&quot;</span><span class="va">$ACTION</span><span class="st">&quot;</span> <span class="kw">in</span></span>
<span id="cb39-30"><a href="#cb39-30" aria-hidden="true" tabindex="-1"></a>  <span class="ss">install</span><span class="kw">)</span></span>
<span id="cb39-31"><a href="#cb39-31" aria-hidden="true" tabindex="-1"></a>    <span class="bu">cd</span> <span class="st">&quot;</span><span class="va">$emacs_d</span><span class="st">&quot;</span> <span class="kw">&amp;&amp;</span> <span class="kw">{</span></span>
<span id="cb39-32"><a href="#cb39-32" aria-hidden="true" tabindex="-1"></a>      <span class="fu">make</span> bootstrap compile lint roam</span>
<span id="cb39-33"><a href="#cb39-33" aria-hidden="true" tabindex="-1"></a>    <span class="kw">}</span></span>
<span id="cb39-34"><a href="#cb39-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">;;</span></span>
<span id="cb39-35"><a href="#cb39-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-36"><a href="#cb39-36" aria-hidden="true" tabindex="-1"></a>  <span class="ss">upgrade</span><span class="kw">)</span></span>
<span id="cb39-37"><a href="#cb39-37" aria-hidden="true" tabindex="-1"></a>    <span class="bu">cd</span> <span class="st">&quot;</span><span class="va">$emacs_d</span><span class="st">&quot;</span> <span class="kw">&amp;&amp;</span> <span class="kw">{</span></span>
<span id="cb39-38"><a href="#cb39-38" aria-hidden="true" tabindex="-1"></a>      <span class="fu">make</span> upgrade compile lint</span>
<span id="cb39-39"><a href="#cb39-39" aria-hidden="true" tabindex="-1"></a>    <span class="kw">}</span></span>
<span id="cb39-40"><a href="#cb39-40" aria-hidden="true" tabindex="-1"></a>    <span class="cf">;;</span></span>
<span id="cb39-41"><a href="#cb39-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-42"><a href="#cb39-42" aria-hidden="true" tabindex="-1"></a>  <span class="ss">test</span><span class="kw">)</span></span>
<span id="cb39-43"><a href="#cb39-43" aria-hidden="true" tabindex="-1"></a>    <span class="bu">cd</span> <span class="st">&quot;</span><span class="va">$emacs_d</span><span class="st">&quot;</span> <span class="kw">&amp;&amp;</span> <span class="kw">{</span></span>
<span id="cb39-44"><a href="#cb39-44" aria-hidden="true" tabindex="-1"></a>      <span class="fu">make</span> test</span>
<span id="cb39-45"><a href="#cb39-45" aria-hidden="true" tabindex="-1"></a>    <span class="kw">}</span></span>
<span id="cb39-46"><a href="#cb39-46" aria-hidden="true" tabindex="-1"></a>    <span class="cf">;;</span></span>
<span id="cb39-47"><a href="#cb39-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-48"><a href="#cb39-48" aria-hidden="true" tabindex="-1"></a>  <span class="pp">*</span><span class="kw">)</span></span>
<span id="cb39-49"><a href="#cb39-49" aria-hidden="true" tabindex="-1"></a>    <span class="bu">echo</span> <span class="st">&quot;Unrecognized ACTION </span><span class="va">$ACTION</span><span class="st">&quot;</span></span>
<span id="cb39-50"><a href="#cb39-50" aria-hidden="true" tabindex="-1"></a>    <span class="ex">print_usage</span></span>
<span id="cb39-51"><a href="#cb39-51" aria-hidden="true" tabindex="-1"></a>    <span class="cf">;;</span></span>
<span id="cb39-52"><a href="#cb39-52" aria-hidden="true" tabindex="-1"></a><span class="cf">esac</span></span></code></pre></div>
<p>For convenience, this script is available as a <a href="https://gist.github.com/d12frosted/b150fcaaf2de06b1b29af487ebbbf9c1">GitHub Gist</a>, so you can download it, save in somewhere in your <code class="verbatim">PATH</code>, <code class="verbatim">chmod</code> it and use.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> curl <span class="at">-o</span> ~/.local/bin/emacs-eru https://gist.githubusercontent.com/d12frosted/b150fcaaf2de06b1b29af487ebbbf9c1/raw/6fc70215afce2472e4f289c2c8500fbfc9a3f001/emacs-eru</span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> chmod +x ~/.local/bin/emacs-eru</span></code></pre></div>
<h1 id="a3e3f18c-08d9-4fc3-a0fb-2a25455cabf6" id="whats-next">What’s next</h1>
<p>Tinkering with Emacs, of course! This is an endless effort, constant struggle but most importantly, divine pleasure. On a serious note, I would love to cover most critical parts with tests and integrate <a href="https://github.com/emacs-elsa/Elsa">emacs-elsa/Elsa</a> into my flow. And I would love to hear from you, how do you approach safety problem of your <code class="verbatim">emacs.d</code>?</p>
<p>Safe travels!</p>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-04-09-emacs-d.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Retries with straight.el</title>
    <link href="https://d12frosted.io/posts/2021-04-08-straight-el-retries.html" />
    <id>https://d12frosted.io/posts/2021-04-08-straight-el-retries.html</id>
    <published>2021-04-08T00:00:00Z</published>
    <updated>2021-04-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Snippet adding retries to network operations of straight.el - Emacs package manager">
    <meta property="og:title" content="Boris Buliga - Retries with straight.el" />
    <meta property="og:description" content="Snippet adding retries to network operations of straight.el - Emacs package manager" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2021-04-08-straight-el-retries.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Retries with straight.el</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Retries with straight.el</h1>
  <section class="subtitle">
    Posted on April  8, 2021
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>
  </section>
  
  <section>
    <p>We all know, network is unreliable. I love those moments when I decide to
upgrade all my Emacs packages while connected via 3G. And since I am using
<a href="https://github.com/raxod502/straight.el/">raxod502/straight.el</a>, the process requires to process each repository one by
one. Now imagine my frustration, when due to unstable connection it fails on one
of the repositories and I need to start the process again… from the beginning.</p>
<p>So I say, no more, <a href="https://github.com/raxod502/straight.el/">raxod502/straight.el</a> should retry read operations over
network! Unfortunately, there is no such option out of box (or at least I could
not find it). Luckily, it’s Emacs!</p>
<!--more-->

<p>First, we want to configure how many times we want to retry before actually
failing.</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defvar</span><span class="fu"> elpa-straight-retry-count </span><span class="dv">3</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Amount of retries for `straight' operations.&quot;</span>)</span></code></pre></div>
<p>Secondly, we write a ‘generic’ function that simply retries some <code class="verbatim">orig-fn</code>.
It simply evaluates a function, and if it fails, tries again in a <code class="verbatim">while</code> loop.
It doesn’t report intermediate failures, if you wish to, it’s easy to do. But
once it gets to the final error, it signals it back to the user.</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> elpa-straight-with-retry </span>(orig-fn &amp;<span class="kw">rest</span> args)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Wrapper around ORIG-FN supporting retries.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="st">ORIG-FN is called with ARGS and retried</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="st">`elpa-straight-retry-count' times.&quot;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((n elpa-straight-retry-count)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        (res <span class="kw">nil</span>))</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    (while (<span class="op">&gt;</span> n <span class="dv">0</span>)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>      (condition-case err</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">progn</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">setq</span> res (<span class="kw">apply</span> orig-fn args)</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>                  n <span class="dv">0</span>)</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>            res)</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">error</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>         (<span class="kw">setq</span> n (<span class="op">-</span> n <span class="dv">1</span>))</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>         (<span class="kw">unless</span> (<span class="op">&gt;</span> n <span class="dv">0</span>)</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>           (<span class="kw">signal</span> (<span class="kw">car</span> err) (<span class="kw">cdr</span> err))))))))</span></code></pre></div>
<p>Lastly, we need to wrap functions that do some networking. You see, thanks to
<code class="verbatim">advice-add</code>, it’s so easy to do!</p>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(advice-add #'straight-fetch-package</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>            :around</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>            #'elpa-straight-with-retry)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>(advice-add #'straight--clone-repository</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>            :around</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>            #'elpa-straight-with-retry)</span></code></pre></div>
<p>Now you might wonder, is it possible to apply <code class="verbatim">elpa-straight-with-retry</code> to
other functions? Of course! Just give it a better name and enjoy your Emacs life
full of retries.</p>
<p>Safe travels!</p>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-04-08-straight-el-retries.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 6: Select a person and view related tasks</title>
    <link href="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html" />
    <id>https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html</id>
    <published>2021-01-24T00:00:00Z</published>
    <updated>2021-01-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="How to select a person and list all related tasksrelevant files">
    <meta property="og:title" content="Boris Buliga - Task management with org-roam Vol. 6: Select a person and view related tasks" />
    <meta property="og:description" content="How to select a person and list all related tasksrelevant files" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2021-01-24-task-management-with-roam-vol6.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Task management with org-roam Vol. 6: Select a person and view related tasks</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Task management with org-roam Vol. 6: Select a person and view related tasks</h1>
  <section class="subtitle">
    Posted on January 24, 2021
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">#org-roam</a>
  </section>
  
  <section>
    <p>In one of the previous articles (<a href="../posts/2020-06-25-task-management-with-roam-vol3.html">Vol. 3</a> to be precise) we talked about automatic setup of <code class="verbatim">filetags</code>, so each of the task in note related to a person is automatically tagged thanks to <a href="https://orgmode.org/manual/Tag-Inheritance.html">tag inheritance</a>. Then, in <a href="../posts/2020-07-07-task-management-with-roam-vol4.html">Vol. 4</a> we talked about automatic tagging of tasks whenever a person is mentioned either in the title or the body of some task. This all makes <code class="verbatim">org-agenda</code> <a href="https://orgmode.org/manual/Matching-tags-and-properties.html#Matching-tags-and-properties">matching capabilities</a> really useful for when we want to see the list of all tasks related to specific person.</p>
<p>In this article, we are going to write a small utility function that asks user to select a person and then presents and <code class="verbatim">org-agenda</code> buffer with tasks related to selected person.</p>
<p>Believe me, intro is longer than the content!</p>
<video autoplay loop><source src="../images/2021-01-24-task-management-with-roam-vol6/2022-07-19-21-16-52-org-notes-person-agenda.mp4" type="video/mp4"></video>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-03-02 Tue]</code>: Update naming convention to match <a href="https://github.com/d12frosted/environment/tree/master/emacs">personal configurations</a>.</li>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2021-01-24-task-management-with-roam-vol6.org">GitHub</a>.</li>
<li><code>[2022-07-11 Mon]</code>: Adapt code to changes in Org mode and new functions in <code class="verbatim">vulpea</code>. Combination of <code class="verbatim">vulpea-select-from</code> and <code class="verbatim">vulpea-db-query-by-tags-some</code> works faster than generic <code class="verbatim">vulpea-select</code>.</li>
</ul>
<!--more-->

<p>Long story short, here is the function you can bind or call by name using <code class="verbatim">M-x</code>:</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-agenda-person </span>()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Show main `org-agenda' view.&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((person (vulpea-select-from</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>                  <span class="st">&quot;Person&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                  (vulpea-db-query-by-tags-some '(<span class="st">&quot;people&quot;</span>))))</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>         (node (org-roam-node-from-id (vulpea-note-id person)))</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>         (names (<span class="kw">cons</span> (org-roam-node-title node)</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>                      (org-roam-node-aliases node)))</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>         (tags (seq-map #'vulpea--title-to-tag names))</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>         (query (string-join tags <span class="st">&quot;|&quot;</span>)))</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let</span> ((org-agenda-overriding-arguments (<span class="kw">list</span> <span class="kw">t</span> query)))</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>      (org-agenda <span class="kw">nil</span> <span class="st">&quot;M&quot;</span>))))</span></code></pre></div>
<p>Now some explanations.</p>
<ol type="1">
<li>This code uses <a href="https://github.com/d12frosted/vulpea">vulpea</a> library<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> to select a person. You can achieve the same result without <code class="verbatim">vulpea</code>, of course, but it saves some effort. <code class="verbatim">vulpea-select-from</code> asks the use to select a note from a list of notes, returned by <code class="verbatim">vulpea-db-query-by-tags-some</code>. In this case, we simply present only people notes. The same result can be achieved by using <code class="verbatim">vulpea-select</code> that takes a predicate, but <code class="verbatim">vulpea-db-query-by-tags-some</code> works faster. See <a href="https://github.com/d12frosted/vulpea#orgb0b2734">Performance</a> section of <code class="verbatim">vulpea</code> documentation.</li>
<li>Once we have a selected <code class="verbatim">vulpea-note</code>, we can get all titles on that file (e.g. main title and aliases). This is important for alias users. For example, in some notes I want use Mr. Frodo instead of Frodo Baggins, but I want to see tasks tagged as <code class="verbatim">@Mr.Forod</code> and <code class="verbatim">@FrodoBaggins</code> at the same time. It’s the same person after all (don’t ask me about Gollum, better use <code class="verbatim">M-x doctor</code>)!</li>
<li>Now we simply convert those names into tags using <code class="verbatim">vulpea--title-to-tag</code> from <a href="../posts/2020-07-07-task-management-with-roam-vol4.html">Vol. 4</a>.</li>
<li>Then we join the tags using <code class="verbatim">|</code> separator into single query string.</li>
<li>The last step is to execute <code class="verbatim">org-agenda</code> with <code class="verbatim">M</code> argument (match for tags, but list only <code class="verbatim">TODO</code> items). In order to pass a query to relevant agenda function, we use <code class="verbatim">org-agenda-overriding-arguments</code>. Not sure if it’s documented anywhere, but you can read the sources of <code class="verbatim">org-agenda</code> to figure out how to use it. <code class="verbatim">dlet</code> here is used for dynamic binding. If you are not using lexical scope, you can use regular <code class="verbatim">let</code> here.</li>
</ol>
<p>That’s it! Now see it in action, again.</p>
<video autoplay loop><source src="../images/2021-01-24-task-management-with-roam-vol6/2022-07-19-21-16-52-org-notes-person-agenda.mp4" type="video/mp4"></video>
<h1 id="1cb9db63-7bdd-4cf4-808a-419fda15422a" id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol type="1">
<li><a href="../posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="../posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="../posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="../posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="../posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="../posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="../posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="b39705d3-52e9-4b45-85fd-b0b65e8cde40" id="references">References</h1>
<ul>
<li><a href="https://orgmode.org/worg/dev/org-element-api.html">Org Element API</a></li>
<li><a href="https://github.com/skeeto/emacsql">skeeto/emacsql</a></li>
</ul>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Yikes, I advertise my own libraries on this blog!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-01-24-task-management-with-roam-vol6.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 5: Dynamic and fast agenda</title>
    <link href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html" />
    <id>https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html</id>
    <published>2021-01-16T00:00:00Z</published>
    <updated>2021-01-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Dynamically building org-agenda-files with only relevant files">
    <meta property="og:title" content="Boris Buliga - Task management with org-roam Vol. 5: Dynamic and fast agenda" />
    <meta property="og:description" content="Dynamically building org-agenda-files with only relevant files" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Task management with org-roam Vol. 5: Dynamic and fast agenda</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Task management with org-roam Vol. 5: Dynamic and fast agenda</h1>
  <section class="subtitle">
    Posted on January 16, 2021
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">#org-roam</a>
  </section>
  
  <section>
    <p>In previous articles (<a href="../posts/2020-06-23-task-management-with-roam-vol1.html">Vol. 1</a> and <a href="../posts/2020-06-24-task-management-with-roam-vol2.html">Vol. 2</a>) we talked about moving tasks from regular <code class="verbatim">org-mode</code> files to <code class="verbatim">org-roam</code> notes. This relied upon adding all <code class="verbatim">org-roam</code> files to <code class="verbatim">org-agenda-files</code>, which doesn’t scale well, as when you build an agenda buffer, it needs to traverse each file. Once you have more than 1k notes, things become sluggish.</p>
<p>In my experience, once I reached 1200 note files, <code class="verbatim">org-agenda</code> constantly took more than 50 seconds to build, rendering this tool completely useless. But then I realised that only 3% of those files actually contain any <code class="verbatim">TODO</code> entries, so there is no need to traverse whole <code class="verbatim">org-roam-directory</code>!</p>
<p>In this article we are going to optimise <code class="verbatim">org-agenda</code> back to less than 1 second by dynamically building <code class="verbatim">org-agenda-files</code> list to include only files with <code class="verbatim">TODO</code> entries. All thanks to the power of <code class="verbatim">org-roam</code> and some hooks I am going to describe.</p>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-03-02 Tue]</code>: Update naming convention to match <a href="https://github.com/d12frosted/environment/tree/master/emacs">personal configurations</a>.</li>
<li><code>[2021-03-08 Mon]</code>: <a href="https://github.com/Whil-">Gustav</a> shared that <code class="verbatim">org-element-map</code> has an optional parameter <code class="verbatim">first-match</code> that works like <code class="verbatim">seq-find</code>, meaning that <code class="verbatim">vulpea-project-p</code> can be optimised.</li>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2021-01-16-task-management-with-roam-vol5.org">GitHub</a>.</li>
<li><code>[2021-08-19 Thu]</code>: <a href="https://github.com/Whil-">Gustav</a> proposed to modify buffer only when tags have changed. Code was updated accordingly (both in the post and on <a href="https://gist.github.com/d12frosted/a60e8ccb9aceba031af243dff0d19b2e">GitHub Gist</a>).</li>
<li><code>[2021-09-07 Tue]</code>: <a href="https://github.com/rngesus-wept">rngesus-wept</a> proposed an interesting <a href="https://github.com/d12frosted/d12frosted.io/issues/15#issuecomment-910213001">solution</a> on how to make sure that any extra stuff in <code class="verbatim">org-agenda-files</code> are not wiped out.</li>
</ul>
<!--more-->

<p>The core idea is very simple - optimising reads during writes. So every time a file is modified, we check if it contains any <code class="verbatim">TODO</code> entries, and depending on that we either add or remove a <code class="verbatim">project</code> tag from <code class="verbatim">filetags</code> property. And then, before calling <code class="verbatim">org-agenda</code>, we simply <code class="verbatim">org-roam-db-query</code> for files that have a <code class="verbatim">project</code> tag.</p>
<p>Since <code class="verbatim">filetags</code> are <a href="https://orgmode.org/manual/Tag-Inheritance.html">inherited</a> by default (see the value of <code class="verbatim">org-use-tag-inheritance</code>), every heading in your file will inherit <code class="verbatim">project</code> tag, which is not desirable. Since tag inheritance is useful in general, my advice is to disable inheritance specifically for <code class="verbatim">project</code> tag by adding it to <code class="verbatim">org-tags-exclude-from-inheritance</code>:</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(add-to-list 'org-tags-exclude-from-inheritance <span class="st">&quot;project&quot;</span>)</span></code></pre></div>
<p><img src="../images/2021-01-16-task-management-with-roam-vol5/2022-07-19-21-14-37-org-notes-project-tag-update.gif" /></p>
<h1 id="3f2c978b-9937-4985-b1d7-0845e317fa76" id="marking-a-project">Marking a Project</h1>
<p>In order to mark a note as a <code class="verbatim">project</code>, we need to check if it contains any <code class="verbatim">TODO</code> entries. One of the way to do it is to use <a href="https://orgmode.org/worg/dev/org-element-api.html">Org Element API</a>, a set of parsing functions.</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-p </span>()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return non-nil if current buffer has any todo entry.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="st">TODO entries marked as done are ignored, meaning the this</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="st">function returns nil if current buffer contains only completed</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="st">tasks.&quot;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  (org-element-map                          <span class="co">; (2)</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>       (org-element-parse-buffer 'headline) <span class="co">; (1)</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>       'headline</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>     (<span class="kw">lambda</span> (h)</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>       (<span class="kw">eq</span> (org-element-property :todo-type h)</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>           'todo))</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>     <span class="kw">nil</span> 'first-match))                     <span class="co">; (3)</span></span></code></pre></div>
<p>This might look a little bit too much, so let me explain the code step by step.</p>
<ol type="1">
<li>We parse the buffer using <code class="verbatim">org-element-parse-buffer</code>. It returns an abstract syntax tree of the current Org buffer. But sine we care only about headings, we ask it to return only them by passing a <code class="verbatim">GRANULARITY</code> parameter - <code class="verbatim">'headline</code>. This makes things faster.</li>
<li>Then we extract information about <code class="verbatim">TODO</code> keyword from <code class="verbatim">headline</code> AST, which <a href="https://orgmode.org/worg/dev/org-element-api.html#org658999f">contains a property</a> we are interested in - <code class="verbatim">:todo-type</code>, which returns the type of <code class="verbatim">TODO</code> keyword according to <code class="verbatim">org-todo-keywords</code> - <code class="verbatim">'done</code>, <code class="verbatim">'todo</code> or <code class="verbatim">nil</code> (when keyword is not present).</li>
<li>Now all we have to do is to check if the buffer list contains at least one keyword with <code class="verbatim">'todo</code> type. We could use <code class="verbatim">seq=find</code> on the result of <code class="verbatim">org-element-map</code>, but it turns out that it provides an optional <code class="verbatim">first-match</code> argument that can be used for our needs. Thanks <a href="https://github.com/Whil-">Gustav</a> for pointing that out.</li>
</ol>
<p>Now we need to use this function to add or to remove <code class="verbatim">project</code> tag from a note. I think that it should be done in two places - when visiting a note and in <code class="verbatim">before-save-hook</code>. This way you leave no room for missing a file with <code class="verbatim">TODO</code> entries. It uses <a href="https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el#L69">vulpea-buffer-tags-get</a> and <a href="https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el#L79">vulpea-buffer-tags-add</a> from <a href="https://github.com/d12frosted/vulpea">vulpea</a> library (for now you should use <a href="https://github.com/d12frosted/vulpea/pull/92">org-roam-v2 branch</a>).</p>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(add-hook 'find-file-hook #'vulpea-project-update-tag)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>(add-hook 'before-save-hook #'vulpea-project-update-tag)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-update-tag </span>()</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;Update PROJECT tag in the current buffer.&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">when</span> (<span class="kw">and</span> (<span class="kw">not</span> (active-minibuffer-window))</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>                 (vulpea-buffer-p))</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        (save-excursion</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>          (goto-char (point-min))</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">let*</span> ((tags (vulpea-buffer-tags-get))</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>                 (original-tags tags))</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">if</span> (vulpea-project-p)</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>                (<span class="kw">setq</span> tags (<span class="kw">cons</span> <span class="st">&quot;project&quot;</span> tags))</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>              (<span class="kw">setq</span> tags (<span class="kw">remove</span> <span class="st">&quot;project&quot;</span> tags)))</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>            <span class="co">;; cleanup duplicates</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">setq</span> tags (seq-uniq tags))</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>            <span class="co">;; update tags if changed</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">when</span> (<span class="kw">or</span> (seq-difference tags original-tags)</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>                      (seq-difference original-tags tags))</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>              (<span class="kw">apply</span> #'vulpea-buffer-tags-set tags))))))</span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-buffer-p </span>()</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return non-nil if the currently visited buffer is a note.&quot;</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">and</span> buffer-file-name</span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>       (string-prefix-p</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        (expand-file-name (file-name-as-directory org-roam-directory))</span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>        (file-name-directory buffer-file-name))))</span></code></pre></div>
<p>That’s it. Now whenever we modify or visit a notes buffer, this code will update the presence of <code class="verbatim">project</code> tag. See it in action:</p>
<div class="post-image">
<img src="../images/org-notes-project-tag-update.gif" />
</div>

<h1 id="1388e376-45f5-4b43-b172-52e98b240732" id="building-agenda">Building agenda</h1>
<p>In order to dynamically build <code class="verbatim">org-agenda-files</code>, we need to query all files containing <code class="verbatim">project</code> tag. <code class="verbatim">org-roam</code> uses uses <a href="https://github.com/skeeto/emacsql">skeeto/emacsql</a>, and provides a convenient function <code class="verbatim">org-roam-db-query</code> to execute SQL statements against <code class="verbatim">org-roam-db-location</code> file.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-files </span>()</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return a list of note files containing 'project' tag.&quot;</span> <span class="co">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  (seq-uniq</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>   (seq-map</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    #'car</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    (org-roam-db-query</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>     [:select [nodes:file]</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>      :from tags</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>      :left-join nodes</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>      :on (<span class="op">=</span> tags:node-id nodes:id)</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>      :where (like tag (<span class="kw">quote</span> <span class="st">&quot;%</span><span class="sc">\&quot;</span><span class="st">project</span><span class="sc">\&quot;</span><span class="st">%&quot;</span>))]))))</span></code></pre></div>
<p>This function simply returns a list of files containing <code class="verbatim">project</code> tag. Sure enough it can be generalised for other needs, but it’s good enough for our simple use case. The query is run against the following schemes:</p>
<div class="sourceCode" id="cb5" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>(nodes</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a> ([(id :not-null :primary-key)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>   (file :not-null)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>   (level :not-null)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>   (pos :not-null)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>   todo</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>   priority</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>   (scheduled text)</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>   (deadline text)</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>   title</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>   properties</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>   olp]</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  (:foreign-key [file] :references files [file] :on-delete :cascade)))</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>(tags</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a> ([(node-id :not-null)</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>   tag]</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  (:foreign-key [node-id] :references nodes [id] :on-delete :cascade)))</span></code></pre></div>
<p>Now we can set the list of agenda files:</p>
<div class="sourceCode" id="cb6" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-agenda-files (vulpea-project-files))</span></code></pre></div>
<p>But the real question is - when to do it? Some might put it in the <code class="verbatim">init.el</code> file and call it a day, but unless you are restarting Emacs like crazy, I would argue that it’s not the best place to do it. Because we need an up to date list of files exactly when we build agenda.</p>
<div class="sourceCode" id="cb7" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-agenda-files-update </span>(&amp;<span class="kw">rest</span> _)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Update the value of `org-agenda-files'.&quot;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">setq</span> org-agenda-files (vulpea-project-files)))</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>(advice-add 'org-agenda :before #'vulpea-agenda-files-update)</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>(advice-add 'org-todo-list :before #'vulpea-agenda-files-update)</span></code></pre></div>
<p>And that’s all. You <code class="verbatim">org-agenda</code> is up to date and fast again!</p>
<h1 id="c84864d3-e6c3-488b-a783-26869541227c" id="migration">Migration</h1>
<p>So far we covered what to do with notes we edit. But when you have more than 10 notes it becomes tedious to visit each of them and make sure that they have update state of <code class="verbatim">Project</code> tag. Fortunately, this task is easily automated.</p>
<div class="sourceCode" id="cb8" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">dolist</span> (file (org-roam-list-files))</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  (message <span class="st">&quot;processing %s&quot;</span> file)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  (with-current-buffer (<span class="kw">or</span> (find-buffer-visiting file)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>                           (find-file-noselect file))</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    (vulpea-project-update-tag)</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    (save-buffer)))</span></code></pre></div>
<p>This will visit each of your files and update the presence of <code class="verbatim">Project</code> tag
according to presence of <code class="verbatim">TODO</code> entry. Now you are ready to go.</p>
<h1 id="82ee42b2-c69a-4e4f-98c0-1688dc4d4f65" id="result">Result</h1>
<p>With little amount of <code class="verbatim">emacs-lisp</code> code we dramatically optimized <code class="verbatim">org-agenda</code> loading from <span class="math inline"> &gt; 50</span> seconds to <span class="math inline"> &lt; 1</span> second. Effectiveness of this approach depends on amount of files with <code class="verbatim">TODO</code> entries (the more you have, the less effective this approach becomes). One of the drawbacks is small (in my experience, neglectable) performance degradation of note visiting and note saving. Obviously, if a file contains thousands of headings, it affects performance. In defence, I would argue that such files are against the philosophy of <code class="verbatim">org-roam</code>, where you keep lots of small files as opposed to few huge files.</p>
<p>For you convenience, the full code is displayed below. It is also available as <a href="https://gist.github.com/d12frosted/a60e8ccb9aceba031af243dff0d19b2e">GitHub Gist</a>.</p>
<div class="sourceCode" id="cb9" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-p </span>()</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return non-nil if current buffer has any todo entry.</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="st">TODO entries marked as done are ignored, meaning the this</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="st">function returns nil if current buffer contains only completed</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="st">tasks.&quot;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  (seq-find                                 <span class="co">; (3)</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>   (<span class="kw">lambda</span> (<span class="kw">type</span>)</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>     (<span class="kw">eq</span> <span class="kw">type</span> 'todo))</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>   (org-element-map                         <span class="co">; (2)</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>       (org-element-parse-buffer 'headline) <span class="co">; (1)</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>       'headline</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>     (<span class="kw">lambda</span> (h)</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>       (org-element-property :todo-type h)))))</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-update-tag </span>()</span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;Update PROJECT tag in the current buffer.&quot;</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (<span class="kw">and</span> (<span class="kw">not</span> (active-minibuffer-window))</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>               (vulpea-buffer-p))</span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>      (save-excursion</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>        (goto-char (point-min))</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">let*</span> ((tags (vulpea-buffer-tags-get))</span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>               (original-tags tags))</span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">if</span> (vulpea-project-p)</span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>              (<span class="kw">setq</span> tags (<span class="kw">cons</span> <span class="st">&quot;project&quot;</span> tags))</span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">setq</span> tags (<span class="kw">remove</span> <span class="st">&quot;project&quot;</span> tags)))</span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; cleanup duplicates</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">setq</span> tags (seq-uniq tags))</span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a>          <span class="co">;; update tags if changed</span></span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">when</span> (<span class="kw">or</span> (seq-difference tags original-tags)</span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a>                    (seq-difference original-tags tags))</span>
<span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">apply</span> #'vulpea-buffer-tags-set tags))))))</span>
<span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-36"><a href="#cb9-36" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-buffer-p </span>()</span>
<span id="cb9-37"><a href="#cb9-37" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return non-nil if the currently visited buffer is a note.&quot;</span></span>
<span id="cb9-38"><a href="#cb9-38" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">and</span> buffer-file-name</span>
<span id="cb9-39"><a href="#cb9-39" aria-hidden="true" tabindex="-1"></a>       (string-prefix-p</span>
<span id="cb9-40"><a href="#cb9-40" aria-hidden="true" tabindex="-1"></a>        (expand-file-name (file-name-as-directory org-roam-directory))</span>
<span id="cb9-41"><a href="#cb9-41" aria-hidden="true" tabindex="-1"></a>        (file-name-directory buffer-file-name))))</span>
<span id="cb9-42"><a href="#cb9-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-43"><a href="#cb9-43" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-project-files </span>()</span>
<span id="cb9-44"><a href="#cb9-44" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;Return a list of note files containing 'project' tag.&quot;</span> <span class="co">;</span></span>
<span id="cb9-45"><a href="#cb9-45" aria-hidden="true" tabindex="-1"></a>    (seq-uniq</span>
<span id="cb9-46"><a href="#cb9-46" aria-hidden="true" tabindex="-1"></a>     (seq-map</span>
<span id="cb9-47"><a href="#cb9-47" aria-hidden="true" tabindex="-1"></a>      #'car</span>
<span id="cb9-48"><a href="#cb9-48" aria-hidden="true" tabindex="-1"></a>      (org-roam-db-query</span>
<span id="cb9-49"><a href="#cb9-49" aria-hidden="true" tabindex="-1"></a>       [:select [nodes:file]</span>
<span id="cb9-50"><a href="#cb9-50" aria-hidden="true" tabindex="-1"></a>        :from tags</span>
<span id="cb9-51"><a href="#cb9-51" aria-hidden="true" tabindex="-1"></a>        :left-join nodes</span>
<span id="cb9-52"><a href="#cb9-52" aria-hidden="true" tabindex="-1"></a>        :on (<span class="op">=</span> tags:node-id nodes:id)</span>
<span id="cb9-53"><a href="#cb9-53" aria-hidden="true" tabindex="-1"></a>        :where (like tag (<span class="kw">quote</span> <span class="st">&quot;%</span><span class="sc">\&quot;</span><span class="st">project</span><span class="sc">\&quot;</span><span class="st">%&quot;</span>))]))))</span>
<span id="cb9-54"><a href="#cb9-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-55"><a href="#cb9-55" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-agenda-files-update </span>(&amp;<span class="kw">rest</span> _)</span>
<span id="cb9-56"><a href="#cb9-56" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Update the value of `org-agenda-files'.&quot;</span></span>
<span id="cb9-57"><a href="#cb9-57" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">setq</span> org-agenda-files (vulpea-project-files)))</span>
<span id="cb9-58"><a href="#cb9-58" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-59"><a href="#cb9-59" aria-hidden="true" tabindex="-1"></a>(add-hook 'find-file-hook #'vulpea-project-update-tag)</span>
<span id="cb9-60"><a href="#cb9-60" aria-hidden="true" tabindex="-1"></a>(add-hook 'before-save-hook #'vulpea-project-update-tag)</span>
<span id="cb9-61"><a href="#cb9-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-62"><a href="#cb9-62" aria-hidden="true" tabindex="-1"></a>(advice-add 'org-agenda :before #'vulpea-agenda-files-update)</span>
<span id="cb9-63"><a href="#cb9-63" aria-hidden="true" tabindex="-1"></a>(advice-add 'org-todo-list :before #'vulpea-agenda-files-update)</span></code></pre></div>
<p>Thank you for your patience.</p>
<h1 id="2f8ad16f-05ef-406e-8783-55cba1050e60" id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol type="1">
<li><a href="../posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="../posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="../posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="../posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="../posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="../posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="../posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="6b7c1ffb-61e8-4e39-8a70-7d47f9ce829c" id="references">References</h1>
<ul>
<li><a href="https://orgmode.org/worg/dev/org-element-api.html">Org Element API</a></li>
<li><a href="https://github.com/skeeto/emacsql">skeeto/emacsql</a></li>
<li>Code from this article is available as <a href="https://gist.github.com/d12frosted/a60e8ccb9aceba031af243dff0d19b2e">GitHub Gist</a></li>
</ul>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2021-01-16-task-management-with-roam-vol5.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 4: Automatic tagging</title>
    <link href="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html" />
    <id>https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html</id>
    <published>2020-07-07T00:00:00Z</published>
    <updated>2020-07-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Automatic tagging upon link insertion">
    <meta property="og:title" content="Boris Buliga - Task management with org-roam Vol. 4: Automatic tagging" />
    <meta property="og:description" content="Automatic tagging upon link insertion" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2020-07-07-task-management-with-roam-vol4.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Task management with org-roam Vol. 4: Automatic tagging</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Task management with org-roam Vol. 4: Automatic tagging</h1>
  <section class="subtitle">
    Posted on July  7, 2020
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">#org-roam</a>
  </section>
  
  <section>
    <p>In the <a href="../posts/2020-06-25-task-management-with-roam-vol3.html">previous article</a> we covered automatic tagging of notes related to a specific person, and today we are going to cover automatic tagging of an org-mode heading upon insertion of link related to a person. To put it simple, when I mention someone in the task, I would love this task to be automatically tagged with that persons name. As they say, it’s better to see once, than imagine multiple times, so here is a screencast.</p>
<p><img src="../images/2020-07-07-task-management-with-roam-vol4/2022-07-19-21-13-09-org-notes-insert.gif" /></p>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-01-24 Sun]</code>: Since some of the functionality mentioned in the original article was merged to <code class="verbatim">org-roam</code>, all code is updated to reflect the current state of affairs.</li>
<li><code>[2021-03-02 Tue]</code>: Update naming convention to match <a href="https://github.com/d12frosted/environment/tree/master/emacs">personal configurations</a>.</li>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2020-07-07-task-management-with-roam-vol4.org">GitHub</a>.</li>
<li><code>[2021-11-19 Fri]</code>: Update post to reflect <a href="https://github.com/d12frosted/vulpea/commit/8ff428f2e9561fdc448627fe780be03a661cc52e">inclusion</a> of <code class="verbatim">vulpea-insert</code> function to <code class="verbatim">vulpea</code> library. You can find previous version of this article in <a href="https://github.com/d12frosted/d12frosted.io/blob/2d3dad81988e838b8159761cd420bb95ed5bdd83/posts/2020-07-07-task-management-with-roam-vol4.org">git history</a>.</li>
</ul>
<!--more-->

<p>Once could just write an advice for <code class="verbatim">org-roam-node-insert</code> by using a relatively recent <a href="https://github.com/org-roam/org-roam/pull/839">change</a> that makes this function to return what was inserted. This also uses name manipulation from the <a href="../posts/2020-06-25-task-management-with-roam-vol3.html">previous article</a> and tags lookup from <a href="../posts/2020-06-10-org-roam-tags.html">Org-roam tags</a> article.</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> org-roam-node-insert-wrapper </span>(fn)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Insert a link to the note using FN.</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="st">If inserted node has PEOPLE tag on it, tag the current outline</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="st">accordingly.&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  (when-let*</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>      ((node (<span class="kw">funcall</span> fn))</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>       (title (org-roam-node-title node))</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>       (tags (org-roam-node-tags node)))</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (seq-contains-p tags <span class="st">&quot;people&quot;</span>)</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>      (save-excursion</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">ignore-errors</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>          (org-back-to-heading)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>          (org-set-tags</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>           (seq-uniq</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">cons</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>             (vulpea--title-to-tag title)</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>             (org-get-tags <span class="kw">nil</span> <span class="kw">t</span>)))))))))</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>(advice-add</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a> #'org-roam-node-insert</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a> :around</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a> #'org-roam-node-insert-wrapper)</span></code></pre></div>
<p>The implementation is straight-forward. We start with calling <code class="verbatim">fn</code> (e.g. <code class="verbatim">org-roam-node-insert</code>) that asks for the note to insert. Then we parse result and query the roam tags to understand if the inserted note is related to a person. And if the answer is yes, we use <code class="verbatim">org-set-tags</code> to automatically tag the heading.</p>
<p>And while advicing is powerful tool and allows us to solve the problem, there is slightly different, less intrusive and composable solution provided by <code class="verbatim">vulpea</code> library - <code class="verbatim">vulpea-insert</code> function that acts like <code class="verbatim">org-roam-node-insert</code>, but provides ability setup hooks on insertion. First, we define a handler (pretty much the same as <code class="verbatim">org-roam-node-insert-wrapper</code> but without any calls to insertion function).</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> my-vulpea-insert-handle </span>(note)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Hook to be called on NOTE after `vulpea-insert'.&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  (when-let* ((title (vulpea-note-title note))</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>              (tags (vulpea-note-tags note)))</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (seq-contains-p tags <span class="st">&quot;people&quot;</span>)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>      (save-excursion</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">ignore-errors</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>          (org-back-to-heading)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">when</span> (<span class="kw">eq</span> 'todo (org-element-property</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>                           :todo-type</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>                           (org-element-at-point)))</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>            (org-set-tags</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>             (seq-uniq</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>              (<span class="kw">cons</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>               (vulpea--title-to-tag title)</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>               (org-get-tags <span class="kw">nil</span> <span class="kw">t</span>))))))))))</span></code></pre></div>
<p>And then you just need to add it as a hook:</p>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(add-hook 'vulpea-insert-handle-functions</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>          #'my-vulpea-insert-handle)</span></code></pre></div>
<p>With this approach you can add as many handlers as you wish without the need to grow your advice/wrapper too much.</p>
<h1 id="614f7140-bcc1-46db-b454-97e381b88257" id="complete-solution">Complete solution</h1>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> my-vulpea-insert-handle </span>(note)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Hook to be called on NOTE after `vulpea-insert'.&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  (when-let* ((title (vulpea-note-title note))</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>              (tags (vulpea-note-tags note)))</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (seq-contains-p tags <span class="st">&quot;people&quot;</span>)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>      (save-excursion</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">ignore-errors</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>          (org-back-to-heading)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">when</span> (<span class="kw">eq</span> 'todo (org-element-property</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>                           :todo-type</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>                           (org-element-at-point)))</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>            (org-set-tags</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>             (seq-uniq</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>              (<span class="kw">cons</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>               (vulpea--title-to-tag title)</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>               (org-get-tags <span class="kw">nil</span> <span class="kw">t</span>))))))))))</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea--title-to-tag </span>(title)</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Convert TITLE to tag.&quot;</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>  (concat <span class="st">&quot;@&quot;</span> (s-replace <span class="st">&quot; &quot;</span> <span class="st">&quot;&quot;</span> title)))</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>(add-hook 'vulpea-insert-handle-functions</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>          #'my-vulpea-insert-handle)</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
<h1 id="88d27bea-d629-4b1d-a0b1-0658ac23d1fd" id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol type="1">
<li><a href="../posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="../posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="../posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="../posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="../posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="../posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="../posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="e1c65c7f-db37-473b-ae57-2ea12e2b2aa5" id="references">References</h1>
<ul>
<li><code class="verbatim">org-roam</code> documentation on <a href="https://github.com/org-roam/org-roam">GitHub</a>.</li>
<li><code class="verbatim">org-mode</code> documentation on the <a href="https://orgmode.org">official site</a>.</li>
<li><a href="../posts/2020-06-10-org-roam-tags.html">Org-roam tags</a> post.</li>
<li>personal configurations on <a href="https://github.com/d12frosted/environment/blob/master/emacs/lisp/%2Borg-notes.el">GitHub</a>.</li>
</ul>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-07-07-task-management-with-roam-vol4.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 3: FILETAGS</title>
    <link href="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html" />
    <id>https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html</id>
    <published>2020-06-25T00:00:00Z</published>
    <updated>2020-06-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Automatic FILETAGS application in org-roam">
    <meta property="og:title" content="Boris Buliga - Task management with org-roam Vol. 3: FILETAGS" />
    <meta property="og:description" content="Automatic FILETAGS application in org-roam" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Task management with org-roam Vol. 3: FILETAGS</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Task management with org-roam Vol. 3: FILETAGS</h1>
  <section class="subtitle">
    Posted on June 25, 2020
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">#org-roam</a>
  </section>
  
  <section>
    <p>In the previous articles (<a href="../posts/2020-06-23-task-management-with-roam-vol1.html">Vol. 1</a> and <a href="../posts/2020-06-24-task-management-with-roam-vol2.html">Vol. 2</a>) we walked the path to <a href="https://github.com/org-roam/org-roam">org-roam</a> and solved the issue with garbage in the category column of agenda. Today we are going to explore meta projects dedicated to specific person, tag inheritance and moving such projects to separate <code class="verbatim">org-roam</code> files. As result, we will have code for automatic tagging based on the title.</p>
<p>Aside from regular meta projects (like personal blog) I also create meta projects for people and locations. This is helpful, because some of the tasks are really related to someone specifically. For example, when I need to return a borrowed book, I just create a task for this.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode org"><code class="sourceCode orgmode"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">* Frodo Baggins                                               :@FrodoBaggins:</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> Return 'The Lord of the Rings' book</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> Farewell party                                             :PROJECT:</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>It feels like Mr. Frodo is about to live Shire. So we are going to setup a</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>farewell party for him.</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Talk to Samwise Gamgee                            :@SamwiseGamgee:</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Talk to Meriadoc Brandybuck                  :@MeriadocBrandybuck:</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Talk to Peregrin Took                              :@PeregrinTook:</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Tie a pair of wool socks</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>I am not sure where he is going, so a pair of warm wool socks should be good.</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>At least they can be used to protect bottles of wine during journey. That is in</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>case Frodo doesn't wear socks. But how could it be? Everyone does!</span></code></pre></div>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-01-24 Sun]</code>: Since some of the functionality mentioned in the original article was merged to <code class="verbatim">org-roam</code>, all code is updated to reflect the current state of affairs.</li>
<li><code>[2021-03-02 Tue]</code>: Update naming convention to match <a href="https://github.com/d12frosted/environment/tree/master/emacs">personal configurations</a>.</li>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2020-06-25-task-management-with-roam-vol3.org">GitHub</a>.</li>
</ul>
<!--more-->

<p>Now, apart from some misconception about hobbits, there are few important points to note.</p>
<ol type="1">
<li>Due to <a href="https://orgmode.org/manual/Tag-Inheritance.html">tags inheritance</a>, all of the subheadings of <code class="verbatim">Frodo Baggins</code> have <code class="verbatim">@FrodoBaggins</code> tag.</li>
<li>Tasks tagged with other people also have the <code class="verbatim">@FrodoBaggins</code> tag.</li>
</ol>
<p>Thanks to inheritance, it’s easy to find all tasks related to Frodo Baggins via <code class="verbatim">org-agenda</code>. It even enables the search of overlapping tasks. For example, tasks related to Frodo and Samwise. For more information, take a look at the <a href="https://orgmode.org/manual/Matching-tags-and-properties.html#Matching-tags-and-properties">matching tags and properties</a> section of the manual.</p>
<p><img src="../images/2020-06-25-task-management-with-roam-vol3/2022-07-19-21-11-07-org-roam-task-management-vol3-2.webp" class="img-half img-float-left" /></p>
<p><img src="../images/2020-06-25-task-management-with-roam-vol3/2022-07-19-21-11-07-org-roam-task-management-vol3-1.webp" class="img-half img-float-right" /></p>
<p>With <code class="verbatim">org-roam</code>, each person has its own file.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode org"><code class="sourceCode orgmode"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>#+title: Frodo Baggins</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>#+filetags: @FrodoBaggins people</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="fu">* Tasks</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> Return 'The Lord of the Rings' book</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> Farewell party                                             :PROJECT:</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>It feels like Mr. Frodo is about to live Shire. So we are going to setup a</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>farewell party for him.</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Talk to Samwise Gamgee                            :@SamwiseGamgee:</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Talk to Meriadoc Brandybuck                  :@MeriadocBrandybuck:</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Talk to Peregrin Took                              :@PeregrinTook:</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Tie a pair of wool socks</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>I am not sure where he is going, so a pair of warm wool socks should be good.</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>At least they can be used to protect bottles of wine during journey. That is in</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>case Frodo doesn't wear socks. But how could it be? Everyone does!</span></code></pre></div>
<p>In order to maintain the feature where <code class="verbatim">@FrodoBaggins</code> tag is applied to all TODO items we have to use <code class="verbatim">filetags</code> property. I am also using id to mark Frodo Baggins as a person (even though he is a hobbit!). This helps me in two ways. First of all, it gives me clear understanding that this entity is a person (some people do have strange names). Secondly, it serves me in automation and filtering (as example, checkout <a href="../posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a> post).</p>
<p>Now, when I see a headline with title and tag being literally the same (with few programmable exceptions) or the file with <code class="verbatim">title</code> and <code class="verbatim">filetags</code> being the same (with few programmable exceptions), I am feeling nervous. Especially since I am prone to mistakes.</p>
<p>So what I do - I automate <code class="verbatim">filetags</code>. I have a function <code class="verbatim">vulpea-ensure-filetag</code> which automatically sets the <code class="verbatim">filetags</code> buffer property for <code class="verbatim">org-roam</code> entries tagged as <code class="verbatim">people</code>. It uses <a href="https://github.com/d12frosted/vulpea/blob/feature/org-roam-v2/vulpea.el#L183">vulpea-buffer-tags-get</a> and <a href="https://github.com/d12frosted/vulpea/blob/feature/org-roam-v2/vulpea.el#L193">vulpea-buffer-tags-add</a> from <a href="https://github.com/d12frosted/vulpea">vulpea</a> library.</p>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-ensure-filetag </span>()</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Add respective file tag if it's missing in the current note.&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((tags (vulpea-buffer-tags-get))</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        (tag (vulpea--title-as-tag)))</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (<span class="kw">and</span> (seq-contains-p tags <span class="st">&quot;people&quot;</span>)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>               (<span class="kw">not</span> (seq-contains-p tags tag)))</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      (vulpea-buffer-tags-add tag))))</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea--title-as-tag </span>()</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return title of the current note as tag.&quot;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  (vulpea--title-to-tag (vulpea-buffer-title-get)))</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea--title-to-tag </span>(title)</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Convert TITLE to tag.&quot;</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>  (concat <span class="st">&quot;@&quot;</span> (s-replace <span class="st">&quot; &quot;</span> <span class="st">&quot;&quot;</span> title)))</span></code></pre></div>
<p>This function can be called interactively, but since I usually place the tag using <code class="verbatim">vulpea-tags-add</code>, I just add the <code class="verbatim">vulpea-ensure-filetag</code> to the end of that function.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-tags-add </span>()</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Add a tag to current note.&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; since https://github.com/org-roam/org-roam/pull/1515</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; `org-roam-tag-add' returns added tag, we could avoid reading tags</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; in `vulpea-ensure-filetag', but this way it can be used in</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; different contexts while having simple implementation.</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">when</span> (call-interactively #'org-roam-tag-add)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    (vulpea-ensure-filetag)))</span></code></pre></div>
<p>Though for other purposes one can put this function to the file visit hook. But hooks are sensitive, so I am going to stop here.</p>
<p>In the <a href="../posts/2020-07-07-task-management-with-roam-vol4.html">next article</a> we are going to talk about automatic insertion of person tag (e.g. <code class="verbatim">@FrodoBaggins</code>) when mentioning this person in other task.</p>
<h1 id="acfa02d9-4213-4050-8093-10dcc1e6aea1" id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol type="1">
<li><a href="../posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="../posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="../posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="../posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="../posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="../posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="../posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="1bb4536b-4b35-490c-b8c4-d0aeeef34784" id="references">References</h1>
<ul>
<li><code class="verbatim">org-roam</code> documentation on <a href="https://github.com/org-roam/org-roam">GitHub</a>.</li>
<li><code class="verbatim">org-mode</code> documentation on the <a href="https://orgmode.org">official site</a>.</li>
<li>Org-roam tags <a href="../posts/2020-06-10-org-roam-tags.html">post</a>.</li>
<li>personal configurations on <a href="https://github.com/d12frosted/environment/blob/master/emacs/lisp/%2Borg-notes.el">GitHub</a>.</li>
</ul>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-06-25-task-management-with-roam-vol3.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 2: Categories</title>
    <link href="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html" />
    <id>https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html</id>
    <published>2020-06-24T00:00:00Z</published>
    <updated>2020-06-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Automatic category extraction from org-roam">
    <meta property="og:title" content="Boris Buliga - Task management with org-roam Vol. 2: Categories" />
    <meta property="og:description" content="Automatic category extraction from org-roam" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Task management with org-roam Vol. 2: Categories</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Task management with org-roam Vol. 2: Categories</h1>
  <section class="subtitle">
    Posted on June 24, 2020
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">#org-roam</a>
  </section>
  
  <section>
    <p>In the <a href="../posts/2020-06-23-task-management-with-roam-vol1.html">previous article</a> we set a ground for moving tasks to <a href="https://github.com/org-roam/org-roam">org-roam</a>, and encountered an issue with visual garbage in the agenda buffer. Namely, <code class="verbatim">org-roam</code> file id as part of the category. In this article, we are going to explore the means to overcome this issue.</p>
<p><img src="../images/2020-06-24-task-management-with-roam-vol2/2022-07-19-21-08-14-org-roam-task-management-vol2-1.webp" class="img-half img-float-left" /></p>
<p><img src="../images/2020-06-24-task-management-with-roam-vol2/2022-07-19-21-08-14-org-roam-task-management-vol2-2.webp" class="img-half img-float-right" /></p>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-03-02 Tue]</code>: Update category extraction function to use <code class="verbatim">TITLE</code> of the note and enforce length limit. Kudos to <a href="https://github.com/real-or-random/">Tim Ruffing</a> for the idea.</li>
<li><code>[2021-03-02 Tue]</code>: Update naming convention to match <a href="https://github.com/d12frosted/environment/tree/master/emacs">personal configurations</a>.</li>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2020-06-24-task-management-with-roam-vol2.org">GitHub</a>.</li>
</ul>
<!--more-->

<p>On of the simplest solutions is to mimic solution for headlines by setting <code class="verbatim">CATEGORY</code> property on the file level (manually or by using <code class="verbatim">org-set-property</code>).</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode org"><code class="sourceCode orgmode"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>:PROPERTIES:</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>:CATEGORY:               emacs-plus</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>:END:</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>#+title: emacs-plus</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>...</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode org"><code class="sourceCode orgmode"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>:PROPERTIES:</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>:CATEGORY:               blog</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>:END:</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>#+title: Blog</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>...</span></code></pre></div>
<p><img src="../images/2020-06-24-task-management-with-roam-vol2/2022-07-19-21-08-37-org-roam-task-management-vol2-2.webp" /></p>
<p>While this works, it is a manual labor. And in most cases we want to use <code class="verbatim">TITLE</code> as <code class="verbatim">CATEGORY</code>, at least for agenda buffer. Fortunately, we can help agenda to properly parse the category by modifying the value of <code class="verbatim">org-agenda-prefix-format</code>, which allows to specify how to render each line in the different agenda buffers (e.g. regular agenda, in the list of todo tasks etc). We are looking for the capability to evaluate arbitrary lisp expressions. The default value of this variable is</p>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>((agenda . <span class="st">&quot; %i %-12:c%?-12t% s&quot;</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a> (todo . <span class="st">&quot; %i %-12:c&quot;</span>)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a> (tags . <span class="st">&quot; %i %-12:c&quot;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a> (<span class="kw">search</span> . <span class="st">&quot; %i %-12:c&quot;</span>))</span></code></pre></div>
<p>The interesting part is <code class="verbatim">%-12:c</code> which means:</p>
<ul>
<li>Give the category (because of <code class="verbatim">c</code>) a 12 chars wide field, padded with whitespace on the right (because of <code class="verbatim">-</code>).</li>
<li>Append a colon if there is a category (because of <code class="verbatim">:</code>).</li>
<li>Finally, append the category of the item, or as given by the <code class="verbatim">CATEGORY</code> property, or derived from the file name.</li>
</ul>
<p>Instead of <code class="verbatim">c</code> we can use any expression.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-agenda-prefix-format</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>      '((agenda . <span class="st">&quot; %i %-12(vulpea-agenda-category)%?-12t% s&quot;</span>)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        (todo . <span class="st">&quot; %i %-12(vulpea-agenda-category) &quot;</span>)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        (tags . <span class="st">&quot; %i %-12(vulpea-agenda-category) &quot;</span>)</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">search</span> . <span class="st">&quot; %i %-12(vulpea-agenda-category) &quot;</span>)))</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-agenda-category </span>()</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Get category of item at point for agenda.</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="st">Category is defined by one of the following items:</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="st">- CATEGORY property</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="st">- TITLE keyword</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="st">- TITLE property</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="st">- filename without directory and extension</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="st">Usage example:</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="st">  (setq org-agenda-prefix-format</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a><span class="st">        '((agenda . </span><span class="sc">\&quot;</span><span class="st"> %(vulpea-agenda-category) %?-12t %12s</span><span class="sc">\&quot;</span><span class="st">)))</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="st">Refer to `org-agenda-prefix-format' for more information.&quot;</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((file-name (<span class="kw">when</span> buffer-file-name</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>                      (file-name-sans-extension</span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>                       (file-name-nondirectory buffer-file-name))))</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>         (title (vulpea-buffer-prop-get <span class="st">&quot;title&quot;</span>))</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>         (category (org-get-category)))</span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">or</span> (<span class="kw">if</span> (<span class="kw">and</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>             title</span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>             (<span class="kw">string-equal</span> category file-name))</span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>            title</span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>          category)</span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;&quot;</span>)))</span></code></pre></div>
<p>In order to extract title, I am using <code class="verbatim">vulpea-buffer-prop-get</code> from <a href="https://github.com/d12frosted/vulpea">vulpea</a> library. It’s <a href="https://github.com/d12frosted/vulpea/blob/feature/org-roam-v2/vulpea.el#L239">defined</a> as:</p>
<div class="sourceCode" id="cb5" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-buffer-prop-get </span>(name)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Get a buffer property called NAME as a string.&quot;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  (org-with-point-at <span class="dv">1</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (re-search-forward (concat <span class="st">&quot;^</span><span class="ch">#\\</span><span class="st">+&quot;</span> name <span class="st">&quot;: </span><span class="sc">\\</span><span class="st">(.*</span><span class="sc">\\</span><span class="st">)&quot;</span>)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>                             (point-max) <span class="kw">t</span>)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>      (buffer-substring-no-properties</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>       (match-beginning <span class="dv">1</span>)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>       (match-end <span class="dv">1</span>)))))</span></code></pre></div>
<p><img src="../images/2020-06-24-task-management-with-roam-vol2/2022-07-19-21-08-55-org-roam-task-management-vol2-3.webp" /></p>
<p>Now if we remove the manually set <code class="verbatim">CATEGORY</code> property from both files we will get the same result with nicely parsed categories. Please note that these two approaches can be mixed. For example, if you wish to override the category, just set this property explicitly and call it a day.</p>
<p>Additionally, it’s easy to extend this function to truncate overly long categories (in the screenshot above, <code class="verbatim">Some project with ridiculously long title</code> and <code class="verbatim">Frodo Baggins</code> are examples of long categories). We will use <a href="https://github.com/magnars/s.el">s.el</a> library to achieve this.</p>
<div class="sourceCode" id="cb6" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">setq</span> org-agenda-prefix-format</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>      '((agenda . <span class="st">&quot; %i %(vulpea-agenda-category 12)%?-12t% s&quot;</span>)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>        (todo . <span class="st">&quot; %i %(vulpea-agenda-category 12) &quot;</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>        (tags . <span class="st">&quot; %i %(vulpea-agenda-category 12) &quot;</span>)</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">search</span> . <span class="st">&quot; %i %(vulpea-agenda-category 12) &quot;</span>)))</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> vulpea-agenda-category </span>(&amp;optional len)</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Get category of item at point for agenda.</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="st">Category is defined by one of the following items:</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="st">- CATEGORY property</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="st">- TITLE keyword</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="st">- TITLE property</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="st">- filename without directory and extension</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="st">When LEN is a number, resulting string is padded right with</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="st">spaces and then truncated with ... on the right if result is</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="st">longer than LEN.</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="st">Usage example:</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="st">  (setq org-agenda-prefix-format</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="st">        '((agenda . </span><span class="sc">\&quot;</span><span class="st"> %(vulpea-agenda-category) %?-12t %12s</span><span class="sc">\&quot;</span><span class="st">)))</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a><span class="st">Refer to `org-agenda-prefix-format' for more information.&quot;</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((file-name (<span class="kw">when</span> buffer-file-name</span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a>                      (file-name-sans-extension</span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>                       (file-name-nondirectory buffer-file-name))))</span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>         (title (vulpea-buffer-prop-get <span class="st">&quot;title&quot;</span>))</span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a>         (category (org-get-category))</span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>         (result</span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">or</span> (<span class="kw">if</span> (<span class="kw">and</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>                   title</span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a>                   (<span class="kw">string-equal</span> category file-name))</span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a>                  title</span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a>                category)</span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot;&quot;</span>)))</span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">if</span> (<span class="kw">numberp</span> len)</span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a>        (s-truncate len (s-pad-right len <span class="st">&quot; &quot;</span> result))</span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a>      result)))</span></code></pre></div>
<p><img src="../images/2020-06-24-task-management-with-roam-vol2/2022-07-19-21-09-09-org-roam-task-management-vol2-4.webp" /></p>
<p>Now the agenda is clean.</p>
<p>In the <a href="../posts/2020-06-25-task-management-with-roam-vol3.html">next article</a> we are going to talk about tagging tasks related to a person. Stay tuned and keep roaming!</p>
<h1 id="f6e0ff03-10cd-48cd-a761-b2e2dcf0440f" id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol type="1">
<li><a href="../posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="../posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="../posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="../posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="../posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="../posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="../posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="c2fc5175-d329-4c50-8bfd-2f283ab77a2c" id="references">References</h1>
<ul>
<li><code class="verbatim">org-roam</code> documentation on <a href="https://github.com/org-roam/org-roam">GitHub</a>.</li>
<li><code class="verbatim">org-mode</code> documentation on the <a href="https://orgmode.org">official site</a>.</li>
<li>personal configurations on <a href="https://github.com/d12frosted/environment/blob/master/emacs/lisp/%2Borg-notes.el">GitHub</a>.</li>
</ul>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-06-24-task-management-with-roam-vol2.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Task management with org-roam Vol. 1: Path to Roam</title>
    <link href="https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html" />
    <id>https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html</id>
    <published>2020-06-23T00:00:00Z</published>
    <updated>2020-06-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Moving tasks to org-roam">
    <meta property="og:title" content="Boris Buliga - Task management with org-roam Vol. 1: Path to Roam" />
    <meta property="og:description" content="Moving tasks to org-roam" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2020-06-23-task-management-with-roam-vol1.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Task management with org-roam Vol. 1: Path to Roam</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Task management with org-roam Vol. 1: Path to Roam</h1>
  <section class="subtitle">
    Posted on June 23, 2020
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">#org-roam</a>
  </section>
  
  <section>
    <p><a href="https://orgmode.org">org-mode</a> is a simple outliner for note taking and list management. It <a href="../posts/2016-12-20-Being-an-org-mode-addict.html">doesn’t impose</a> any complex features on users. This is something users excel at by themselves. My suggestion is to continue this tradition and discover task management capabilities in <a href="https://github.com/org-roam/org-roam">org-roam</a>, an <a href="https://orgmode.org">org-mode</a> extension for non-hierarchical notes management.</p>
<p><img src="../images/2020-06-23-task-management-with-roam-vol1/2022-07-19-21-03-45-org-roam-task-management-vol1-3.webp" /></p>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2021-05-10 Mon]</code>: Update post to reflect changes in <a href="https://github.com/org-roam/org-roam/pull/1401">org-roam v2</a>. Previous version of this article is available on <a href="https://github.com/d12frosted/d12frosted.io/blob/c16870cab6ebbaafdf73c7c3589abbd27c20ac52/posts/2020-06-23-task-management-with-roam-vol1.org">GitHub</a>.</li>
</ul>
<!--more-->

<p>Since org-mode gives a lot of freedom, everyone implements tasks management system differently. In the nutshell, most of the implementations I’ve seen consist of the following elements.</p>
<ul>
<li>Task - the simplest actionable item with some <code class="verbatim">TODO</code> state.</li>
<li>Project - a <code class="verbatim">TODO</code> item with outcome requiring multiple steps to achieve it.</li>
<li>Meta project - long lasting project without a final outcome. It consists of projects or tasks. Think of it as of an area or a category. For example, personal blog is a meta project, as it doesn’t have any terminating outcome. It does have projects with specific outcome (like setting up your blog or writing a post) or simple tasks (like renewing SSL certificate), but the blog itself doesn’t have an outcome.</li>
<li>Resource - a person, a tool, a location or whatever possibly related to a task. In plain org-mode usually implemented as a tag.</li>
</ul>
<p>Take a look at the following example of <code class="verbatim">org-mode</code> file with all these elements.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode org"><code class="sourceCode orgmode"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>#+title: Work</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="fu">* emacs-plus</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>:PROPERTIES:</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>:CATEGORY:               emacs-plus</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>:END:</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>Emacs Plus is <span class="ot">[[https://www.gnu.org/software/emacs/emacs.html][→ GNU Emacs]]</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>formulae for macOS <span class="ot">[[https://brew.sh][→ Homebrew]]</span> package manager. It offers a</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>wide rage of extra functionality over regular</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="ot">[[https://formulae.brew.sh/formula/emacs#default][→ Emacs]]</span> package. Emacs Plus</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>intent is to give the most of 'plus' stuff by default, leaving only</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>controversial options as opt-in.</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> Restore icons selection for =emacs-plus@26=          :@FrodoBaggins:</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>Frodo Baggins volunteered to help with this.</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> </span><span class="in">[0/3]</span><span class="fu"> Automate bottle producing                            :PROJECT:</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Create a project on Bintray</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Investigate if =brew test-bot= can be used for =emacs-plus=</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Write a CI job that creates and uploads bottles</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="fu">* Blog</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>:PROPERTIES:</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>:CATEGORY:               blog</span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>:END:</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>https://d12frosted.io</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> Write a post about org-roam and agenda</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> </span><span class="in">[0/2]</span><span class="fu"> Get rid of embedded HTML for images in posts         :PROJECT:</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Write a custom handler of image links</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>This should transform link to images into proper HTML.</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>#+begin_example</span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>  &lt;div class=&quot;post-image post-image&quot;&gt;</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>  &lt;img src=&quot;/images/some-image.png&quot; /&gt;</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>  &lt;/div&gt;</span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>#+end_example</span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Replace all image exports by regular org links</span></span></code></pre></div>
<p><img src="../images/2020-06-23-task-management-with-roam-vol1/2022-07-19-21-04-20-org-roam-task-management-vol1-2.webp" class="img-half img-float-left" /></p>
<p><img src="../images/2020-06-23-task-management-with-roam-vol1/2022-07-19-21-04-20-org-roam-task-management-vol1-1.webp" class="img-half img-float-right" /></p>
<p>As you can see, it has 2 meta projects: <code class="verbatim">emacs-plus</code> and personal blog, each containing a task and a project. Meta projects have their own category property (set by hand or using <code class="verbatim">org-set-property</code> which is bound to <code class="verbatim">C-c C-x p</code> by default), so in agenda view one can quickly distinguish (and filter) tasks from different meta projects (for example, using <code class="verbatim">org-agenda-filter-by-category</code> which is bound to <code class="verbatim">&lt;</code> by default).</p>
<p><img src="../images/2020-06-23-task-management-with-roam-vol1/2022-07-19-21-05-00-org-agenda-filter-by-category.gif" /></p>
<p>Formally (and technically) projects might be defined as a task having sub-tasks, but in this rare case I vote for simplicity - project is a task tagged as <code class="verbatim">PROJECT</code>.</p>
<p>When a task relates to a person or some location, I tag it respectively, just use <code class="verbatim">@</code> symbol as a prefix to distinguish from utilitarian tags. Agenda helps to quickly find all tasks with specific tag. Use <code class="verbatim">M-x org-agenda m</code> or <code class="verbatim">M-x org-agenda M</code> (to list only TODO items).</p>
<p><img src="../images/2020-06-23-task-management-with-roam-vol1/2022-07-19-21-05-13-org-agenda-filter-by-tags.gif" /></p>
<p>With <code class="verbatim">org-roam</code> it makes sense to create a separate file for each meta project. In the endless debate ‘many small’ vs ‘few big’ org files, <code class="verbatim">org-roam</code> favours the former approach (though even this is debatable).</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode org"><code class="sourceCode orgmode"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>#+title: emacs-plus</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>Emacs Plus is <span class="ot">[[https://www.gnu.org/software/emacs/emacs.html][→ GNU Emacs]]</span> formulae for macOS <span class="ot">[[https://brew.sh][→ Homebrew]]</span> package manager. It</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>offers a wide rage of extra functionality over regular <span class="ot">[[https://formulae.brew.sh/formula/emacs#default][→ Emacs]]</span> package. Emacs</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>Plus intent is to give the most of 'plus' stuff by default, leaving only</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>controversial options as opt-in.</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="fu">* Tasks</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> Restore icons selection for =emacs-plus@26=          :@FrodoBaggins:</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>Frodo Baggins volunteered to help with this.</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> </span><span class="in">[0/3]</span><span class="fu"> Automate bottle producing                            :PROJECT:</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Create a project on Bintray</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Investigate if =brew test-bot= can be used for =emacs-plus=</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Write a CI job that creates and uploads bottles</span></span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode org"><code class="sourceCode orgmode"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#+TITLE: Blog</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>https://d12frosted.io</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="fu">* Tasks</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> Write a post about org-roam and agenda</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="fu">** </span><span class="al">TODO</span><span class="fu"> </span><span class="in">[0/2]</span><span class="fu"> Get rid of embedded HTML for images in posts         :PROJECT:</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Write a custom handler of image links</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>This should transform link to images into proper HTML.</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>#+begin_example</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  &lt;div class=&quot;post-image post-image&quot;&gt;</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  &lt;img src=&quot;/images/some-image.png&quot; /&gt;</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>  &lt;/div&gt;</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>#+end_example</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="fu">*** </span><span class="al">TODO</span><span class="fu"> Replace all image exports by regular org links</span></span></code></pre></div>
<p><img src="../images/2020-06-23-task-management-with-roam-vol1/2022-07-19-21-05-28-org-roam-task-management-vol1-4.webp" class="img-half img-float-left" /></p>
<p><img src="../images/2020-06-23-task-management-with-roam-vol1/2022-07-19-21-05-28-org-roam-task-management-vol1-3.webp" class="img-half img-float-right" /></p>
<p><img src="../images/2020-06-23-task-management-with-roam-vol1/2022-07-19-21-05-55-org-roam-task-management-vol1-5.webp" /></p>
<p>So far the transition was simple. However as you can see, in agenda buffer the inferred category contains garbage - note id.</p>
<p>In the <a href="../posts/2020-06-24-task-management-with-roam-vol2.html">next article</a> we are going to explore the means to fix the agenda buffer from the unwanted visual garbage. Stay tuned!</p>
<h1 id="02f55939-bc5a-4696-9570-65e359a8056b" id="task-management-with-org-roam-series">Task Management with org-roam Series</h1>
<ol type="1">
<li><a href="../posts/2020-06-23-task-management-with-roam-vol1.html">Path to Roam</a></li>
<li><a href="../posts/2020-06-24-task-management-with-roam-vol2.html">Categories</a></li>
<li><a href="../posts/2020-06-25-task-management-with-roam-vol3.html">FILETAGS</a></li>
<li><a href="../posts/2020-07-07-task-management-with-roam-vol4.html">Automatic tagging</a></li>
<li><a href="../posts/2021-01-16-task-management-with-roam-vol5.html">Dynamic and fast agenda</a></li>
<li><a href="../posts/2021-01-24-task-management-with-roam-vol6.html">Select a person and view related tasks</a></li>
<li><a href="../posts/2021-05-21-task-management-with-roam-vol7.html">Capture</a></li>
</ol>
<h1 id="86a38b8e-efce-491d-b189-679a4b8a60c5" id="references">References</h1>
<ul>
<li><code class="verbatim">org-roam</code> documentation on <a href="https://github.com/org-roam/org-roam">GitHub</a>.</li>
<li><code class="verbatim">org-mode</code> documentation on the <a href="https://orgmode.org">official site</a>.</li>
<li>Org Mode - Organize Your Life In Plain Text! by Bernt Hansen.</li>
</ul>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-06-23-task-management-with-roam-vol1.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Org-roam tags</title>
    <link href="https://d12frosted.io/posts/2020-06-10-org-roam-tags.html" />
    <id>https://d12frosted.io/posts/2020-06-10-org-roam-tags.html</id>
    <published>2020-06-10T00:00:00Z</published>
    <updated>2020-06-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Utility functions to manage org-roam tags">
    <meta property="og:title" content="Boris Buliga - Org-roam tags" />
    <meta property="og:description" content="Utility functions to manage org-roam tags" />
    <meta property="og:image" content="https://d12frosted.io/images/d12frosted.png" />
    <meta property="og:url" content="https://d12frosted.io/posts/2020-06-10-org-roam-tags.html" />
    <meta property="og:type" content="article" />
    <title>Boris Buliga - Org-roam tags</title>
    <link rel="stylesheet" href="../css/default.css" />
    <link rel="stylesheet" href="../css/fonts.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="../apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon-16x16.png">
    <link rel="manifest" href="../site.webmanifest">

    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/solid.js"></script> -->
    <!-- <script defer src="/library/@fortawesome/fontawesome-free/js/brands.js"></script> -->

    <link href="../library/@fortawesome/fontawesome-free/css/fontawesome.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/brands.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/solid.min.css" rel="stylesheet">
    <link href="../library/@fortawesome/fontawesome-free/css/regular.min.css" rel="stylesheet">

    <script data-goatcounter="https://d12frosted.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <header>
      <div class="logo">
        <a href="../">Boris Buliga</a>
      </div>
      <nav>
        <a href="../posts.html" title="Posts">
          <span class="fa-regular fa-file-lines fa-xs"></span>
          Posts
        </a>
        <a href="../projects.html" title="Projects">
          <span class="fa-solid fa-suitcase fa-xs"></span>
          Projects
        </a>
        <!-- <a href="/atom.xml" title="RSS"><span class="fa-solid fa-rss fa-xs"></span>RSS</a> -->
        <a href="https://github.com/d12frosted" title="GitHub">
          <span class="fa-brands fa-github fa-xs"></span>
          GitHub
        </a>
        <a href="https://barberry.io" title="Barberry Garden">
          <span class="fa-solid fa-wine-glass fa-xs"></span>
          Wine
        </a>
      </nav>
    </header>
    
    <main role="main">
      <article>
  <h1>Org-roam tags</h1>
  <section class="subtitle">
    Posted on June 10, 2020
    
  </section>
  
  <section class="subtitle">
    Updated on July 20, 2022
  </section>
  
  
  <section class="subtitle">
    Tagged as <a title="All pages tagged 'emacs'." href="../tags/emacs.html">#emacs</a>, <a title="All pages tagged 'org-roam'." href="../tags/org-roam.html">#org-roam</a>
  </section>
  
  <section>
    <p><a href="https://github.com/org-roam/org-roam">Org-roam</a> is a note-taking tool built on top of Emacs and Org. Essentially, it’s a replica of <a href="https://roamresearch.com">Roam Research</a>. These tools provide an easy way to create and manage non-hierarchical notes. If you wish to learn more, just take a look at the <a href="https://org-roam.github.io/org-roam/manual/">Org-roam manual</a> or watch <a href="https://www.youtube.com/watch?v=Lg61ocfxk3c">Making Connections in your Notes</a> video by Matt Williams. Believe me, Org-roam and Roam Research are game-changers. Or even better, don’t believe me and validate my claim by yourself.</p>
<p>Since I am already <a href="../posts/2016-12-20-Being-an-org-mode-addict.html">addicted</a>, it was only natural to prefer <code class="verbatim">org-roam</code> over some web application. Apart from being developed on top of mature Org ecosystem, Emacs brings many merits and extensibility is one of them. Once <code class="verbatim">org-roam</code> introduced tags system in <a href="https://github.com/org-roam/org-roam/blob/master/CHANGELOG.md#111-18-05-2020">v1.1.1</a> I felt the lack of functions to manage them. Adding and removing them by hand is not nice. So in this article I am sharing a snippet that I’ve forged to ease the unbearable lightness of being.</p>
<p><strong>Change Log:</strong></p>
<ul>
<li><code>[2020-10-12 Mon]</code>: Functionality described in this post (and similar functionality to manage aliases) is <a href="https://github.com/org-roam/org-roam/pull/1183">merged to the upstream</a>. Now simply use one of the following functions:
<ul>
<li><code class="verbatim">org-roam-tag-add</code></li>
<li><code class="verbatim">org-roam-tag-delete</code></li>
<li><code class="verbatim">org-roam-alias-add</code></li>
<li><code class="verbatim">org-roam-alias-delete</code></li>
</ul></li>
<li><code>[2021-07-31 Sat]</code>: With <a href="https://github.com/org-roam/org-roam/releases/tag/v2.0.0">release of org-roam v2</a> you should use the following functions:
<ul>
<li><code class="verbatim">org-roam-tag-add</code></li>
<li><code class="verbatim">org-roam-tag-remove</code></li>
<li><code class="verbatim">org-roam-alias-add</code></li>
<li><code class="verbatim">org-roam-alias-remove</code></li>
</ul></li>
</ul>
<!--more-->

<p><img src="../images/2020-06-10-org-roam-tags/2022-07-19-21-01-06-org-roam-tags-demo.gif" /></p>
<p>When it comes to tags removal, I just want to have a list of tags set in the current buffer and chose one of them to remove. Important thing here is that it should not allow me to remove tag set by directories (see <code class="verbatim">org-roam-tag-sources</code>).</p>
<p>On the other hand, when I add a tag, I want to see the list of all tags set either by buffer property or by directory. I can chose one of them (otherwise I tend to mistype) or add a completely new one.</p>
<p>So let’s implement these two functions. But before that, we need to have a function to get the list of buffer wide tags. For this we can write some simple helper (that uses regexps) or reuse internal API from <code class="verbatim">org-roam</code> (that does all the dirty work for us).</p>
<div class="sourceCode" id="cb1" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +org-notes-tags-read </span>()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return list of tags as set in the buffer.&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  (org-roam--extract-tags-prop (buffer-file-name (buffer-base-buffer))))</span></code></pre></div>
<p>Now it’s easy to implement the function to delete one of the buffer tags.</p>
<div class="sourceCode" id="cb2" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +org-notes-tags-delete </span>()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Delete a tag from current note.&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">unless</span> (+org-notes-buffer-p)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    (user-error <span class="st">&quot;Current buffer is not a note&quot;</span>))</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((tags (+org-notes-tags-read))</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>         (tag (completing-read <span class="st">&quot;Tag: &quot;</span> tags <span class="kw">nil</span> 'require-match)))</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    (+org-buffer-prop-set</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>     <span class="st">&quot;ROAM_TAGS&quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>     (combine-and-quote-strings (<span class="kw">delete</span> tag tags)))</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    (org-roam-db--update-tags)))</span></code></pre></div>
<p>Since it works only in the context of <code class="verbatim">org-roam</code> it’s good to have a meaningful error when this function used in the invalid context. Next we read the buffer tags and select one of them using <code class="verbatim">completing-read</code>. The <code class="verbatim">'require-match</code> is just a dummy non-nil value used instead of <code class="verbatim">t</code> as it improves readability.</p>
<p>Next we remove the selected tag from tags and set the result to the buffer property <code class="verbatim">ROAM_TAGS</code>, each tag quoted. Simple as that. I will provide implementation of <code class="verbatim">+org-notes-buffer-p</code> and <code class="verbatim">+org-buffer-prop-set</code> later on.</p>
<p>And the most important function is for adding tags.</p>
<div class="sourceCode" id="cb3" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +org-notes-tags-add </span>()</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Add a tag to current note.&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">unless</span> (+org-notes-buffer-p)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    (user-error <span class="st">&quot;Current buffer is not a note&quot;</span>))</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((tags (seq-uniq</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>                (+seq-flatten</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>                 (+seq-flatten</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>                  (org-roam-db-query [:select tags :from tags])))))</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>         (tag (completing-read <span class="st">&quot;Tag: &quot;</span> tags)))</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">when</span> (string-empty-p tag)</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>      (user-error <span class="st">&quot;Tag can't be empty&quot;</span>))</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    (+org-buffer-prop-set</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>     <span class="st">&quot;ROAM_TAGS&quot;</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>     (combine-and-quote-strings (seq-uniq (<span class="kw">cons</span> tag (+org-notes-tags-read)))))</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    (org-roam-db--update-tags)))</span></code></pre></div>
<p>It also errors out when called outside of <code class="verbatim">org-roam</code> buffer. Then we query all tags from the <code class="verbatim">org-roam-db</code>. Since this is the list of lists of lists, we have two double flatten the result and then leave only unique entries. After that everything is straightforward.</p>
<p>Now the missing functions.</p>
<div class="sourceCode" id="cb4" data-org-language="emacs-lisp"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +org-notes-buffer-p </span>()</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Return non-nil if the currently visited buffer is a note.&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">and</span> buffer-file-name</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>       (<span class="kw">string-equal</span> (file-name-as-directory org-roam-directory)</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>                     (file-name-directory buffer-file-name))))</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +seq-flatten </span>(list-of-lists)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Flatten LIST-OF-LISTS.&quot;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">apply</span> #'append list-of-lists))</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> +org-buffer-prop-set </span>(name value)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Set a buffer property called NAME to VALUE.&quot;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  (save-excursion</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    (widen)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    (goto-char (point-min))</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">if</span> (re-search-forward (concat <span class="st">&quot;^</span><span class="ch">#\\</span><span class="st">+&quot;</span> name <span class="st">&quot;: </span><span class="sc">\\</span><span class="st">(.*</span><span class="sc">\\</span><span class="st">)&quot;</span>) (point-max) <span class="kw">t</span>)</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>        (replace-match (concat <span class="st">&quot;#+&quot;</span> name <span class="st">&quot;: &quot;</span> value))</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>      <span class="co">;; find the first line that doesn't begin with ':' or '#'</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">let</span> ((found))</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>        (while (<span class="kw">not</span> (<span class="kw">or</span> found (eobp)))</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>          (beginning-of-line)</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>          (<span class="kw">if</span> (<span class="kw">or</span> (looking-at <span class="st">&quot;^#&quot;</span>)</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>                  (looking-at <span class="st">&quot;^:&quot;</span>))</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>              (line-move <span class="dv">1</span> <span class="kw">t</span>)</span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>            (<span class="kw">setq</span> found <span class="kw">t</span>)))</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>        (insert <span class="st">&quot;#+&quot;</span> name <span class="st">&quot;: &quot;</span> value <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span>)))))</span></code></pre></div>
<p>That’s it. You can find all solution as a gist on <a href="https://gist.github.com/d12frosted/4a55f3d072a813159c1d7b31c21bac9a">GitHub</a>. Have fun!</p>
  </section>

  <hr />

  <section class="text-right">
    <a target="_blank" class="post-footer-sources" href="https://github.com/d12frosted/d12frosted.io/blob/master/posts/2020-06-10-org-roam-tags.org">
      <i class="fa fa-code fa-2xs"></i> Sources
    </a>
  </section>

  <script src="https://utteranc.es/client.js" repo="d12frosted/d12frosted.io" issue-term="pathname" label="comments" theme="github-light" crossorigin="anonymous" async>
  </script>
</article>

    </main>

    <footer>
      Site proudly generated by
      <a href="https://github.com/d12frosted/vulpea">Vulpea</a>,
      and
      <a href="http://jaspervdj.be/hakyll">Hakyll</a>
    </footer>

  </body>
</html>
]]></summary>
</entry>

</feed>
